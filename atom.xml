<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The personal blog of DWen_666</title>
  
  <subtitle>姚道文</subtitle>
  <link href="https://ydw-item.github.io.git/atom.xml" rel="self"/>
  
  <link href="https://ydw-item.github.io.git/"/>
  <updated>2025-09-11T05:39:49.000Z</updated>
  <id>https://ydw-item.github.io.git/</id>
  
  <author>
    <name>DWen_666</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RNG</title>
    <link href="https://ydw-item.github.io.git/2025/09/11/RNG/"/>
    <id>https://ydw-item.github.io.git/2025/09/11/RNG/</id>
    <published>2025-09-11T05:39:49.000Z</published>
    <updated>2025-09-11T05:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;</summary>
      
    
    
    
    <category term="STM32" scheme="https://ydw-item.github.io.git/categories/STM32/"/>
    
    
    <category term="RNG" scheme="https://ydw-item.github.io.git/tags/RNG/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://ydw-item.github.io.git/2025/09/10/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP/"/>
    <id>https://ydw-item.github.io.git/2025/09/10/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/TCP/</id>
    <published>2025-09-10T04:18:04.101Z</published>
    <updated>2025-09-10T04:18:04.101Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>CAN通信</title>
    <link href="https://ydw-item.github.io.git/2025/09/08/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/CAN/"/>
    <id>https://ydw-item.github.io.git/2025/09/08/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/CAN/</id>
    <published>2025-09-08T03:05:30.000Z</published>
    <updated>2025-04-08T03:05:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文档</p><ol><li><a href="https://blog.csdn.net/qq_35057766/article/details/135580884">一文读懂CAN总线协议 (超详细配34张高清图)_can总线协议详解-CSDN博客</a></li></ol><h1 id="一、CAN总线结构"><a href="#一、CAN总线结构" class="headerlink" title="一、CAN总线结构"></a>一、CAN总线结构</h1><p>没有时钟线，<strong>半双工异步通信</strong>，CAN总线上的所有节点<strong>没有主从之分</strong>。任何节点都可以在<strong>总线空闲时</strong>主动向总线上发送消息，灵活性极高。</p><p> CAN总线网络的结构有<strong>闭环</strong>和<strong>开环</strong>两种形式。</p><p>下图所示，是<strong>闭环结构</strong>的CAN总线网络，<strong>总线两端各连接一个120欧的电阻</strong>，两根信号线<strong>形成回路</strong>。这种CAN总线网络由ISO 11898标准定义，是<strong>高速、短距离</strong>的CAN网络，通信速率为<strong>125kbit&#x2F;s</strong>到1Mbit&#x2F;s。在<strong>1Mbit&#x2F;s</strong>通讯速率时，总线长度<strong>最长达40m</strong>。</p><style>.rhbttcvwocok{}</style><img src="/2025/09/08/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/CAN/1.png" class="rhbttcvwocok" alt="image-20240108222241782"><p>下图是<strong>开环结构</strong>的CAN总线网络，两根信号线独立，各自<strong>串联一个2.2k欧</strong>的电阻。这种CAN总线网络由ISO11519-2标准定义，是<strong>低速、远距离</strong>的CAN网络，通信速率<strong>最高125kbit&#x2F;s</strong>。在<strong>40kbit&#x2F;s</strong>速率时，总线最长距离可达<strong>1000m</strong>。</p><style>.uzlyxqwgxoxf{}</style><img src="/2025/09/08/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/CAN/2.png" class="uzlyxqwgxoxf" alt="image-20240108222140342"><p> CAN总线的两根信号线通常采用的是<strong>双绞线</strong>，如下图4所示，传输的是<strong>差分信号</strong>，通过两根信号线的<strong>电压差CANH-CANL</strong>来表示总线电平。以差分信号传输信息具有抗干扰能力强，能有效抑制外部电磁干扰等优点，这也是CAN总线在工业上应用广泛的一个原因。</p><p>与传输的逻辑信号1或0对应。对应于<strong>逻辑1</strong>的称为<strong>隐性电平</strong>，对应于<strong>逻辑0</strong>成为<strong>显性电平</strong>。</p><p>上半部分为<strong>实际CANH和CANL的电平</strong>，下半部分对于的<strong>逻辑电平</strong></p><style>.grrwwwqwjfvk{}</style><img src="/grrwwwqwjfvk" class="" title="&#x2F;2025&#x2F;09&#x2F;08&#x2F;%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE&#x2F;CAN&#x2F;3.png &quot;&quot;&quot;image-20240110083328495&quot;"><p>CAN总线上的一个终端设备称为一个<strong>节点</strong>，在CAN网络中，<strong>没有主设备和从设备的区别</strong>。一个CAN节点的硬件部分一般由<strong>CAN控制器</strong>和<strong>CAN收发器</strong>两个部分组成。CAN控制器负责CAN总线的<strong>逻辑控制</strong>，实现CAN传输协议；CAN收发器主要负责MCU逻辑电平与CAN总线<strong>电平之间的转换</strong>。</p><p><strong>线与逻辑</strong>：CAN总线具有“<strong>线与</strong>”的特性，也就是当由两个节点<strong>同时</strong>向总线发送信号时，一个是发送<strong>显性电平（逻辑0）</strong>，另一个发送<strong>隐性电平（逻辑1）</strong>，则总线呈现为<strong>显性电平</strong>。这个特性被用于<strong>总线总裁</strong>，也就是哪个节点优先占用总线进行发送操作。</p><style>.golixmktoaes{}</style><img src="/2025/09/08/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/CAN/9.png" class="golixmktoaes" alt="image-20250909153253976"><h1 id="二、波特率"><a href="#二、波特率" class="headerlink" title="二、波特率"></a>二、波特率</h1><h1 id="三、CAN各类型帧"><a href="#三、CAN各类型帧" class="headerlink" title="三、CAN各类型帧"></a>三、CAN各类型帧</h1><h2 id="3-1-数据帧"><a href="#3-1-数据帧" class="headerlink" title="3.1 数据帧"></a>3.1 数据帧</h2><p><strong>主动发送</strong>包含<strong>ID</strong>和<strong>数据</strong>的帧，用于**发送单元 **向 <strong>接收单元</strong> 传送数据的帧。</p><h3 id="1-标准数据帧"><a href="#1-标准数据帧" class="headerlink" title="1. 标准数据帧"></a>1. 标准数据帧</h3><ul><li><strong>ID长度</strong>：11位标识符</li><li><strong>ID范围</strong>：2的11次方 &#x3D; 2048个不同的报文ID</li><li><strong>仲裁场结构</strong>：11位ID+RTR位</li><li><strong>IDE状态</strong>：显性(0)，位于控制场</li><li><strong>SRR位</strong>：不存在</li><li><strong>优先级规则</strong>：只比较11位ID，ID值<strong>越小</strong>优先级<strong>越高</strong></li><li><strong>兼容性</strong>：所有CAN控制器</li></ul><style>.dgehscwtoynd{}</style><img src="/2025/09/08/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/CAN/4.png" class="dgehscwtoynd" alt="image-20250908145713779"><h3 id="2-扩展数据帧"><a href="#2-扩展数据帧" class="headerlink" title="2. 扩展数据帧"></a>2. 扩展数据帧</h3><ul><li><p><strong>ID长度</strong>：29位标识符（11位基ID 和 新增的18位扩展ID）</p></li><li><p><strong>ID范围</strong>：2的29次方 &#x3D; 5.36亿个不同的报文ID</p></li><li><p><strong>仲裁场结构</strong>：11位ID+SRR位+IDE位+18位扩展ID+RTR位</p></li><li><p><strong>IDE状态</strong>：隐性(1)，位于仲裁</p></li><li><p><strong>SRR位</strong>：隐性(1)，取代了标准帧中RTR的位置</p></li><li><p><strong>优先级规则</strong>：先比较11位基ID，再比较18位扩展ID，ID值<strong>越小</strong>优先级<strong>越高</strong></p></li><li><p><strong>兼容性</strong>：仅CAN 2.0B主动控制器完全支持</p></li></ul><style>.yrdxgkiufuwm{}</style><img src="/2025/09/08/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/CAN/5.png" class="yrdxgkiufuwm" alt="image-20250908145820821"><h3 id="3-标准数据帧与扩展数据帧的优先级"><a href="#3-标准数据帧与扩展数据帧的优先级" class="headerlink" title="3. 标准数据帧与扩展数据帧的优先级"></a>3. 标准数据帧与扩展数据帧的优先级</h3><p>  假设有一个标准帧（ID&#x3D;0x123）和一个扩展帧（基ID&#x3D;0x123）。</p><ol><li>它们开始同时发送各自的ID。</li><li>前11位（0x123）完全相同，无法分出胜负。</li><li>接下来，标准帧要发送的是<strong>RTR位（显性0）</strong>，而扩展帧要发送的是<strong>SRR位（隐性1）</strong>。</li><li>根据“显性覆盖隐性”的规则，**显性 (0) 赢得隐性 (1)**。</li><li><strong>因此，标准帧赢得了仲裁，优先级更高</strong>。</li></ol><p><strong>结论：一个标准数据帧总是会优先于一个具有相同11位基ID的扩展数据帧。</strong></p><h2 id="3-2-遥控帧-远程帧"><a href="#3-2-遥控帧-远程帧" class="headerlink" title="3.2 遥控帧(远程帧)"></a>3.2 遥控帧(远程帧)</h2><p>请求数据，向网络上的其他节点发出的某个<strong>ID</strong>的<strong>数据请求</strong>，发送节点<strong>收到</strong>  <strong>遥控帧</strong> 后就可以发送相应ID的<strong>数据帧</strong></p><h3 id="1-标准遥控帧"><a href="#1-标准遥控帧" class="headerlink" title="1. 标准遥控帧"></a>1. 标准遥控帧</h3><ul><li><p><strong>ID长度</strong>：11位标识符</p></li><li><p><strong>ID范围</strong>：2的11次方 &#x3D; 2048个不同的报文ID</p></li><li><p><strong>仲裁场结构</strong>：11位ID+RTR位</p></li><li><p><strong>RTR位</strong>：隐性(1)</p></li><li><p><strong>IDE状态</strong>：显性(0)，位于控制场</p></li><li><p><strong>SRR位</strong>：隐性(1)，取代了标准帧中RTR的位置</p></li><li><p><strong>数据场</strong>：无</p></li><li><p><strong>DLC字段的作用</strong>：指定<strong>希望收到</strong>的数据帧的数据长度</p></li><li><p><strong>优先级规则</strong>：只比较11位ID，ID值<strong>越小</strong>优先级<strong>越高</strong></p></li></ul><style>.lfgdxxqnbjqk{}</style><img src="/2025/09/08/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/CAN/6.png" class="lfgdxxqnbjqk" alt="image-20250908145931171"><h3 id="2-扩展遥控帧"><a href="#2-扩展遥控帧" class="headerlink" title="2. 扩展遥控帧"></a>2. 扩展遥控帧</h3><ul><li><p><strong>ID长度</strong>：29位标识符（11位基ID 和 新增的18位扩展ID）</p></li><li><p><strong>ID范围</strong>：2的29次方 &#x3D; 5.36亿个不同的报文ID</p></li><li><p><strong>仲裁场结构</strong>：11位ID+SRR位+IDE位+18位扩展ID+RTR位</p></li><li><p><strong>RTR位</strong>：隐性(1)</p></li><li><p><strong>IDE状态</strong>：隐性(1)，位于仲裁场</p></li><li><p><strong>SRR位</strong>：隐性 (1)，取代了标准帧中RTR位的位置</p></li><li><p><strong>数据场</strong>：指定<strong>希望收到</strong>的数据帧的数据长度</p></li><li><p><strong>DLC字段的作用</strong>：指定希望收到的数据帧的数据长度</p></li><li><p><strong>优先级规则</strong>：先比较11位基ID，ID值<strong>越小</strong>优先级<strong>越高</strong></p></li></ul><style>.hcxgzxlpelci{}</style><img src="/2025/09/08/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/CAN/7.png" class="hcxgzxlpelci" alt="image-20250908145958310"><h3 id="3-标准遥控帧和扩展遥控帧的仲裁"><a href="#3-标准遥控帧和扩展遥控帧的仲裁" class="headerlink" title="3. 标准遥控帧和扩展遥控帧的仲裁"></a>3. 标准遥控帧和扩展遥控帧的仲裁</h3><p>​规则与数据帧一致。</p><ol><li>前11位（基ID）完全相同。</li><li>接下来，标准遥控帧发送<strong>RTR位（隐性1）</strong>，扩展遥控帧发送<strong>SRR位（隐性1）</strong>。两者都是1，无法分出胜负。</li><li>再下一位，标准帧要发送<strong>IDE位（显性0）</strong>，而扩展帧要发送的也是<strong>IDE位（但它是隐性1）</strong>。</li><li>根据“显性覆盖隐性”的规则，**显性 (0) 赢得隐性 (1)**。</li><li><strong>因此，标准遥控帧赢得了仲裁，优先级更高</strong>。</li></ol><p><strong>结论：一个标准遥控帧总是会优先于一个具有相同11位基ID的扩展遥控帧</strong></p><h2 id="3-3-错误帧"><a href="#3-3-错误帧" class="headerlink" title="3.3 错误帧"></a>3.3 错误帧</h2><p>当总线上<strong>任何节点</strong>检测到<strong>任何一种错误</strong>时，它不会保持沉默，而是会<strong>立即、主动地</strong>发送一个错误帧来<strong>打断</strong>当前正在进行的数据传输，并<strong>通知网络上的所有节点</strong>：“刚收到的报文有错误！”</p><style>.ftpfwyqcmkkp{}</style><img src="/2025/09/08/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/CAN/8.png" class="ftpfwyqcmkkp" alt="image-20250908150548148"><ul><li><p><strong>主动错误</strong></p><p>  由<strong>检测到错误且错误状态为“主动错误”</strong> 的节点发出</p><p>  这个显性位序列会<strong>强烈地破坏</strong>总线上正在传输的报文格式（因为正常报文中<strong>不可能出现6个连续的显性位</strong>），从而确保所有节点都能意识到错误的发生。</p></li><li><p><strong>被动错误</strong></p><p>  由<strong>检测到错误但错误状态为“被动错误”</strong> 的节点发出</p></li></ul><p>​如果此时总线上没有其他节点发送主动错误标志（即没有“主动错误”节点检测到错误），这个被动错误标志将不会影响总线传输，因为它会被其他节点发送的显性位覆盖。</p><h3 id="错误帧是如何被触发的？"><a href="#错误帧是如何被触发的？" class="headerlink" title="错误帧是如何被触发的？"></a>错误帧是如何被触发的？</h3><ul><li>位错误</li><li>填充错误</li><li>CRC错误</li><li>格式错误</li><li>应答错误</li></ul><h2 id="3-4-过载帧"><a href="#3-4-过载帧" class="headerlink" title="3.4 过载帧"></a>3.4 过载帧</h2><p><strong>过载帧</strong> 是由<strong>接收节点</strong> <strong>主动</strong> 发出的特殊帧，其目的是为了<strong>人为地插入额外的延迟</strong>，从而向网络中的其他节点宣告：“我目前太忙了，还没来得及处理上一帧数据，请稍微慢一点，等我准备好再发送下一帧。”</p><style>.ymvpshdxsnvl{}</style><img src="/2025/09/08/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/CAN/12.png" class="ymvpshdxsnvl" alt="image-20250909185943097"><h2 id="3-5-帧间空间"><a href="#3-5-帧间空间" class="headerlink" title="3.5 帧间空间"></a>3.5 帧间空间</h2><p>用于将<strong>数据帧</strong>、<strong>遥控帧</strong>与**前后的帧 ** <strong>分隔</strong> 开的帧</p><h1 id="四、工作模式"><a href="#四、工作模式" class="headerlink" title="四、工作模式"></a>四、工作模式</h1><style>.exyphxzpdllm{}</style><img src="/2025/09/08/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/CAN/11.png" class="exyphxzpdllm" alt="image-20250909112058478"><h2 id="1-正常模式"><a href="#1-正常模式" class="headerlink" title="1. 正常模式"></a>1. 正常模式</h2><p>CAN 模块进行标准通信的模式</p><p>可以正常地<strong>发送</strong>和<strong>接收</strong>报文，CANTX发送的数据也会发给CANRX</p><p>节点可以输出显性电平（逻辑0）来仲裁或应答，从而影响总线状态。</p><p><strong>数据流</strong>：既处理内部产生的发送数据，也处理从总线接收到的数据。</p><h2 id="2-静默模式"><a href="#2-静默模式" class="headerlink" title="2. 静默模式"></a>2. 静默模式</h2><p>主要用于<strong>监听</strong>或<strong>分析</strong>总线流量，而不以任何方式干扰总线</p><ul><li><p><strong>只接收，不发送</strong>：可以接收到总线上的报文，并能产生正确的接收中断、更新接收错误计数器等。</p></li><li><p><strong>不影响总线</strong>：节点的发送端<strong>只能输出隐性位（逻辑1）</strong>。这意味着：</p><ul><li>它<strong>无法</strong>成功发送报文（因为无法产生显性位来开始帧、进行仲裁或应答）。</li><li>它<strong>不会</strong>破坏总线上其他节点之间的通信。即使它尝试发送，也只会发送一连串的“1”，而<strong>其他正常节点发送的“0”会覆盖这个“1”</strong>，因此总线不受影响。</li></ul></li></ul><p><strong>数据流</strong>：只处理从总线接收到的数据。发送路径被有效禁用。</p><h2 id="3-环回模式"><a href="#3-环回模式" class="headerlink" title="3. 环回模式"></a>3. 环回模式</h2><p><strong>自己发送，自己接收</strong>：节点内部将<strong>发送端输出直接反馈到接收端输入</strong></p><ul><li><p><strong>与外部总线隔离</strong>：在此模式下，CAN 控制器<strong>忽略</strong>来自外部 CAN 收发器的实际 RX 信号。它只处理自己内部环回的数据。</p></li><li><ul><li><strong>可以影响总线（注意！）</strong>：虽然它自己不听总线，但它的<strong>发送引脚 (TX)</strong> 仍然会正常工作，将报文发送到外部收发器上，从而<strong>影响物理总线</strong>。这是与环回静默模式的关键区别。</li></ul></li></ul><p><strong>数据流</strong>：发送的数据同时被内部环回和发送到物理总线上。</p><h2 id="4-环回静默模式"><a href="#4-环回静默模式" class="headerlink" title="4. 环回静默模式"></a>4. 环回静默模式</h2><p>这是<strong>环回模式</strong>和<strong>静默模式</strong>的结合，实现了<strong>完全的自测试，且与外部总线完全隔离</strong>。</p><ul><li><p><strong>自己发送，自己接收</strong>：与环回模式相同，内部进行自发自收。</p></li><li><p><strong>与外部总线完全隔离</strong>：与静默模式相同，节点的 TX 引脚<strong>只能输出隐性位（逻辑1）</strong>。因此，它<strong>不会</strong>对外部物理总线造成任何影响。</p></li><li><p>同时，它也忽略外部总线的信号。</p></li></ul><h1 id="五、过滤器"><a href="#五、过滤器" class="headerlink" title="五、过滤器"></a>五、过滤器</h1><h2 id="1-掩码和ID"><a href="#1-掩码和ID" class="headerlink" title="1. 掩码和ID"></a>1. 掩码和ID</h2><p><strong>过滤器的作用就是进行硬件层面的预处理</strong>，只允许那些与预设规则匹配的报文进入接收FIFO并产生中断，其他报文被硬件直接丢弃，从而极大地减轻CPU的负担。</p><ul><li><strong>过滤器ID (Filter ID):</strong>  你希望匹配的<strong>期望值</strong>。</li><li><strong>过滤器掩码 (Filter Mask):</strong>  决定ID中的<strong>哪些位必须严格匹配</strong>，哪些位“我不关心”（don’t care）。<ul><li><strong>掩码位 &#x3D; 1</strong>: 表示“<strong>必须匹配</strong>”。对应ID位必须与收到的报文ID位一致。</li><li><strong>掩码位 &#x3D; 0</strong>: 表示“<strong>不关心</strong>”。对应ID位无论是0还是1，都允许通过。</li></ul></li></ul><h2 id="2-两种工作模式"><a href="#2-两种工作模式" class="headerlink" title="2. 两种工作模式"></a>2. 两种工作模式</h2><style>.zkkyivvqyfgn{}</style><img src="/2025/09/08/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/CAN/10.png" class="zkkyivvqyfgn" alt="image-20250909171347425"><style>.cnskxpjichzn{}</style><img src="/2025/09/08/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/CAN/13.png" class="cnskxpjichzn" alt="image-20250910121655253"><ul><li><strong>标识符列表模式</strong></li></ul><p>​掩码被当作第二个<strong>完整的ID</strong>来使用。在这种模式下，过滤器只<strong>精确匹配</strong>你设置的少数几个<strong>特定ID</strong>。</p><p>​<strong>示例</strong>：你设置：</p><p>​过滤器ID &#x3D; <code>0x123</code></p><p>​过滤器掩码 &#x3D; <code>0x456</code> (在此模式下，它被视为另一个ID)<br>​那么控制器<strong>只</strong>接收ID恰好为 <code>0x123</code> <strong>或</strong> 恰好为 <code>0x456</code> 的报文。</p><p>能设置的ID数量少。相当于“白名单”模式</p><ul><li><strong>掩码模式</strong></li></ul><p>​真正的掩码模式。掩码定义了ID中需要匹配的位。</p><p>​<strong>示例</strong>：你希望接收所有ID在 <code>0x5A0</code> (0101 1010 0000)到 <code>0x5AF</code>(0101 1010 1111) 范围内的标准帧报文（即低4位任意）。</p><p>​<strong>过滤器ID</strong> 设置为 <code>0x5A0</code> (二进制 <code>0101 1010 0000</code>)</p><p>​<strong>过滤器掩码</strong> 设置为 <code>0x7F0</code> (二进制 <code>0111 1111 0000</code>)</p><p>​<strong>解释</strong>：</p><p>​掩码的高7位是 <code>1</code>，这意味着标准ID的最高7位（11位ID中的高7位）必须与 <code>0x5A0</code> 的高7位（即 <code>0x5A</code>）完全匹配。</p><p>​掩码的低4位是 <code>0</code>，这意味着低4位可以是任意值（0x0到0xF）。</p><p>​<strong>结果</strong>：此过滤器将允许ID为 <code>0x5A0</code>, <code>0x5A1</code>, <code>0x5A2</code>, … <code>0x5AF</code> 的报文通过。</p><p>可以用一个过滤器规则匹配<strong>一组</strong>ID</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考文档&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_35057766/article/details/135580884&quot;&gt;一文读懂CAN总线协议 (超详细配34张高清图)_can总线协议详解-CSDN博客&lt;/a&gt;&lt;/li</summary>
      
    
    
    
    <category term="STM32" scheme="https://ydw-item.github.io.git/categories/STM32/"/>
    
    <category term="通信协议" scheme="https://ydw-item.github.io.git/categories/STM32/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="通讯协议" scheme="https://ydw-item.github.io.git/tags/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="CAN" scheme="https://ydw-item.github.io.git/tags/CAN/"/>
    
  </entry>
  
  <entry>
    <title>AD</title>
    <link href="https://ydw-item.github.io.git/2025/07/01/AD/AD/"/>
    <id>https://ydw-item.github.io.git/2025/07/01/AD/AD/</id>
    <published>2025-07-01T11:18:30.000Z</published>
    <updated>2025-07-01T11:18:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/image-20250701235536455.png" alt="image-20250701235536455"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/image-20250701235536455.png&quot; alt=&quot;image-20250701235536455&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="PCB" scheme="https://ydw-item.github.io.git/categories/PCB/"/>
    
    
    <category term="PCB" scheme="https://ydw-item.github.io.git/tags/PCB/"/>
    
  </entry>
  
  <entry>
    <title>WDG看门狗</title>
    <link href="https://ydw-item.github.io.git/2025/06/21/WDG/"/>
    <id>https://ydw-item.github.io.git/2025/06/21/WDG/</id>
    <published>2025-06-21T05:39:49.000Z</published>
    <updated>2025-06-21T05:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、RTC-Init"><a href="#一、RTC-Init" class="headerlink" title="一、RTC_Init()"></a>一、RTC_Init()</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、RTC-Init&quot;&gt;&lt;a href=&quot;#一、RTC-Init&quot; class=&quot;headerlink&quot; title=&quot;一、RTC_Init()&quot;&gt;&lt;/a&gt;一、RTC_Init()&lt;/h1&gt;</summary>
      
    
    
    
    <category term="STM32" scheme="https://ydw-item.github.io.git/categories/STM32/"/>
    
    <category term="WDG" scheme="https://ydw-item.github.io.git/categories/STM32/WDG/"/>
    
    
    <category term="WDG" scheme="https://ydw-item.github.io.git/tags/WDG/"/>
    
  </entry>
  
  <entry>
    <title>低功耗模式</title>
    <link href="https://ydw-item.github.io.git/2025/06/21/%E4%BD%8E%E5%8A%9F%E8%80%97%E6%A8%A1%E5%BC%8F/"/>
    <id>https://ydw-item.github.io.git/2025/06/21/%E4%BD%8E%E5%8A%9F%E8%80%97%E6%A8%A1%E5%BC%8F/</id>
    <published>2025-06-21T05:39:49.000Z</published>
    <updated>2025-06-21T05:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、低功耗模式"><a href="#一、低功耗模式" class="headerlink" title="一、低功耗模式"></a>一、低功耗模式</h1><p>器件有三个低功耗模式：</p><ul><li>睡眠模式（内核停止，外设保持运行）</li><li>停止模式（所有时钟都停止）</li><li>待机模式（1.2 V 域断电）</li></ul><p>此外，可通过下列方法之一降低运行模式的功耗：</p><ul><li>降低系统时钟速度</li><li>不使用 APBx 和 AHBx 外设时，将对应的外设时钟关闭</li></ul><p><img src="/image-20250621142334228.png" alt="image-20250621142334228"></p><h2 id="1-1睡眠模式"><a href="#1-1睡眠模式" class="headerlink" title="1. 1睡眠模式"></a>1. 1睡眠模式</h2><p>执行WFI（等待中断）指令</p><p>执行WFE（等待事件）指令  </p><p>进入睡眠模式的两种方</p><table><thead><tr><th align="center">睡眠方案</th><th align="center">标志位</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">立即睡眠</td><td align="center">SLEEPONEXIT置0</td><td align="center">MCU 将在执行 WFI 或 WFE 指令时立即进入</td></tr><tr><td align="center">退出时睡眠</td><td align="center">SLEEPONEXIT置01</td><td align="center">MCU 将在退出优先级最低的 ISR 时立即进入</td></tr></tbody></table><h3 id="1-1-1-进入睡眠模式"><a href="#1-1-1-进入睡眠模式" class="headerlink" title="1.1.1 进入睡眠模式"></a>1.1.1 进入睡眠模式</h3><h3 id="1-1-2-退出睡眠模式"><a href="#1-1-2-退出睡眠模式" class="headerlink" title="1.1.2 退出睡眠模式"></a>1.1.2 退出睡眠模式</h3><h2 id="1-2-停止模式"><a href="#1-2-停止模式" class="headerlink" title="1.2 停止模式"></a>1.2 停止模式</h2><h3 id="1-2-1-进入停止模式"><a href="#1-2-1-进入停止模式" class="headerlink" title="1.2.1 进入停止模式"></a>1.2.1 进入停止模式</h3><h3 id="1-2-2-退出停止模式"><a href="#1-2-2-退出停止模式" class="headerlink" title="1.2.2 退出停止模式"></a>1.2.2 退出停止模式</h3><h2 id="1-3-待机模式"><a href="#1-3-待机模式" class="headerlink" title="1.3 待机模式"></a>1.3 待机模式</h2><h3 id="1-3-1-进入待机模式"><a href="#1-3-1-进入待机模式" class="headerlink" title="1.3.1 进入待机模式"></a>1.3.1 进入待机模式</h3><h3 id="1-3-2-退出停止模式"><a href="#1-3-2-退出停止模式" class="headerlink" title="1.3.2 退出停止模式"></a>1.3.2 退出停止模式</h3><p>外部中断、内部中断、Systick中断都无法唤醒</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、低功耗模式&quot;&gt;&lt;a href=&quot;#一、低功耗模式&quot; class=&quot;headerlink&quot; title=&quot;一、低功耗模式&quot;&gt;&lt;/a&gt;一、低功耗模式&lt;/h1&gt;&lt;p&gt;器件有三个低功耗模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;睡眠模式（内核停止，外设保持运行）&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="STM32" scheme="https://ydw-item.github.io.git/categories/STM32/"/>
    
    
    <category term="低功耗" scheme="https://ydw-item.github.io.git/tags/%E4%BD%8E%E5%8A%9F%E8%80%97/"/>
    
  </entry>
  
  <entry>
    <title>LCD</title>
    <link href="https://ydw-item.github.io.git/2025/06/01/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E6%99%BA%E8%83%BD%E9%97%A8%E9%94%81/LCD/"/>
    <id>https://ydw-item.github.io.git/2025/06/01/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E6%99%BA%E8%83%BD%E9%97%A8%E9%94%81/LCD/</id>
    <published>2025-06-01T06:56:00.000Z</published>
    <updated>2025-06-01T06:56:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考资料</strong>：</p><p>1.<a href="https://blog.csdn.net/black_sneak/article/details/125583293?ops_request_misc=%7B%22request_id%22:%22c45b47e05e60431441c7c0cbba25376a%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=c45b47e05e60431441c7c0cbba25376a&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-10-125583293-null-null.142%5Ev102%5Epc_search_result_base5&utm_term=lcd&spm=1018.2226.3001.4187">【强烈推荐】基于STM32的TFT-LCD各种显示实现（内容详尽含代码）_tftlcd屏幕 dc引脚可以和其他引脚共用吗-CSDN博客</a></p><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;1.&lt;a href=&quot;https://blog.csdn.net/black_sneak/article/details/125583293?ops_request_misc=%7B%22request_id%22</summary>
      
    
    
    
    <category term="STM32" scheme="https://ydw-item.github.io.git/categories/STM32/"/>
    
    
    <category term="STM32" scheme="https://ydw-item.github.io.git/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>W25Q128</title>
    <link href="https://ydw-item.github.io.git/2025/05/23/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E6%99%BA%E8%83%BD%E9%97%A8%E9%94%81/W25Q128/"/>
    <id>https://ydw-item.github.io.git/2025/05/23/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/%E6%99%BA%E8%83%BD%E9%97%A8%E9%94%81/W25Q128/</id>
    <published>2025-05-23T05:00:00.000Z</published>
    <updated>2025-05-23T05:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考资料</strong>：</p><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><h2 id="1-1-falsh结构"><a href="#1-1-falsh结构" class="headerlink" title="1.1 falsh结构"></a>1.1 falsh结构</h2><p><img src="/image-20250523131542101.png" alt="image-20250523131542101"></p><p><img src="/image-20250523130109301.png" alt="image-20250523130109301"></p><table><thead><tr><th align="center">名称</th><th align="center">名称</th><th align="center">大小</th></tr></thead><tbody><tr><td align="center">Page</td><td align="center">页</td><td align="center">256字节</td></tr><tr><td align="center">Sector</td><td align="center">扇区</td><td align="center">4 * 1024字节(4096)</td></tr><tr><td align="center">Block</td><td align="center">块</td><td align="center">16 * 4 * 1024 字节(65535)</td></tr></tbody></table><h2 id="1-2-最小操作单位"><a href="#1-2-最小操作单位" class="headerlink" title="1.2 最小操作单位"></a>1.2 最小操作单位</h2><p><strong>擦除最小单元</strong>：4KB（扇区）</p><p><strong>写入最小单元</strong>：256字节（页）</p><p><strong>读取最小单元</strong>：1字节</p><h1 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h1><h1 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;：&lt;/p&gt;
&lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;h2 id=&quot;1-1-falsh结构&quot;&gt;&lt;a href=&quot;#1-1-</summary>
      
    
    
    
    <category term="STM32" scheme="https://ydw-item.github.io.git/categories/STM32/"/>
    
    
    <category term="STM32" scheme="https://ydw-item.github.io.git/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>内部FLASH</title>
    <link href="https://ydw-item.github.io.git/2025/05/13/FLASH/"/>
    <id>https://ydw-item.github.io.git/2025/05/13/FLASH/</id>
    <published>2025-05-13T05:13:30.000Z</published>
    <updated>2025-05-13T05:13:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考资料</strong>：</p><p><a href="https://blog.csdn.net/ST_Liam/article/details/108922753">1.STM32系列芯片命名规则——简明_stm32命名规则-CSDN博客</a></p><h1 id="一、存储单位介绍"><a href="#一、存储单位介绍" class="headerlink" title="一、存储单位介绍"></a>一、存储单位介绍</h1><h1 id="1-1-内存单位换算"><a href="#1-1-内存单位换算" class="headerlink" title="1.1 内存单位换算"></a>1.1 内存单位换算</h1><table><thead><tr><th align="center">单位</th><th align="center">缩写</th><th align="center">大小关系</th></tr></thead><tbody><tr><td align="center">位</td><td align="center">Bit</td><td align="center">基本单位</td></tr><tr><td align="center">字节</td><td align="center">Byte</td><td align="center">1Byte &#x3D; 1024 Bit</td></tr><tr><td align="center">千字节</td><td align="center">KB</td><td align="center">1 KB &#x3D; 1024 Byte</td></tr><tr><td align="center">兆字节</td><td align="center">MB</td><td align="center">1 MB &#x3D; 1024 KB &#x3D; 1024 × 1024 B</td></tr><tr><td align="center">吉字节</td><td align="center">GB</td><td align="center">1 GB &#x3D; 1024 MB &#x3D; 1024 × 1024 × 1024 B</td></tr><tr><td align="center">太字节</td><td align="center">TB</td><td align="center">1 TB &#x3D; 1024 GB &#x3D; 1024 × 1024 × 1024 × 1024 B</td></tr><tr><td align="center">拍字节</td><td align="center">PB</td><td align="center">1 PB &#x3D; 1024 TB</td></tr></tbody></table><table><thead><tr><th align="center">单位</th><th align="center">缩写</th><th align="center">大小关系</th></tr></thead><tbody><tr><td align="center">字节</td><td align="center">Byte</td><td align="center">基本单位</td></tr><tr><td align="center">半字</td><td align="center">B</td><td align="center">2字节</td></tr><tr><td align="center">字</td><td align="center">KB</td><td align="center">4字节</td></tr></tbody></table><h1 id="1-2-内存布局"><a href="#1-2-内存布局" class="headerlink" title="1.2 内存布局"></a>1.2 内存布局</h1><style>.takkhshrttjq{}</style><img src="/2025/05/13/FLASH/image-20250513153603543-1747132152193-1.png" class="takkhshrttjq" alt="image-20250513153603543"><h1 id="二、内部FALSH介绍"><a href="#二、内部FALSH介绍" class="headerlink" title="二、内部FALSH介绍"></a>二、内部FALSH介绍</h1><h2 id="2-1-STM32内存分布"><a href="#2-1-STM32内存分布" class="headerlink" title="2.1 STM32内存分布"></a>2.1 STM32内存分布</h2><style>.mgsvlxucvqyn{}</style><img src="/2025/05/13/FLASH/image-20250513170648680-1747132152193-2.png" class="mgsvlxucvqyn" alt="image-20250513170648680"><h2 id="2-2-FALSH分布"><a href="#2-2-FALSH分布" class="headerlink" title="2.2 FALSH分布"></a>2.2 FALSH分布</h2><style>.hdsxuoprrqrc{}</style><img src="/2025/05/13/FLASH/image-20250513161524133-1747132152193-3.png" class="hdsxuoprrqrc" alt="image-20250513161524133"><h1 id="三、-函数调用"><a href="#三、-函数调用" class="headerlink" title="三、 函数调用"></a>三、 函数调用</h1><h2 id="2-1-写数据"><a href="#2-1-写数据" class="headerlink" title="2.1 写数据"></a>2.1 写数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_FLASH_Program</span><span class="params">(<span class="type">uint32_t</span> TypeProgram, <span class="type">uint32_t</span> Address, <span class="type">uint64_t</span> Data)</span>;</span><br><span class="line"></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_FLASH_Program_IT</span><span class="params">(<span class="type">uint32_t</span> TypeProgram, <span class="type">uint32_t</span> Address, <span class="type">uint64_t</span> Data)</span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>TypeProgram</strong>：指定编程模式（即写入的位宽）</p><ul><li><code>FLASH_TYPEPROGRAM_BYTE</code>：8 位写入</li><li><code>FLASH_TYPEPROGRAM_HALFWORD</code>:16 位写入</li><li><code>FLASH_TYPEPROGRAM_WORD</code>:32 位写入</li><li><code>FLASH_TYPEPROGRAM_DOUBLEWORD</code>:64 位写入</li></ul></li><li><p><strong>TypeProgram</strong>：要写入的 Flash 地址</p></li><li><p><strong>Data</strong>：要写入的数据</p></li></ul><h2 id="2-2-擦除数据"><a href="#2-2-擦除数据" class="headerlink" title="2.2 擦除数据"></a>2.2 擦除数据</h2><h3 id="2-2-1-擦除单个扇区"><a href="#2-2-1-擦除单个扇区" class="headerlink" title="2.2.1 擦除单个扇区"></a>2.2.1 擦除单个扇区</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">FLASH_Erase_Sector</span><span class="params">(<span class="type">uint32_t</span> Sector, <span class="type">uint8_t</span> VoltageRange)</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>Sector</strong>：要擦除的扇区编号</li><li><strong>VoltageRange</strong>：根据供电电压选择擦除时序<ul><li><code>FLASH_VOLTAGE_RANGE_3</code>：2.7V~3.6V</li><li><code>FLASH_VOLTAGE_RANGE_2</code>：2.1V~2.7V</li></ul></li></ul><h3 id="2-2-3-擦除多个扇区"><a href="#2-2-3-擦除多个扇区" class="headerlink" title="2.2.3 擦除多个扇区"></a>2.2.3 擦除多个扇区</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_FLASHEx_Erase</span><span class="params">(FLASH_EraseInitTypeDef *pEraseInit, <span class="type">uint32_t</span> *SectorError)</span>;</span><br><span class="line"></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_FLASHEx_Erase_IT</span><span class="params">(FLASH_EraseInitTypeDef *pEraseInit)</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>pEraseInit</strong>：<code>FLASH_EraseInitTypeDef</code>结构体的指针<ul><li>FLASH_EraseInitTypeDef<ul><li><code>TypeErase</code>：擦除类型（扇区擦除或块擦除）<ul><li><code>FLASH_TYPEERASE_SECTORS</code>：擦除扇区</li><li><code>FLASH_TYPEERASE_MASSERASE</code>：全片擦除</li></ul></li><li><code>Banks</code>：在双 Bank 架构的芯片（如 STM32F7&#x2F;H7）中选择操作的 Bank，单 Bank 芯片（如 F1&#x2F;F4）可忽略此参数<ul><li><code>FLASH_BANK_1</code>：操作 Bank 1</li><li><code>FLASH_BANK_2</code>：操作 Bank 2</li><li><code>FLASH_BANK_BOTH</code>：操作 Bank 12</li></ul></li><li><code>Sector</code>：指定擦除的起始扇区编号</li><li><code>NbSectors</code>：指定连续擦除的扇区数量，值必须 ≥ 1</li><li><code>VoltageRange</code>：电压范围（影响擦除时间）<ul><li><code>FLASH_VOLTAGE_RANGE_1</code>：1.8V 以下</li><li><code>FLASH_VOLTAGE_RANGE_2</code>：1.8V~2.1V</li><li><code>FLASH_VOLTAGE_RANGE_3</code>：2.1V~2.7V</li><li><code>FLASH_VOLTAGE_RANGE_4</code>：2.7V~3.6V</li></ul></li></ul></li></ul></li><li><strong>SectorError</strong>：记录擦除失败的扇区号</li></ul><h2 id="2-3-FALSH开关锁"><a href="#2-3-FALSH开关锁" class="headerlink" title="2.3 FALSH开关锁"></a>2.3 FALSH开关锁</h2><p><strong>擦写数据之前要进行开关锁操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_FLASH_Unlock</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//开锁，可以擦写</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_FLASH_Lock</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//关锁，不可以擦写</span></span><br></pre></td></tr></table></figure><h2 id="2-4-回调函数"><a href="#2-4-回调函数" class="headerlink" title="2.4 回调函数"></a>2.4 回调函数</h2><h3 id="2-4-1-擦写成功回调函数"><a href="#2-4-1-擦写成功回调函数" class="headerlink" title="2.4.1 擦写成功回调函数"></a>2.4.1 擦写成功回调函数</h3><p><strong>Flash 编程或擦除操作成功完成时</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_FLASH_EndOfOperationCallback</span><span class="params">(<span class="type">uint32_t</span> ReturnValue)</span>;</span><br></pre></td></tr></table></figure><ul><li><code>0xFFFFFFFF</code>：表示操作成功</li><li><code>其它值</code>：失败时的错误地址</li></ul><h3 id="2-4-2-擦写失败回调函数"><a href="#2-4-2-擦写失败回调函数" class="headerlink" title="2.4.2 擦写失败回调函数"></a>2.4.2 擦写失败回调函数</h3><p><strong>Flash 操作（擦除或编程）发生硬件错误时</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_FLASH_OperationErrorCallback</span><span class="params">(<span class="type">uint32_t</span> ReturnValue)</span>;</span><br></pre></td></tr></table></figure><ul><li><code>ReturnValue</code>：出错时的 Flash 地址或错误标志</li><li><code>具体地址</code>：说明该地址的操作失败</li><li><code>0xFFFFFFFF</code>：表示错误与特定地址无关（如全局错误）</li></ul><h2 id="2-5-选项字节开关锁"><a href="#2-5-选项字节开关锁" class="headerlink" title="2.5 选项字节开关锁"></a>2.5 选项字节开关锁</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_FLASH_OB_Unlock</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_FLASH_OB_Lock</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="2-6-编程（修改）选项字节"><a href="#2-6-编程（修改）选项字节" class="headerlink" title="2.6 编程（修改）选项字节"></a>2.6 编程（修改）选项字节</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_FLASHEx_OBProgram</span><span class="params">(FLASH_OBProgramInitTypeDef *pOBInit)</span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>OptionType</strong>：指定要修改的选项类型（可组合）</p><ul><li><code>OPTIONBYTE_WRP</code>：写保护</li><li><code>OPTIONBYTE_RDP</code>：保护</li><li><code>OPTIONBYTE_USER</code>：用户配置</li><li><code>OPTIONBYTE_BOR</code>：电压跌落复位</li></ul></li><li><p><strong>WRPState</strong>：写保护状态</p><ul><li><code>OB_WRPSTATE_DISABLE</code>：禁用保护</li><li><code>OB_WRPSTATE_ENABLE</code>：启用保护</li></ul></li><li><p><strong>WRPSector</strong>：写保护扇区</p></li><li><p><strong>Banks</strong>：在双 Bank 架构的芯片（如 STM32F7&#x2F;H7）中选择操作的 Bank，单 Bank 芯片（如 F1&#x2F;F4）可忽略此参数</p><ul><li><code>FLASH_BANK_1</code>：操作 Bank 1</li><li><code>FLASH_BANK_2</code>：操作 Bank 2</li><li><code>FLASH_BANK_BOTH</code>：操作 Bank 12</li></ul></li><li><p><strong>RDPLevel</strong>：读保护级别</p><ul><li><code>OB_RDP_LEVEL_0</code>：无保护</li><li><code>OB_RDP_LEVEL_1</code>：启用保护</li><li><code>OB_RDP_LEVEL_2</code>：永久保护（不可逆！）</li></ul></li><li><p><strong>BORLevel</strong>：电压跌落复位阈值</p></li><li><p><strong>USERConfig</strong>：用户配置</p></li></ul><h2 id="2-7-应用已修改的选项字节"><a href="#2-7-应用已修改的选项字节" class="headerlink" title="2.7 应用已修改的选项字节"></a>2.7 应用已修改的选项字节</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_FLASH_OB_Launch</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-8-获取当前的选项字节配置"><a href="#2-8-获取当前的选项字节配置" class="headerlink" title="2.8 获取当前的选项字节配置"></a>2.8 获取当前的选项字节配置</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit);</span><br></pre></td></tr></table></figure><h2 id="2-9-等待一个-Flash-操作"><a href="#2-9-等待一个-Flash-操作" class="headerlink" title="2.9 等待一个 Flash 操作"></a>2.9 等待一个 Flash 操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">FLASH_WaitForLastOperation</span><span class="params">(<span class="type">uint32_t</span> Timeout)</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/ST_Liam/article/details/108922753&quot;&gt;1.STM32系列芯片命名规则——简明_stm32命名规则-CSDN博客&lt;/a&gt;&lt;</summary>
      
    
    
    
    <category term="外设" scheme="https://ydw-item.github.io.git/categories/%E5%A4%96%E8%AE%BE/"/>
    
    
    <category term="STM32" scheme="https://ydw-item.github.io.git/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>MCU_OneNet_APP的MQTT通信</title>
    <link href="https://ydw-item.github.io.git/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MCU_OneNet_APP%E7%9A%84MQTT%E9%80%9A%E4%BF%A1/"/>
    <id>https://ydw-item.github.io.git/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MCU_OneNet_APP%E7%9A%84MQTT%E9%80%9A%E4%BF%A1/</id>
    <published>2025-05-13T05:13:30.000Z</published>
    <updated>2025-05-13T05:13:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>1.ESP-01S 产品规格书.pdf</p><p>2.ESP8266系列入门教程.pdf</p><p>3.ESP8266系列模组用户手册v1.5.pdf</p><p>4.ESP8266 Non-OS SDK AT 指令集_V3.0.1.pdf</p><p>5.<a href="https://blog.csdn.net/2402_84707567/article/details/146552136?ops_request_misc=&request_id=&biz_id=102&utm_term=esp01%E7%83%A7%E5%BD%95at%E5%9B%BA%E4%BB%B6mqtt&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-146552136.142%5Ev102%5Epc_search_result_base5&spm=1018.2226.3001.4187">ESP8266-01固件烧录（以MQTT透传AT固件为例）_esp8266烧录mqtt-CSDN博客</a></p><p>6.<a href="https://open.iot.10086.cn/doc/v5/fuse/detail/new_platform">OneNET - 中国移动物联网开放平台文档</a></p><p>7.<a href="https://espressif-docs.readthedocs-hosted.com/projects/esp-at/zh-cn/release-v2.2.0.0_esp8266/AT_Command_Set/MQTT_AT_Commands.html">MQTT AT Commands — ESP-AT 用户指南 文档</a></p><h1 id="一、ESP8266—01介绍"><a href="#一、ESP8266—01介绍" class="headerlink" title="一、ESP8266—01介绍"></a>一、ESP8266—01介绍</h1><h2 id="1-1-引脚图"><a href="#1-1-引脚图" class="headerlink" title="1.1 引脚图"></a>1.1 引脚图</h2><style>.fhccqthiriro{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MCU_OneNet_APP%E7%9A%84MQTT%E9%80%9A%E4%BF%A1/image-20250514200710441.png" class="fhccqthiriro" alt="image-20250514200710441"><h3 id="1-1-1-烧录模式"><a href="#1-1-1-烧录模式" class="headerlink" title="1.1.1 烧录模式"></a>1.1.1 烧录模式</h3><table><thead><tr><th align="center">引脚</th><th align="center">电平</th></tr></thead><tbody><tr><td align="center">RST</td><td align="center">高</td></tr><tr><td align="center">EN</td><td align="center">高</td></tr><tr><td align="center">GPIO0</td><td align="center">GND</td></tr></tbody></table><h3 id="1-1-2-运行模式"><a href="#1-1-2-运行模式" class="headerlink" title="1.1.2 运行模式"></a>1.1.2 运行模式</h3><table><thead><tr><th align="center">引脚</th><th align="center">电平</th></tr></thead><tbody><tr><td align="center">RST</td><td align="center">高</td></tr><tr><td align="center">EN</td><td align="center">高</td></tr><tr><td align="center">GPIO0</td><td align="center">悬空</td></tr></tbody></table><p>串口发送AT\r\n 返回OK，即为正常</p><style>.iisnfnbvzkae{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MCU_OneNet_APP%E7%9A%84MQTT%E9%80%9A%E4%BF%A1/QQ_1747548700265.png" class="iisnfnbvzkae" alt="QQ_1747548700265"><h1 id="二、OneNET平台搭建"><a href="#二、OneNET平台搭建" class="headerlink" title="二、OneNET平台搭建"></a>二、OneNET平台搭建</h1><h1 id="三、MQTTX连接测试"><a href="#三、MQTTX连接测试" class="headerlink" title="三、MQTTX连接测试"></a>三、MQTTX连接测试</h1><h2 id="3-1-MQTTX连接"><a href="#3-1-MQTTX连接" class="headerlink" title="3.1 MQTTX连接"></a>3.1 MQTTX连接</h2><h3 id="3-1-1-OneNET-token计算工具"><a href="#3-1-1-OneNET-token计算工具" class="headerlink" title="3.1.1 OneNET-token计算工具"></a>3.1.1 OneNET-token计算工具</h3><p><a href="https://tool.lu/timestamp/">时间戳(Unix timestamp)转换工具 - 在线工具</a></p><style>.icxqpfrxekpv{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MCU_OneNet_APP%E7%9A%84MQTT%E9%80%9A%E4%BF%A1/image-20250518123212839.png" class="icxqpfrxekpv" alt="image-20250518123212839"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 格式 */</span></span><br><span class="line">res：products/&#123;产品id&#125;/devices/&#123;设备名字&#125;</span><br><span class="line">et：时间戳工具生成</span><br><span class="line">key：设备密钥</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 示例 */</span></span><br><span class="line">res：products/<span class="number">06l</span>wQZVUlf/devices/STM32_DoorLock </span><br><span class="line">et：<span class="number">1810613661</span></span><br><span class="line">key：RWtVYzNibGlQblpoNlE4V25PdGV4OFdtMkxGSmVWcTE=</span><br></pre></td></tr></table></figure><h3 id="3-1-2-连接OneNET"><a href="#3-1-2-连接OneNET" class="headerlink" title="3.1.2 连接OneNET"></a>3.1.2 连接OneNET</h3><style>.aoegxgqiwetr{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MCU_OneNet_APP%E7%9A%84MQTT%E9%80%9A%E4%BF%A1/QQ_1747541919631.png" class="aoegxgqiwetr" alt="QQ_1747541919631"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 格式 */</span></span><br><span class="line">服务器域名：mqtts.heclouds.com</span><br><span class="line">服务器端口：<span class="number">1883</span></span><br><span class="line">ClientID：设备ID</span><br><span class="line">Username：产品ID</span><br><span class="line">Password：token加密的设备密钥</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 示例 */</span></span><br><span class="line">服务器域名：mqtts.heclouds.com</span><br><span class="line">服务器端口：<span class="number">1883</span></span><br><span class="line">ClientID：STM32_DoorLock</span><br><span class="line">Username：<span class="number">06l</span>wQZVUlf</span><br><span class="line">Password：version=version=<span class="number">2018</span><span class="number">-10</span><span class="number">-31</span>&amp;res=products%<span class="number">2F</span>06lwQZVUlf%<span class="number">2F</span>devices%<span class="number">2F</span>STM32_DoorLock&amp;et=<span class="number">1810613661</span>&amp;method=md5&amp;sign=ZC1dWD4iirJ6B04pLhvNzQ%<span class="number">3</span>D%<span class="number">3</span>D</span><br></pre></td></tr></table></figure><h3 id="3-1-3-订阅主题"><a href="#3-1-3-订阅主题" class="headerlink" title="3.1.3 订阅主题"></a>3.1.3 订阅主题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 格式 */</span></span><br><span class="line">订阅全部物模型相关主题：$sys/&#123;pid&#125;/&#123;device-name&#125;/thing/#</span><br><span class="line">订阅物模型属性类相关主题：$sys/&#123;pid&#125;/&#123;device-name&#125;/thing/property/#</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 示例 */</span></span><br><span class="line">订阅主题：$sys/<span class="number">06l</span>wQZVUlf/STM32_DoorLock/thing/#</span><br></pre></td></tr></table></figure><h3 id="3-1-4-OneNET模拟数据下发"><a href="#3-1-4-OneNET模拟数据下发" class="headerlink" title="3.1.4 OneNET模拟数据下发"></a>3.1.4 OneNET模拟数据下发</h3><style>.amiwzguqnred{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MCU_OneNet_APP%E7%9A%84MQTT%E9%80%9A%E4%BF%A1/QQ_1747543992750.png" class="amiwzguqnred" alt="QQ_1747543992750"><h3 id="3-1-5-发布消息"><a href="#3-1-5-发布消息" class="headerlink" title="3.1.5 发布消息"></a>3.1.5 发布消息</h3><style>.xrhwdfytdorv{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MCU_OneNet_APP%E7%9A%84MQTT%E9%80%9A%E4%BF%A1/QQ_1747544964361.png" class="xrhwdfytdorv" alt="QQ_1747544964361"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 格式 */</span></span><br><span class="line">发布主题：$sys/&#123;pid&#125;/&#123;device-name&#125;/thing/property/post</span><br><span class="line">主题消息：</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line"><span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;lock&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;value&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;password&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;value&quot;</span>: <span class="number">123456</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 示例 */</span></span><br><span class="line">发布主题：$sys/<span class="number">06l</span>wQZVUlf/STM32_DoorLock/thing/property/post</span><br><span class="line">主题消息：</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;123&quot;</span>,<span class="string">&quot;version&quot;</span>:<span class="string">&quot;1.0&quot;</span>,<span class="string">&quot;params&quot;</span>:&#123;<span class="string">&quot;lock&quot;</span>:&#123;<span class="string">&quot;value&quot;</span>:<span class="literal">true</span>&#125;,<span class="string">&quot;password&quot;</span>:&#123;<span class="string">&quot;value&quot;</span>: <span class="number">123456</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="四、-串口助手连接测试"><a href="#四、-串口助手连接测试" class="headerlink" title="四、 串口助手连接测试"></a>四、 串口助手连接测试</h1><h2 id="4-0-常用AT指令"><a href="#4-0-常用AT指令" class="headerlink" title="4.0 常用AT指令"></a>4.0 常用AT指令</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">固件测试：AT</span><br><span class="line">查询版本信息：AT+GMR</span><br><span class="line">联网测试：AT+PING=<span class="string">&quot;www.baidu.com&quot;</span></span><br></pre></td></tr></table></figure><h2 id="4-1-MQTT固件"><a href="#4-1-MQTT固件" class="headerlink" title="4.1 MQTT固件"></a>4.1 MQTT固件</h2><h3 id="4-1-1-连接OneNET"><a href="#4-1-1-连接OneNET" class="headerlink" title="4.1.1 连接OneNET"></a>4.1.1 连接OneNET</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 格式 */</span></span><br><span class="line">复位：AT+RST</span><br><span class="line">开启DHCP：AT+CWDHCP=<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">设置为station模式：AT+CWMODE=<span class="number">1</span></span><br><span class="line">连接WIFI：AT+CWJAP=<span class="string">&quot;WIFI&quot;</span>,<span class="string">&quot;密码&quot;</span><span class="comment">//2.4GHZ</span></span><br><span class="line">配置用户信息：AT+MQTTUSERCFG=&lt;LinkID&gt;,&lt;scheme&gt;,&lt;<span class="string">&quot;client_id设备ID&quot;</span>&gt;,&lt;<span class="string">&quot;username产品ID&quot;</span>&gt;,&lt;<span class="string">&quot;password&quot;</span>&gt;,&lt;cert_key_ID&gt;,&lt;CA_ID&gt;,&lt;<span class="string">&quot;path&quot;</span>&gt;</span><br><span class="line">连接MQTT：AT+MQTTCONN=<span class="number">0</span>,<span class="string">&quot;IP&quot;</span>,端口,<span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 举例 */</span></span><br><span class="line">复位：AT+RST</span><br><span class="line">开启DHCP：AT+CWDHCP=<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">设置为station模式：AT+CWMODE=<span class="number">1</span></span><br><span class="line">连接WIFI：AT+CWJAP=<span class="string">&quot;KCT&quot;</span>,<span class="string">&quot;12345678&quot;</span></span><br><span class="line">配置用户信息：AT+MQTTUSERCFG=<span class="number">0</span>,<span class="number">1</span>,<span class="string">&quot;STM32_DoorLock&quot;</span>,<span class="string">&quot;06lwQZVUlf&quot;</span>,<span class="string">&quot;version=2018-10-31&amp;res=products%2F06lwQZVUlf%2Fdevices%2FSTM32_DoorLock&amp;et=1810613661&amp;method=md5&amp;sign=ZC1dWD4iirJ6B04pLhvNzQ%3D%3D&quot;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;&quot;</span></span><br><span class="line">连接MQTT：连接MQTT：AT+MQTTCONN=<span class="number">0</span>,<span class="string">&quot;mqtts.heclouds.com&quot;</span>,<span class="number">1883</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="4-1-2-订阅消息"><a href="#4-1-2-订阅消息" class="headerlink" title="4.1.2 订阅消息"></a>4.1.2 订阅消息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 格式 */</span></span><br><span class="line">订阅主题：AT+MQTTSUB=&lt;LinkID&gt;,&lt;<span class="string">&quot;topic&quot;</span>&gt;,&lt;qos&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* 举例 */</span></span><br><span class="line">订阅主题：AT+MQTTSUB=<span class="number">0</span>,<span class="string">&quot;$sys/06lwQZVUlf/STM32_DoorLock/thing/#&quot;</span>,<span class="number">1</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><style>.ddujtuhcdeiw{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MCU_OneNet_APP%E7%9A%84MQTT%E9%80%9A%E4%BF%A1/QQ_1747554703700.png" class="ddujtuhcdeiw" alt="QQ_1747554703700"><h3 id="4-1-3-发布消息"><a href="#4-1-3-发布消息" class="headerlink" title="4.1.3 发布消息"></a>4.1.3 发布消息</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 格式 */</span></span><br><span class="line">发送字符串消息：AT+MQTTPUB=&lt;LinkID&gt;,&lt;<span class="string">&quot;topic&quot;</span>&gt;,&lt;<span class="string">&quot;data&quot;</span>&gt;,&lt;qos&gt;,&lt;retain&gt;</span><br><span class="line">发布消息(二进制)：AT+MQTTPUBRAW=&lt;LinkID&gt;,&lt;<span class="string">&quot;topic&quot;</span>&gt;,&lt;length&gt;,&lt;qos&gt;,&lt;retain&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 举例 */</span></span><br><span class="line">发送字符串消息：</span><br><span class="line"><span class="comment">/* 发送密码 */</span></span><br><span class="line">AT+MQTTPUB=<span class="number">0</span>,<span class="string">&quot;$sys/06lwQZVUlf/STM32_DoorLock/thing/property/post&quot;</span>,<span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;123\&quot;\,\&quot;params\&quot;:&#123;\&quot;password\&quot;:&#123;\&quot;value\&quot;:456789&#125;&#125;&#125;&quot;</span>,<span class="number">1</span>,<span class="number">0</span></span><br><span class="line"><span class="comment">/* 发送开关 */</span></span><br><span class="line">AT+MQTTPUB=<span class="number">0</span>,<span class="string">&quot;$sys/06lwQZVUlf/STM32_DoorLock/thing/property/post&quot;</span>,<span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;123\&quot;\,\&quot;params\&quot;:&#123;\&quot;lock\&quot;:&#123;\&quot;value\&quot;:false&#125;&#125;&#125;&quot;</span>,<span class="number">1</span>,<span class="number">0</span></span><br><span class="line"><span class="comment">/* 发送密码和开关 */</span> </span><br><span class="line">AT+MQTTPUB=<span class="number">0</span>,<span class="string">&quot;$sys/06lwQZVUlf/STM32_DoorLock/thing/property/post&quot;</span>,<span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;123\&quot;\,\&quot;params\&quot;:&#123;\&quot;password\&quot;:&#123;\&quot;value\&quot;:456789&#125;\,\&quot;lock\&quot;:&#123;\&quot;value\&quot;:false&#125;&#125;&#125;&quot;</span>,<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><style>.foormlbxyeeh{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MCU_OneNet_APP%E7%9A%84MQTT%E9%80%9A%E4%BF%A1/image-20250518164145819.png" class="foormlbxyeeh" alt="image-20250518164145819"><h2 id="4-2-AT固件"><a href="#4-2-AT固件" class="headerlink" title="4.2 AT固件"></a>4.2 AT固件</h2><h1 id="五、MCU连接测试"><a href="#五、MCU连接测试" class="headerlink" title="五、MCU连接测试"></a>五、MCU连接测试</h1><h2 id="5-1-MQTT固件"><a href="#5-1-MQTT固件" class="headerlink" title="5.1 MQTT固件"></a>5.1 MQTT固件</h2><h2 id="5-3-AT固件"><a href="#5-3-AT固件" class="headerlink" title="5. 3 AT固件"></a>5. 3 AT固件</h2><h1 id="六、微信小程序连接测试"><a href="#六、微信小程序连接测试" class="headerlink" title="六、微信小程序连接测试"></a>六、微信小程序连接测试</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;1.ESP-01S 产品规格书.pdf&lt;/p&gt;
&lt;p&gt;2.ESP8266系列入门教程.pdf&lt;/p&gt;
&lt;p&gt;3.ESP826</summary>
      
    
    
    
    <category term="物联网" scheme="https://ydw-item.github.io.git/categories/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="AT" scheme="https://ydw-item.github.io.git/categories/%E7%89%A9%E8%81%94%E7%BD%91/AT/"/>
    
    <category term="ESP8266" scheme="https://ydw-item.github.io.git/categories/%E7%89%A9%E8%81%94%E7%BD%91/AT/ESP8266/"/>
    
    
    <category term="STM32" scheme="https://ydw-item.github.io.git/tags/STM32/"/>
    
    <category term="通信协议" scheme="https://ydw-item.github.io.git/tags/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>MQTT通信实验</title>
    <link href="https://ydw-item.github.io.git/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MQTT%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C/"/>
    <id>https://ydw-item.github.io.git/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MQTT%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C/</id>
    <published>2025-05-13T05:13:30.000Z</published>
    <updated>2025-05-13T05:13:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://mqtt.p2hp.com/">1.首页 | MQTT中文网</a></p><p>2.MQTT-3.1.1标准协议文档.pdf</p><h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><h2 id="1-1-EMQX"><a href="#1-1-EMQX" class="headerlink" title="1.1 EMQX"></a>1.1 EMQX</h2><h3 id="1-1-1-启动emqx服务器"><a href="#1-1-1-启动emqx服务器" class="headerlink" title="1.1.1 启动emqx服务器"></a>1.1.1 启动emqx服务器</h3><style>.xdwwjycjrjfc{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MQTT%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C/1.png" class="xdwwjycjrjfc" alt="image-20250514154503630"><h3 id="1-1-2-进入EMQX网址"><a href="#1-1-2-进入EMQX网址" class="headerlink" title="1.1.2 进入EMQX网址"></a>1.1.2 进入EMQX网址</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1:18083/</span></span><br></pre></td></tr></table></figure><ul><li>默认用户名：<code>admin</code></li><li>默认密码    ：<code>public</code></li></ul><p>已修改为</p><ul><li>账号：<code>admin</code></li><li>密码：<code>DWen_666</code></li></ul><h3 id="1-1-2-用户端认证"><a href="#1-1-2-用户端认证" class="headerlink" title="1.1.2 用户端认证"></a>1.1.2 用户端认证</h3><p>- </p><style>.wyhluxutjkkk{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MQTT%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C/2.png" class="wyhluxutjkkk" alt="QQ_1747209189624"><p>- </p><pre><code>&lt;style&gt;.vfyhcwzvcjev&#123;&#125;&lt;/style&gt;&#123;% asset_img vfyhcwzvcjev QQ_1747209297266.png '"""QQ_1747209297266"' %&#125;</code></pre><p>- </p><style>.etmcvipnyadv{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MQTT%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C/image-20250514155638677.png" class="etmcvipnyadv" alt="image-20250514155638677"><h3 id="1-1-3-创建两个用户"><a href="#1-1-3-创建两个用户" class="headerlink" title="1.1.3 创建两个用户"></a>1.1.3 创建两个用户</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户1</span></span><br><span class="line">ClientID:USER001</span><br><span class="line">用户名:USER001</span><br><span class="line">密码:USER001</span><br><span class="line">Topic:USER001</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户2</span></span><br><span class="line">ClientID:USER002</span><br><span class="line">用户名:USER002</span><br><span class="line">密码:USER002</span><br><span class="line">Topic:USER002</span><br></pre></td></tr></table></figure><p>​</p><h2 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h2><h1 id="二、-MQTT协议报文总览"><a href="#二、-MQTT协议报文总览" class="headerlink" title="二、 MQTT协议报文总览"></a>二、 MQTT协议报文总览</h1><p>MQTT-3.1.1标准协议</p><style>.ultzfrosheoj{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MQTT%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C/image-20250514181937256.png" class="ultzfrosheoj" alt="image-20250514181937256"><h2 id="2-1-剩余长度"><a href="#2-1-剩余长度" class="headerlink" title="2.1 剩余长度"></a>2.1 剩余长度</h2><ul><li><p>剩余长度 &#x3D; 可变报头的长度 + 有效荷载的长度</p></li><li><p>剩余长度字段为 1-4个字节</p>  <style>.cpngguggopbl{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MQTT%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C/image-20250514185312204.png" class="cpngguggopbl" alt="image-20250514185312204"></li></ul><h3 id="3-1-1-100举例"><a href="#3-1-1-100举例" class="headerlink" title="3.1.1 100举例"></a>3.1.1 100举例</h3><style>.lwdedygwyvby{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MQTT%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C/image-20250514185616226.png" class="lwdedygwyvby" alt="image-20250514185616226"><h3 id="3-1-2-2000举例"><a href="#3-1-2-2000举例" class="headerlink" title="3.1.2 2000举例"></a>3.1.2 2000举例</h3><style>.wrijjddbuiev{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MQTT%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C/image-20250514185701630.png" class="wrijjddbuiev" alt="image-20250514185701630"><h3 id="3-1-3-50000举例"><a href="#3-1-3-50000举例" class="headerlink" title="3.1.3 50000举例"></a>3.1.3 50000举例</h3><style>.wopnrknayxgh{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MQTT%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C/image-20250514185746492.png" class="wopnrknayxgh" alt="image-20250514185746492"><h1 id="三、编写报文"><a href="#三、编写报文" class="headerlink" title="三、编写报文"></a>三、编写报文</h1><h2 id="3-1-CONNECT-连接服务端"><a href="#3-1-CONNECT-连接服务端" class="headerlink" title="3.1 CONNECT-连接服务端"></a>3.1 CONNECT-连接服务端</h2><h2 id="3-2-CONNACK-确认连接请求"><a href="#3-2-CONNACK-确认连接请求" class="headerlink" title="3.2 CONNACK-确认连接请求"></a>3.2 CONNACK-确认连接请求</h2><h2 id="3-8-SUBSCRIBE-订阅主题"><a href="#3-8-SUBSCRIBE-订阅主题" class="headerlink" title="3.8 SUBSCRIBE-订阅主题"></a>3.8 SUBSCRIBE-订阅主题</h2><h2 id="3-9-SUBACK-订阅确定"><a href="#3-9-SUBACK-订阅确定" class="headerlink" title="3.9 SUBACK-订阅确定"></a>3.9 SUBACK-订阅确定</h2><h2 id="3-10-UNSUBSCRIBE-取消订阅"><a href="#3-10-UNSUBSCRIBE-取消订阅" class="headerlink" title="3.10 UNSUBSCRIBE-取消订阅"></a>3.10 UNSUBSCRIBE-取消订阅</h2><h2 id="3-11-SUBACK-取消订阅确定"><a href="#3-11-SUBACK-取消订阅确定" class="headerlink" title="3.11 SUBACK-取消订阅确定"></a>3.11 SUBACK-取消订阅确定</h2><h2 id="3-12-PINGREQ-心跳请求"><a href="#3-12-PINGREQ-心跳请求" class="headerlink" title="3.12 PINGREQ-心跳请求"></a>3.12 PINGREQ-心跳请求</h2><p>连接保活</p><style>.bxvzvnjetqoj{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MQTT%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C/image-20250725130312204.png" class="bxvzvnjetqoj" alt="image-20250725130312204"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C0 00</span><br></pre></td></tr></table></figure><h2 id="3-13-PINGRESP-心跳响应"><a href="#3-13-PINGRESP-心跳响应" class="headerlink" title="3.13 PINGRESP-心跳响应"></a>3.13 PINGRESP-心跳响应</h2><style>.yjsxthpxxdtm{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MQTT%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C/image-20250725130442950.png" class="yjsxthpxxdtm" alt="image-20250725130442950"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D0 00</span><br></pre></td></tr></table></figure><h2 id="3-14-断开连接-P46"><a href="#3-14-断开连接-P46" class="headerlink" title="3.14 断开连接(P46)"></a>3.14 断开连接(P46)</h2><style>.bweihfbgwsox{}</style><img src="/2025/05/13/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/MQTT%E9%80%9A%E4%BF%A1%E5%AE%9E%E9%AA%8C/image-20250725130026095.png" class="bweihfbgwsox" alt="image-20250725130026095"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E0 00</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://mqtt.p2hp.com/&quot;&gt;1.首页 | MQTT中文网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.M</summary>
      
    
    
    
    <category term="物联网" scheme="https://ydw-item.github.io.git/categories/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    
    <category term="STM32" scheme="https://ydw-item.github.io.git/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>SPI通信协议</title>
    <link href="https://ydw-item.github.io.git/2025/05/11/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/SPI/"/>
    <id>https://ydw-item.github.io.git/2025/05/11/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/SPI/</id>
    <published>2025-05-11T15:58:30.000Z</published>
    <updated>2025-05-11T15:58:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考资料</strong>：</p><p><a href="https://blog.csdn.net/chenyuanlidejiyi/article/details/121639160">笔记之STM32F0芯片S0PI_DMA的使用（HAL库）_stm32 spi dma-CSDN博客</a></p><h1 id="一、SPI简介"><a href="#一、SPI简介" class="headerlink" title="一、SPI简介"></a>一、SPI简介</h1><p><strong>SPI</strong>英文全称Serial Peripheral Interface，即串行外围设备接口，是一种高速、<strong>全双工</strong>、<strong>同步</strong>的<strong>串行</strong>通信总线。</p><h1 id="二、-信号线"><a href="#二、-信号线" class="headerlink" title="二、 信号线"></a>二、 信号线</h1><ul><li><strong>SCK</strong>（Serial Clock）：串行<strong>时钟线</strong>，由主设备产生，用于同步数据传输。</li><li><strong>MOSI</strong>（Master Output Slave Input）：<strong>主机输出</strong>从机输入线，主设备通过这条线发送数据给从设备。</li><li><strong>MISO</strong>（Master Input Slave Output）：<strong>主机输入</strong>从机输出线，主设备通过这条线接收从设备发送的数据。</li><li><strong>CS</strong>（Slave Select）(NSS或SS)：<strong>从机选择线</strong>（每个从机一根选择线），用于选择与主设备进行通信的从设备。通常情况下，SS线为<strong>低电平有效</strong>，即当<strong>SS</strong>线为<strong>低电平</strong>时，<strong>选中对应的从设备进行通信</strong>。</li></ul><p><img src="/5.png" alt="image-20250511102329794"></p><h1 id="三、-开始与结束"><a href="#三、-开始与结束" class="headerlink" title="三、 开始与结束"></a>三、 开始与结束</h1><p>当SS从高电平拉低到<strong>低电平</strong>，这个算是<strong>起始</strong>的一个时序。而SS从低电平拉高到<strong>高电平</strong>，就算是结束的时序。</p><p><img src="/1.png" alt="img"></p><h2 id="1-4-发送和接收字节"><a href="#1-4-发送和接收字节" class="headerlink" title="1.4 发送和接收字节"></a>1.4 发送和接收字节</h2><p>发送接收字节看似是两个时序，但是在SPI中却是<strong>同一个时序</strong>，因为SPI的机制是&#x3D;&#x3D;我们发送一个字节，并且接收一个字节&#x3D;&#x3D;（<strong>哪怕我们并不需要接收数据</strong>）。反过来看也可以是我们接收一个字节，并且发送一个字节（<strong>哪怕这个字节是无用的数据</strong>）。</p><p><img src="/6.png" alt="image-20250511102607470"></p><ul><li>来一个时钟<strong>上升沿</strong>信号，主机和从机分别把自己<strong>高位</strong>的值左移出来(<strong>一般高位先行</strong>)</li><li>来一个时钟<strong>下降沿</strong>信号，主机和从机分别<strong>读入</strong>数据，存储到移位寄存器的低位</li></ul><p><img src="/2.png" alt="img"></p><h2 id="交换bit"><a href="#交换bit" class="headerlink" title="交换bit"></a>交换bit</h2><p><img src="/3.png" alt="img"></p><p><strong>在SCK上升沿的时候，移出MOSI的数据，在SCK下降沿的时候读取MISO的数据。</strong></p><p><strong>需要在SCK上升沿之前把需要发送的数据位放置在MOSI线上</strong></p><p><strong>SCK下降沿的时候马上读取MISO线上的数据位</strong></p><p><strong>（实际上下降沿和读取应该是同时的，但是我们软件模拟没法同时，但是效果是一样的）</strong></p><h2 id="1-6-不同模式下的通信"><a href="#1-6-不同模式下的通信" class="headerlink" title="1.6 不同模式下的通信"></a>1.6 不同模式下的通信</h2><p><img src="/9.png" alt="image-20250305141745720"></p><p><img src="/10.png" alt="image-20250305141814533"></p><p><img src="/8.png" alt="image-20250305141718015"></p><p><img src="/7.png" alt="image-20250305141639698"></p><p><img src="/11.png" alt="image-20250305141859718"></p><p><img src="/12.png" alt="image-20250305142011451"></p><p><img src="/12.OV-Watch_LCD/13.png" alt="image-20250305142031698"></p><h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><h2 id="时钟的极性和相位"><a href="#时钟的极性和相位" class="headerlink" title="时钟的极性和相位"></a>时钟的极性和相位</h2><h3 id="1-时钟的极性-CPOL"><a href="#1-时钟的极性-CPOL" class="headerlink" title="1.时钟的极性(CPOL)"></a>1.时钟的极性(CPOL)</h3><p>什么时候读数据(数据采集)和设置的<strong>时钟和相位</strong>有关</p><p>通信的整个过程分为空闲时刻和通信时刻</p><p>模式1：SCK上升沿的时候，移出MOSI的数据，在SCK下降沿的时候读取MISO数据</p><ul><li>空闲状态SCLK是低电平，CPOL&#x3D;0</li></ul><p><img src="/image-20250511103646951.png" alt="image-20250511103646951"></p><ul><li>空闲状态SCLK是高电平，CPOL&#x3D;1</li></ul><p><img src="/image-20250511103726353.png" alt="image-20250511103726353"></p><h3 id="2-时钟的相位-CPHA"><a href="#2-时钟的相位-CPHA" class="headerlink" title="2.时钟的相位(CPHA)"></a>2.时钟的相位(CPHA)</h3><p>直接决定SPI总线从那个跳变沿开始采样数据</p><ul><li>CPHA&#x3D;0：表示从第一个跳变沿开始采样</li></ul><p><img src="/image-20250511104059236.png" alt="image-20250511104059236"></p><ul><li>CPHA&#x3D;1：表示从第二个跳变沿开始采样</li></ul><p><img src="/image-20250511104044786.png" alt="image-20250511104044786"></p><h3 id="3-SPI的4种模式"><a href="#3-SPI的4种模式" class="headerlink" title="3.SPI的4种模式"></a>3.SPI的4种模式</h3><p>时钟的两种极性和2种相位的不同组合，得到了SPI的4种工作模式</p><p><img src="/image-20250511104312629.png" alt="image-20250511104312629"></p><h4 id="3-1-模式0和模式2"><a href="#3-1-模式0和模式2" class="headerlink" title="3.1 模式0和模式2"></a>3.1 模式0和模式2</h4><p><img src="/image-20250511104947143.png" alt="image-20250511104947143"></p><h4 id="3-2-模式1和模式3"><a href="#3-2-模式1和模式3" class="headerlink" title="3.2 模式1和模式3"></a>3.2 模式1和模式3</h4><p><img src="/image-20250511104902672.png" alt="image-20250511104902672"></p><h1 id="三、硬件SPI"><a href="#三、硬件SPI" class="headerlink" title="三、硬件SPI"></a>三、硬件SPI</h1><p><img src="/image-20250512125536962.png" alt="image-20250512125536962"></p><h2 id="3-1-初始化"><a href="#3-1-初始化" class="headerlink" title="3.1 初始化"></a>3.1 初始化</h2><h3 id="3-1-1-SPI-HandleTypeDef"><a href="#3-1-1-SPI-HandleTypeDef" class="headerlink" title="3.1.1 SPI_HandleTypeDef"></a>3.1.1 SPI_HandleTypeDef</h3><h4 id="SPI-InitTypeDef"><a href="#SPI-InitTypeDef" class="headerlink" title="SPI_InitTypeDef"></a>SPI_InitTypeDef</h4><ul><li><p><strong>Mode</strong>：指定 SPI 工作模式</p><ul><li><code>SPI_MODE_SLAVE</code>：从模式</li><li><code>SPI_MODE_MASTER</code>：主模式</li></ul></li><li><p><strong>Direction</strong>：指定 SPI 双向模式状态</p><ul><li><code>SPI_DIRECTION_2LINES</code>：同时支持数据的发送和接收</li><li><code>SPI_DIRECTION_2LINES_RXONLY</code>：SPI只接收数据</li><li><code>SPI_DIRECTION_1LINE</code>：SPI只使用一条数据线进行双向数据传输</li></ul></li><li><p><strong>DataSize</strong>：指定 SPI 数据大小</p><ul><li><code>SPI_DATASIZE_8BIT</code>：8位</li><li><code>SPI_DATASIZE_16BIT</code>：16位</li></ul></li><li><p><strong>CLKPolarity</strong>：指定时钟极性（空闲状态时时钟的电平）</p><ul><li><code>SPI_POLARITY_LOW</code>：空闲时低电平</li><li><code>SPI_POLARITY_HIGH</code>：空闲时高电平</li></ul></li><li><p><strong>CLKPhase</strong>：指定时钟相位（数据采样的边沿）</p><ul><li><code>SPI_PHASE_1EDGE</code>：第一个时钟边沿采样</li><li><code>SPI_PHASE_2EDGE</code>：第二个时钟边沿采样</li></ul></li><li><p><strong>NSS</strong>：指定片选信号(NSS)的管理方式</p><ul><li><code>SPI_NSS_SOFT</code>：软件管理模式</li><li><code>SPI_NSS_HARD_INPUT</code>：硬件输入模式</li><li><code>SPI_NSS_HARD_OUTPUT</code>：硬件输出模式</li></ul></li><li><p><strong>BaudRatePrescaler</strong>：指定波特率预分频值</p><ul><li><code>SPI_BAUDRATEPRESCALER_2</code>：</li><li><code>SPI_BAUDRATEPRESCALER_4</code>：</li><li><code>SPI_BAUDRATEPRESCALER_8</code>：</li><li><code>SPI_BAUDRATEPRESCALER_16</code>：</li><li><code>SPI_BAUDRATEPRESCALER_32</code>：</li><li><code>SPI_BAUDRATEPRESCALER_64</code>：</li><li><code>SPI_BAUDRATEPRESCALER_128</code>：</li><li><code>SPI_BAUDRATEPRESCALER_256</code>：</li></ul></li><li><p><strong>FirstBit</strong>：指定数据传输时的字节顺序</p><ul><li><code>SPI_FIRSTBIT_MSB</code>：最先发送高位</li><li><code>SPI_FIRSTBIT_LSB</code>：最先发送低位</li></ul></li><li><p><strong>TIMode</strong>：用于控制SPI的三态模式(是否能进入高阻态)</p><ul><li><code>SPI_TIMODE_DISABLE</code>：禁用三态模式</li><li><code>SPI_TIMODE_ENABLE</code>：启用三态模式</li></ul></li><li><p><strong>CRCCalculation</strong>：控制是否启用CRC</p><ul><li><code>SPI_CRCCALCULATION_DISABLE</code>：禁用CRC计算</li><li><code>SPI_CRCCALCULATION_ENABLE</code>：启用CRC计算</li></ul></li><li><p><strong>CRCPolynomial</strong>：an odd number between Min_Data &#x3D; 1 and Max_Data &#x3D; 65535</p></li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="1-硬件SPI的MISO引脚配置成浮空输入还是复用推挽输出"><a href="#1-硬件SPI的MISO引脚配置成浮空输入还是复用推挽输出" class="headerlink" title="1. 硬件SPI的MISO引脚配置成浮空输入还是复用推挽输出?"></a>1. 硬件SPI的MISO引脚配置成浮空输入还是复用推挽输出?</h2><p>​当一个<a href="https://so.csdn.net/so/search?q=GPIO&spm=1001.2101.3001.7020">GPIO</a>端口配置为GPIO_Mode_AF_PP时，片上外设的复用功能输出信号会连接到输出控制电路，然后在端口上产生输出信号。但是在芯片内部，MISO是SPI模块的输入引脚，而不是输出引脚，也就是说“复用功能输出信号”根本不存在，所以”输出控制电路”就不能对外部产生输出信号，然而即使在复用推挽输出模式下，复用功能输入信号却与外部引脚之间相互连接，既MISO得到了外部信号的电平，实现了输入的功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/chenyuanlidejiyi/article/details/121639160&quot;&gt;笔记之STM32F0芯片S0PI_DMA的使用（HAL库）_st</summary>
      
    
    
    
    <category term="SPI" scheme="https://ydw-item.github.io.git/categories/SPI/"/>
    
    <category term="通信协议" scheme="https://ydw-item.github.io.git/categories/SPI/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="通讯协议" scheme="https://ydw-item.github.io.git/tags/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="SPI" scheme="https://ydw-item.github.io.git/tags/SPI/"/>
    
  </entry>
  
  <entry>
    <title>uniapp</title>
    <link href="https://ydw-item.github.io.git/2025/04/30/uniapp/"/>
    <id>https://ydw-item.github.io.git/2025/04/30/uniapp/</id>
    <published>2025-04-30T15:58:30.000Z</published>
    <updated>2025-04-30T15:58:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考资料</strong>：</p><p>1.<a href="https://uniapp.dcloud.net.cn/quickstart.html"><a href="https://uniapp.dcloud.net.cn/tutorial/project.html">工程简介 | uni-app官网</a></a></p><h1 id="一、工程目录"><a href="#一、工程目录" class="headerlink" title="一、工程目录"></a>一、工程目录</h1><h2 id="1-1-uni-scss"><a href="#1-1-uni-scss" class="headerlink" title="1.1 uni.scss"></a>1.1 uni.scss</h2><h2 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h2><h1 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h1><h1 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;1.&lt;a href=&quot;https://uniapp.dcloud.net.cn/quickstart.html&quot;&gt;&lt;a href=&quot;https://uniapp.dcloud.net.cn/tutorial/pro</summary>
      
    
    
    
    <category term="物联网" scheme="https://ydw-item.github.io.git/categories/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    
    <category term="APP开发" scheme="https://ydw-item.github.io.git/tags/APP%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>USART通信</title>
    <link href="https://ydw-item.github.io.git/2025/04/28/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/USART/"/>
    <id>https://ydw-item.github.io.git/2025/04/28/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/USART/</id>
    <published>2025-04-28T07:29:30.000Z</published>
    <updated>2025-04-28T07:29:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Usart-Init"><a href="#一、Usart-Init" class="headerlink" title="一、Usart_Init"></a>一、Usart_Init</h1><h2 id="1-1-UART-HandleTypeDef"><a href="#1-1-UART-HandleTypeDef" class="headerlink" title="1.1 UART_HandleTypeDef"></a>1.1 UART_HandleTypeDef</h2><ul><li><strong>Instance</strong>： UART 外设的寄存器基地址</li><li><strong>Init</strong>：UART 配置参数</li><li><strong>pTxBuffPtr</strong>：指向 UART 发送缓冲区的指针</li><li><strong>TxXferSize</strong>：UART 发送缓冲区的大小</li><li><strong>TxXferCount</strong>：UART 发送传输计数器</li><li><strong>pRxBuffPtr</strong>：指向 UART 接收缓冲区的指针</li><li><strong>RxXferSize</strong>：UART 接收缓冲区的大小</li><li><strong>RxXferCount</strong>：UART 接收传输计数器</li><li><strong>ReceptionType</strong>：正在进行的接收类型</li><li><strong>RxEventType</strong>：接收事件类型</li><li><strong>hdmatx</strong>：UART 发送 DMA 句柄</li><li><strong>hdmarx</strong>：UART 接收 DMA 句柄</li><li><strong>Lock</strong>：锁对象，用于管理 UART 的并发访问</li><li><strong>gState</strong>：UART 全局句柄的当前状态</li><li><strong>RxState</strong>：与接收操作相关的 UART 状态信息</li><li><strong>ErrorCode</strong>：UART 错误代码</li></ul><h2 id="1-2-UART-InitTypeDef"><a href="#1-2-UART-InitTypeDef" class="headerlink" title="1.2 UART_InitTypeDef"></a>1.2 UART_InitTypeDef</h2><ul><li><strong>Init.BaudRate</strong>：UART 通信的波特率</li></ul><p>​<code>9600</code></p><p>​<code>115200</code></p><p>​<code>921600</code></p><ul><li><p><strong>Init.WordLength</strong>：指定数据帧中传输或接收的数据位数</p><p>  <code>UART_WORDLENGTH_8B</code> </p><p>  <code>UART_WORDLENGTH_9B</code></p></li><li><p><strong>Init.StopBits</strong>：指定传输的停止位数量</p></li></ul><p>​<code>UART_STOPBITS_1</code></p><p>​<code>UART_STOPBITS_2</code></p><ul><li><strong>Init.Parity</strong>：指定校验模式</li></ul><p>​<code>UART_PARITY_NONE</code>:无校验</p><p>​<code>UART_PARITY_EVEN</code>:偶校验</p><p>​<code>UART_PARITY_ODD</code>:奇校验</p><ul><li><strong>Init.Mode</strong>：是否启用接收或发送模式</li></ul><p>​<code>UART_MODE_RX</code></p><p>​<code>UART_MODE_TX</code></p><p>​<code>UART_MODE_TX_RX</code></p><ul><li><strong>Init.HwFlowCtl</strong>：是否启用硬件流控制模式</li></ul><p>​<code>UART_STATE_DISABLE</code></p><p>​<code>UART_STATE_ENABLE</code></p><ul><li><strong>Init.OverSampling</strong>：启用几倍过采样</li></ul><p>​<code>UART_OVERSAMPLING_16</code>:8次采样来获取</p><p>​<code>UART_OVERSAMPLING_8</code>:8次采样来获取</p><h2 id="1-3-HAL-UART-Init-UART-HandleTypeDef-huart"><a href="#1-3-HAL-UART-Init-UART-HandleTypeDef-huart" class="headerlink" title="1.3 HAL_UART_Init(UART_HandleTypeDef *huart)"></a>1.3 HAL_UART_Init(UART_HandleTypeDef *huart)</h2><p>将1.1和1.2中的配置进行初始化，此函数会调用AL_UART_MspInit(UART_HandleTypeDef* uartHandle)</p><p>进行串口的硬件初始化</p><h1 id="二、HAL-UART-MspInit"><a href="#二、HAL-UART-MspInit" class="headerlink" title="二、HAL_UART_MspInit"></a>二、HAL_UART_MspInit</h1><h2 id="2-1-GPIO-InitTypeDef"><a href="#2-1-GPIO-InitTypeDef" class="headerlink" title="2.1 GPIO_InitTypeDef"></a>2.1 GPIO_InitTypeDef</h2><ul><li><strong>Pin</strong>：指定要配置的 GPIO 引脚</li></ul><p>​<code>GPIO_PIN_x</code></p><ul><li><strong>Mode</strong>:指定引脚的工作模式</li></ul><p>​<code>GPIO_MODE_INPUT</code>：输入模式</p><p>​<code>GPIO_MODE_OUTPUT_PP</code>：推挽输出模式</p><p>​<code>GPIO_MODE_OUTPUT_OD</code>：开漏输出模式</p><p>​<code>GPIO_MODE_AF_PP</code>：复用功能推挽输出模式</p><p>​<code>GPIO_MODE_AF_OD</code>：复用功能开漏输出模式</p><p>​<code>GPIO_MODE_ANALOG</code>：模拟模式</p><p>​<code>GPIO_MODE_IT_RISING</code>：外部中断模式，触发上升沿</p><p>​<code>GPIO_MODE_IT_FALLING</code>：外部中断模式，触发下降沿</p><p>​<code>GPIO_MODE_IT_RISING_FALLING</code>：外部中断模式，触发上升沿或下降沿</p><p>​<code>GPIO_MODE_EVT_RISING</code>：外部事件模式，触发上升沿</p><p>​<code>GPIO_MODE_EVT_FALLING</code>：外部事件模式，触发下降沿</p><p>​<code>GPIO_MODE_EVT_RISING_FALLING</code>：外部事件模式，触发上升沿或下降沿</p><ul><li><strong>Pull</strong>:指定引脚的上拉或下拉电阻</li></ul><p>​<code>GPIO_NOPULL</code>：无上下拉</p><p>​<code>GPIO_PULLUP</code>：上拉</p><p>​<code>GPIO_PULLDOWN</code>：下拉</p><ul><li><strong>Speed</strong>:指定引脚的输出速度</li></ul><p>​<code>GPIO_SPEED_FREQ_LOW</code>:低速</p><p>​<code>GPIO_SPEED_FREQ_MEDIUM</code>:中速</p><p>​<code>GPIO_SPEED_FREQ_HIGH</code>:高速</p><ul><li><strong>Alternate</strong>:引脚的复用功能</li></ul><h2 id="2-2-HAL-GPIO-Init-GPIO-TypeDef-GPIOx-GPIO-InitTypeDef-GPIO-Init"><a href="#2-2-HAL-GPIO-Init-GPIO-TypeDef-GPIOx-GPIO-InitTypeDef-GPIO-Init" class="headerlink" title="2.2 HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)"></a>2.2 HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)</h2><p>将2.1的结构体传入HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)进行初始化</p><h2 id="2-3-DMA-HandleTypeDef"><a href="#2-3-DMA-HandleTypeDef" class="headerlink" title="2.3 DMA_HandleTypeDef"></a>2.3 DMA_HandleTypeDef</h2><ul><li><strong>Instance</strong>：指向DMA 流寄存器基地址</li><li><strong>Init</strong>：DMA 通信参数的结构体</li><li><strong>Lock</strong>：DMA 锁对象</li><li><strong>State</strong>：DMA 传输的当前状态</li><li><strong>Parent</strong>：指向与 DMA 操作相关联的父对象</li><li><strong>XferCpltCallback</strong>：传输完成时调用的回调</li><li><strong>XferHalfCpltCallback</strong>：半传输完成时调用的回调</li><li><strong>XferM1CpltCallback</strong>：内存 1 的传输完成时调用的回调</li><li><strong>XferM1HalfCpltCallback</strong>：内存 1 的半传输完成时调用的回调</li><li><strong>XferErrorCallback</strong>：DMA 传输出错时调用的回调</li><li><strong>XferAbortCallback</strong>：DMA 传输被中止时调用的回调</li><li><strong>ErrorCode</strong>：DMA 传输过程中出现错误代码</li><li><strong>StreamBaseAddress</strong>：DMA 流的基地址</li><li><strong>StreamIndex</strong>：DMA 流的索引</li></ul><h2 id="2-4-DMA-InitTypeDef"><a href="#2-4-DMA-InitTypeDef" class="headerlink" title="2.4 DMA_InitTypeDef"></a>2.4 DMA_InitTypeDef</h2><ul><li><strong>Channel</strong>：指定 DMA 流使用的通道</li></ul><p>​<code>DMA_CHANNEL_x</code></p><ul><li><strong>Direction</strong>：指定数据传输的方向</li></ul><p>​<code>DMA_MEMORY_TO_MEMORY</code>:内存到内存</p><p>​<code>DMA_MEMORY_TO_PERIPH</code>:内存到外设</p><p>​<code>DMA_PERIPH_TO_MEMORY</code>:外设到内存</p><ul><li><strong>PeriphInc</strong>：外设地址寄存器是否需要递增</li></ul><p>​<code>DMA_PINC_ENABLE</code>:启用</p><p>​<code>DMA_PINC_DISABLE</code>:禁用</p><ul><li><p><strong>MemInc</strong>：内存地址寄存器是否需要递增</p><p>  <code>DMA_MINC_ENABLE</code>::启用</p><p>  <code>DMA_MINC_DISABLE</code>:禁用</p></li><li><p><strong>PeriphDataAlignment</strong>：外设数据宽度</p></li></ul><p>​<code>DMA_PDATAALIGN_BYTE</code>:字节对齐 (1 字节)</p><p>​<code>DMA_PDATAALIGN_HALFWORD</code>: 半字对齐 (2字节)</p><p>​<code>DMA_PDATAALIGN_WORD</code>:字对齐 (4字节)</p><ul><li><strong>MemDataAlignment</strong>：内存数据宽度</li></ul><p>​<code>DMA_MDATAALIGN_BYTE</code>:字节对齐 (1 字节)</p><p>​<code>DMA_MDATAALIGN_HALFWORD</code>:半字对齐 (2字节)</p><p>​<code>DMA_MDATAALIGN_WORD</code>:字对齐 (4字节)</p><ul><li><strong>Mode</strong>：DMA 流的操作模式</li></ul><p>​<code>DMA_NORMAL</code>:正常模式(DMA 执行一次数据传输后会停止)</p><p>​<code>DMA_CIRCULAR</code>:循环模式(DMA 会在数据传输完成后自动重新启动)</p><p>​<code>DMA_PFCTRL</code>:优先控制模式(外设优先级控制)</p><ul><li><strong>Priority</strong>：DMA 流的优先级</li></ul><p>​<code>DMA_PRIORITY_LOW</code>:低优先级</p><p>​<code>DMA_PRIORITY_MEDIUM</code>:中优先级</p><p>​<code>DMA_PRIORITY_HIGH</code>:高优先级</p><p>​<code>DMA_PRIORITY_VERY_HIGH</code>:非常高优先级</p><ul><li><strong>FIFOMode</strong>：是否使用 FIFO 模式或者直接模式</li></ul><p>​<code>DMA_FIFOMODE_DISABLE</code>:直接模式(数据会直接从内存传输到外设，或者反向操作)</p><p>​<code>DMA_FIFOMODE_ENABLE</code>:DMA 流会使用 FIFO 队列来缓存数据，直到数据达到一定数量时才会传输</p><ul><li><strong>FIFOThreshold</strong>：FIFO 阈值等级</li></ul><p>​<code>DMA_FIFO_THRESHOLD_1QUARTERFULL</code>:四分之一满DMA 会开始数据传输</p><p>​<code>DMA_FIFO_THRESHOLD_HALFFULL</code>:一半满DMA 会开始数据传输</p><p>​<code>DMA_FIFO_THRESHOLD_3QUARTERSFULL</code>:三分之一满DMA 会开始数据传输</p><p>​<code>DMA_FIFO_THRESHOLD_FULL</code>:完全满DMA 会开始数据传输</p><ul><li><strong>MemBurst</strong>：内存传输的突发模式配置</li></ul><p>​<code>DMA_MBURST_SINGLE</code>:单次传输模式</p><p>​<code>DMA_MBURST_INC4</code>:递增 4 字节传输模式</p><p>​<code>DMA_MBURST_INC8</code>:递增 8 字节传输模式</p><p>​<code>DMA_MBURST_INC16</code>:递增 16 字节传输模式</p><ul><li><strong>PeriphBurst</strong>：外设传输的突发模式配置</li></ul><p>​<code>DMA_PBURST_SINGLE</code>:单次传输模式</p><p>​<code>DMA_PBURST_INC4</code>:递增 4 字节传输模式</p><p>​<code>DMA_PBURST_INC8</code>:递增 8 字节传输模式</p><p>​<code>DMA_PBURST_INC16</code>:递增 16 字节传输模式</p><h2 id="2-5-HAL-StatusTypeDef-HAL-DMA-Init-DMA-HandleTypeDef-hdma"><a href="#2-5-HAL-StatusTypeDef-HAL-DMA-Init-DMA-HandleTypeDef-hdma" class="headerlink" title="2.5 HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)"></a>2.5 HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)</h2><p>调用此函数初始化2.3结构体的配置</p><h1 id="三、-HAL-LINKDMA"><a href="#三、-HAL-LINKDMA" class="headerlink" title="三、__HAL_LINKDMA"></a>三、__HAL_LINKDMA</h1><p>____HAL_LINKDMA(<strong>HANDLE</strong>, <strong>PERIPH</strong>, <strong>DMA_HANDLE</strong>)</p><p>将一个 DMA 句柄（<code>DMA_HandleTypeDef</code>）与外设（如 UART、SPI、I2C 等）的相关操作关联起来</p><ul><li><p><strong>HANDLE</strong>:外设句柄</p></li><li><p><strong>PERIPH</strong>:外设的 DMA 相关字段</p></li><li><p><strong>DMA_HANDLE__</strong>:实际的 DMA 句柄</p></li></ul><h1 id="四、中断"><a href="#四、中断" class="headerlink" title="四、中断"></a>四、中断</h1><h2 id="4-1-HAL-NVIC-SetPriority"><a href="#4-1-HAL-NVIC-SetPriority" class="headerlink" title="4.1 HAL_NVIC_SetPriority"></a>4.1 HAL_NVIC_SetPriority</h2><p>HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)</p><p><strong>设置中断的优先级</strong></p><ul><li><strong>IRQn</strong>：中断请求号</li><li><strong>PreemptPriority</strong>：抢占优先级(值越小，优先级越高)</li><li><strong>SubPriority</strong>：响应优先级(值越小，优先级越高)</li></ul><h2 id="4-2-HAL-NVIC-EnableIRQ"><a href="#4-2-HAL-NVIC-EnableIRQ" class="headerlink" title="4.2 HAL_NVIC_EnableIRQ"></a>4.2 HAL_NVIC_EnableIRQ</h2><p>HAL_NVIC_EnableIRQ(IRQn_Type IRQn)</p><p><strong>启用指定中断</strong></p><ul><li><strong>IRQn</strong>:中断请求号</li></ul><h1 id="五、中断响应"><a href="#五、中断响应" class="headerlink" title="五、中断响应"></a>五、中断响应</h1><p><img src="/image-20250503175203247.png" alt="image-20250503175203247"></p><h2 id="5-1-DMA2-Stream2-IRQHandler"><a href="#5-1-DMA2-Stream2-IRQHandler" class="headerlink" title="5.1 DMA2_Stream2_IRQHandler()"></a>5.1 DMA2_Stream2_IRQHandler()</h2><p>当 DMA2 的 Stream 2 发生中断时，调用 <code>HAL_DMA_IRQHandler</code> 来处理相关的中断事件</p><h2 id="5-2-HAL-DMA-IRQHandler"><a href="#5-2-HAL-DMA-IRQHandler" class="headerlink" title="5.2 HAL_DMA_IRQHandler"></a>5.2 HAL_DMA_IRQHandler</h2><p>用于处理 DMA 相关的中断事件</p><ul><li><strong>传输完成中断</strong>:当 DMA 完成数据的传输时</li></ul><p><code>HAL_DMA_TxCpltCallback()</code>:DMA 发送完成时触发的回调</p><p><code>HAL_DMA_RxCpltCallback()</code>:DMA 接收完成时触发的回调</p><ul><li><strong>半传输完成中断</strong>:当 DMA 在传输数据时到达数据缓冲区的一半时</li></ul><p><code>HAL_DMA_HalfTxCpltCallback()</code>:DMA 发送半传输完成时触发的回调</p><p><code>HAL_DMA_HalfRxCpltCallback()</code>:DMA 接收半传输完成时触发的回调</p><ul><li><strong>传输错误中断</strong>:当 DMA 在传输过程中发生错误时</li></ul><p><code>HAL_DMA_ErrorCallback()</code>:当发生 DMA 错误时触发的回调</p><ul><li><strong>直接存储器访问总线错误</strong>:当 DMA 控制器遇到总线错误时</li><li><strong>DMA Stream&#x2F;Channel 中的中断源</strong>:</li></ul><h1 id="5-3-HAL-UART-IRQHandler"><a href="#5-3-HAL-UART-IRQHandler" class="headerlink" title="5.3 HAL_UART_IRQHandler"></a>5.3 HAL_UART_IRQHandler</h1><ul><li><strong>数据接收完成中断</strong>:</li></ul><p><code>HAL_UART_RxCpltCallback</code>:当 UART 数据接收完成时</p><p><code>HAL_UART_RxHalfCpltCallback()</code>:当 UART 半接收完成时</p><ul><li><strong>数据发送完成中断</strong>:</li></ul><p><code>HAL_UART_TxCpltCallback()</code>:当 UART 数据发送完成时</p><p><code>HAL_UART_TxHalfCpltCallback()</code>:当 UART 半发送完成时</p><ul><li><strong>错误中断</strong>:</li></ul><p><code>HAL_UART_ErrorCallback()</code>:当 UART 发生错误时</p><ul><li><strong>其他中断（如行结束中断等）</strong>:</li></ul><p><code>HAL_UART_AbortCpltCallback()</code>:当 UART 中的传输被取消时</p><h1 id="三、发送重定向"><a href="#三、发送重定向" class="headerlink" title="三、发送重定向"></a>三、发送重定向</h1><h2 id="1-my-usart-h"><a href="#1-my-usart-h" class="headerlink" title="1.my_usart.h"></a>1.my_usart.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MY_USART_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MY_USART_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdarg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdarg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdint.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> U1_TxBuff_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_usart1</span><span class="params">(<span class="type">char</span> *format,...)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-my-usart-c"><a href="#2-my-usart-c" class="headerlink" title="2.my_usart.c"></a>2.my_usart.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">print_usart1</span><span class="params">(<span class="type">char</span> *format,...)</span></span><br><span class="line">&#123;</span><br><span class="line">    va_list listdata;</span><br><span class="line">    va_start(listdata,format);</span><br><span class="line">    <span class="built_in">vsprintf</span>((<span class="type">char</span> *)U1_TxBuff,format,listdata);</span><br><span class="line">    va_end(listdata);</span><br><span class="line">    HAL_UART_Transmit(&amp;huart1,(<span class="type">const</span> <span class="type">uint8_t</span> *)U1_TxBuff,<span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span>*)U1_TxBuff),<span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-HAL-UART-GET-FLAG-huart1-UART-FLAG-TXE"><a href="#1-HAL-UART-GET-FLAG-huart1-UART-FLAG-TXE" class="headerlink" title="1. __HAL_UART_GET_FLAG(&amp;huart1, UART_FLAG_TXE)"></a>1. __HAL_UART_GET_FLAG(&amp;huart1, UART_FLAG_TXE)</h2><p><strong>检查 USART状态寄存器中特定标志位的宏</strong></p><table><thead><tr><th align="center">宏定义</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">UART_FLAG_CTS</td><td align="center">清除发送</td></tr><tr><td align="center">UART_FLAG_LBD</td><td align="center">线路中断</td></tr><tr><td align="center">UART_FLAG_TXE</td><td align="center">传输数据寄存器空</td></tr><tr><td align="center">UART_FLAG_TC</td><td align="center">传输完成</td></tr><tr><td align="center">UART_FLAG_RXNE</td><td align="center">接收数据寄存器非空</td></tr><tr><td align="center">UART_FLAG_IDLE</td><td align="center">空闲线</td></tr><tr><td align="center">UART_FLAG_ORE</td><td align="center">接收溢出错误</td></tr><tr><td align="center">UART_FLAG_NE</td><td align="center">接收噪声错误</td></tr><tr><td align="center">UART_FLAG_FE</td><td align="center">接收帧错误</td></tr><tr><td align="center">UART_FLAG_PE</td><td align="center">接收奇偶校验错误</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Usart-Init&quot;&gt;&lt;a href=&quot;#一、Usart-Init&quot; class=&quot;headerlink&quot; title=&quot;一、Usart_Init&quot;&gt;&lt;/a&gt;一、Usart_Init&lt;/h1&gt;&lt;h2 id=&quot;1-1-UART-HandleTypeDef&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="STM32" scheme="https://ydw-item.github.io.git/categories/STM32/"/>
    
    <category term="通信协议" scheme="https://ydw-item.github.io.git/categories/STM32/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="通讯协议" scheme="https://ydw-item.github.io.git/tags/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="USART" scheme="https://ydw-item.github.io.git/tags/USART/"/>
    
  </entry>
  
  <entry>
    <title>Boorloader</title>
    <link href="https://ydw-item.github.io.git/2025/04/22/BootLoader/"/>
    <id>https://ydw-item.github.io.git/2025/04/22/BootLoader/</id>
    <published>2025-04-22T09:06:30.000Z</published>
    <updated>2025-04-22T09:06:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考资料</strong>：</p><p><a href="https://www.bilibili.com/video/BV1SatHeBEVG?spm_id_from=333.788.videopod.episodes&vd_source=daf1db3c953df56f74e76077dfa61ab4&p=2">超子说物联网：手把手教程 4G通信物联网 OTA远程升级 BootLoader程序设计</a></p><h1 id="一、Bootloader的作用"><a href="#一、Bootloader的作用" class="headerlink" title="一、Bootloader的作用"></a>一、Bootloader的作用</h1><h2 id="1-1-Boot的目的："><a href="#1-1-Boot的目的：" class="headerlink" title="1.1 Boot的目的："></a>1.1 Boot的目的：</h2><p>最终目的：跳到C语言中；为了C语言运行程序会进行一系列的初始化，系统一上电后如何通过一系列的设置让软件程序员进入C语言&#x2F;更高级语言环境的开发，这个过程就是boot的主要目的。</p><h2 id="1-2-Loader的目的："><a href="#1-2-Loader的目的：" class="headerlink" title="1.2 Loader的目的："></a>1.2 Loader的目的：</h2><p>主要目的是开始执行应用逻辑，比如点灯：需要灯的接口开发；串口输入输出：需要串口编程；加载linux的内核：flash的编程、网卡的编程、内核启动前的初始化部分。根据不同的应用会有不同的变化。</p><h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1SatHeBEVG?spm_id_from=333.788.videopod.episodes&amp;vd_source=daf1db</summary>
      
    
    
    
    <category term="外设" scheme="https://ydw-item.github.io.git/categories/%E5%A4%96%E8%AE%BE/"/>
    
    
    <category term="STM32" scheme="https://ydw-item.github.io.git/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>LVGL页面图层</title>
    <link href="https://ydw-item.github.io.git/2025/04/06/LVGL/LVGL-%E9%A1%B5%E9%9D%A2%E8%AE%BE%E8%AE%A1/"/>
    <id>https://ydw-item.github.io.git/2025/04/06/LVGL/LVGL-%E9%A1%B5%E9%9D%A2%E8%AE%BE%E8%AE%A1/</id>
    <published>2025-04-06T08:24:19.000Z</published>
    <updated>2025-04-06T08:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、菜单页面，背景色不动"><a href="#一、菜单页面，背景色不动" class="headerlink" title="一、菜单页面，背景色不动"></a>一、菜单页面，背景色不动</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ui_MenuPage_bottom = lv_obj_create(<span class="literal">NULL</span>);</span><br><span class="line">lv_obj_set_width(ui_MenuPage_bottom, <span class="number">240</span>);</span><br><span class="line">lv_obj_set_height(ui_MenuPage_bottom,<span class="number">280</span>);</span><br><span class="line"></span><br><span class="line">bg_image = lv_img_create(ui_MenuPage_bottom);</span><br><span class="line">lv_img_set_src(bg_image,&amp;bg_2);</span><br><span class="line">lv_obj_set_style_bg_opa(bg_image, LV_OPA_70, <span class="number">0</span>); </span><br><span class="line"></span><br><span class="line">ui_MenuPage_top = lv_obj_create(ui_MenuPage_bottom);</span><br><span class="line">lv_obj_set_align(ui_MenuPage_top, LV_ALIGN_TOP_MID);  </span><br><span class="line">lv_obj_add_flag(ui_MenuPage_top, LV_OBJ_FLAG_SCROLLABLE);  <span class="comment">// 设置为可滚动的对象</span></span><br><span class="line">lv_obj_set_scroll_dir(ui_MenuPage_top, LV_DIR_VER);</span><br><span class="line">lv_obj_set_style_bg_opa(ui_MenuPage_top, <span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line">lv_obj_set_width(ui_MenuPage_top, <span class="number">240</span>);</span><br><span class="line">lv_obj_set_height(ui_MenuPage_top, <span class="number">280</span>);</span><br></pre></td></tr></table></figure><style>.uxmcjvhidyks{}</style><img src="/2025/04/06/LVGL/LVGL-%E9%A1%B5%E9%9D%A2%E8%AE%BE%E8%AE%A1/1.gif" class="uxmcjvhidyks"><h1 id="二、右滑切换界面"><a href="#二、右滑切换界面" class="headerlink" title="二、右滑切换界面"></a>二、右滑切换界面</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ui_event_AboutPage</span><span class="params">(<span class="type">lv_event_t</span> * e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">lv_event_code_t</span> event_code = lv_event_get_code(e);</span><br><span class="line">    <span class="type">lv_obj_t</span> * target = lv_event_get_target(e);<span class="comment">//获取触发该事件的目标对象（即哪个控件触发了事件）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(event_code == LV_EVENT_GESTURE)  <span class="comment">//检测手势</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(lv_indev_get_gesture_dir(lv_indev_get_act()) == LV_DIR_RIGHT)<span class="comment">//右滑</span></span><br><span class="line">        &#123;</span><br><span class="line">    user_Stack_Pop(&amp;ScrRenewStack); <span class="comment">//出栈</span></span><br><span class="line">            ui_MenuPage_screen_init();      <span class="comment">//初始化目标页面       </span></span><br><span class="line">            lv_scr_load_anim(ui_MenuPage_bottom,LV_SCR_LOAD_ANIM_MOVE_RIGHT,<span class="number">100</span>,<span class="number">0</span>,<span class="literal">true</span>);</span><br><span class="line">            user_Stack_Push(&amp;ScrRenewStack,(<span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)&amp;ui_MenuPage_bottom);<span class="comment">//将目标页面压栈</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、菜单页面，背景色不动&quot;&gt;&lt;a href=&quot;#一、菜单页面，背景色不动&quot; class=&quot;headerlink&quot; title=&quot;一、菜单页面，背景色不动&quot;&gt;&lt;/a&gt;一、菜单页面，背景色不动&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;tabl</summary>
      
    
    
    
    <category term="LVGL" scheme="https://ydw-item.github.io.git/categories/LVGL/"/>
    
    
    <category term="LVGL" scheme="https://ydw-item.github.io.git/tags/LVGL/"/>
    
  </entry>
  
  <entry>
    <title>LVGL移植</title>
    <link href="https://ydw-item.github.io.git/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/"/>
    <id>https://ydw-item.github.io.git/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/</id>
    <published>2025-03-24T08:24:19.000Z</published>
    <updated>2025-03-24T08:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、LVGL文件裁剪"><a href="#一、LVGL文件裁剪" class="headerlink" title="一、LVGL文件裁剪"></a>一、LVGL文件裁剪</h1><h2 id="1-删除根目录下选中的文件"><a href="#1-删除根目录下选中的文件" class="headerlink" title="1. 删除根目录下选中的文件"></a>1. <strong>删除根目录下选中的文件</strong></h2><style>.hyxxatddlbkq{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/9.png" class="hyxxatddlbkq" alt="1"><p><strong>删除后</strong></p><style>.oynglccwajsn{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/10.png" class="oynglccwajsn" alt="2"><h2 id="2-裁剪examples文件夹"><a href="#2-裁剪examples文件夹" class="headerlink" title="2. 裁剪examples文件夹"></a>2. 裁剪examples文件夹</h2><ul><li>删除<code>porting</code>中输入输出相关的接口文件，其它全部删除</li></ul><style>.dxfoxdwelctd{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/11.png" class="dxfoxdwelctd" alt="QQ_1742610639413"><h2 id="3-修改lvgl配置文件文件名"><a href="#3-修改lvgl配置文件文件名" class="headerlink" title="3. 修改lvgl配置文件文件名"></a>3. 修改lvgl配置文件文件名</h2><p>将根目录下的<code>lv_conf_template.h</code>文件名修改为<code>lv_conf.h</code></p><h2 id="4-最终文件"><a href="#4-最终文件" class="headerlink" title="4. 最终文件"></a>4. 最终文件</h2><style>.bmkpelborjqs{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/12.png" class="bmkpelborjqs" alt="image-20250322104307792"><ul><li><code>demos</code>文件夹中保存的是官方历程，可以删除</li></ul><h2 id="5-修改lv-conf-h"><a href="#5-修改lv-conf-h" class="headerlink" title="5. 修改lv_conf.h"></a>5. 修改lv_conf.h</h2><ul><li>将<code>#if 0</code>修改为<code>#if 1</code></li></ul><style>.beucsjmjjwln{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/14.png" class="beucsjmjjwln" alt="image-20250322110212708"><h1 id="二、工程目录"><a href="#二、工程目录" class="headerlink" title="二、工程目录"></a>二、工程目录</h1><h2 id="1-移植裁剪后的lvgl"><a href="#1-移植裁剪后的lvgl" class="headerlink" title="1. 移植裁剪后的lvgl"></a>1. 移植裁剪后的lvgl</h2><style>.mclotkmneweh{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/13.png" class="mclotkmneweh" alt="image-20250322110141115"><p><strong>不按次结构，有些头文件的引用可能会报错</strong></p><h2 id="2-添加文件进工程"><a href="#2-添加文件进工程" class="headerlink" title="2.添加文件进工程"></a>2.添加文件进工程</h2><h3 id="1-添加分组"><a href="#1-添加分组" class="headerlink" title="(1) 添加分组"></a>(1) 添加分组</h3><style>.lfpflhvccwgx{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/15.png" class="lfpflhvccwgx" alt="image-20250322114144151"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Middlewares/lvgl/example/porting</span><br><span class="line">Middlewares/lvgl/src/core</span><br><span class="line">Middlewares/lvgl/src/core    </span><br><span class="line">Middlewares/lvgl/src/extra</span><br><span class="line">Middlewares/lvgl/src/font</span><br><span class="line">Middlewares/lvgl/src/gpu</span><br><span class="line">Middlewares/lvgl/src/hal</span><br><span class="line">Middlewares/lvgl/src/widgets</span><br></pre></td></tr></table></figure><h3 id="2-为什么要这样分组"><a href="#2-为什么要这样分组" class="headerlink" title="(2) 为什么要这样分组"></a>(2) 为什么要这样分组</h3><p>因为这样分组和LVGL的结构是相同的</p><style>.ejiumipggdnl{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/16.png" class="ejiumipggdnl" alt="image-20250322114311900"><h3 id="3-为分组添加文件"><a href="#3-为分组添加文件" class="headerlink" title="(3) 为分组添加文件"></a>(3) 为分组添加文件</h3><style>.xhiusqdlavjf{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/17.png" class="xhiusqdlavjf" alt="image-20250322111729503"><h3 id="4-添加头文件路径"><a href="#4-添加头文件路径" class="headerlink" title="(4) 添加头文件路径"></a>(4) 添加头文件路径</h3><style>.fskqfbemrruv{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/19.png" class="fskqfbemrruv" alt="QQ_1742618216223"><h3 id="5-开启C99模式"><a href="#5-开启C99模式" class="headerlink" title="(5) 开启C99模式"></a>(5) 开启C99模式</h3><style>.euvpvdclllhg{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/18.png" class="euvpvdclllhg" alt="QQ_1742615627487"><h1 id="三、配置输出"><a href="#三、配置输出" class="headerlink" title="三、配置输出"></a>三、配置输出</h1><h2 id="1-修改头文件"><a href="#1-修改头文件" class="headerlink" title="1. 修改头文件"></a>1. 修改头文件</h2><p><code>lvgl\examples\porting</code>路径下的<code>lv_port_disp_template.c/h</code>是官方提供的显示接口函数</p><p>使用前需要将<code>#if 0</code> 改为<code>#if 1</code></p><style>.dgkwpkkwwojr{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/20.png" class="dgkwpkkwwojr" alt="image-20250322125754825"><style>.eykahykaxyix{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/21.png" class="eykahykaxyix" alt="image-20250322125858697"><h2 id="2-包含输出设备驱动头文件"><a href="#2-包含输出设备驱动头文件" class="headerlink" title="2. 包含输出设备驱动头文件"></a>2. 包含输出设备驱动头文件</h2><h2 id="3-在disp-init-中调用LCD初始化代码"><a href="#3-在disp-init-中调用LCD初始化代码" class="headerlink" title="3. 在disp_init()中调用LCD初始化代码"></a>3. 在disp_init()中调用LCD初始化代码</h2><style>.jdibsswdswbi{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/2.png" class="jdibsswdswbi" alt="image-20250322131803479"><h2 id="4-配置图形数据缓冲模式"><a href="#4-配置图形数据缓冲模式" class="headerlink" title="4. 配置图形数据缓冲模式"></a>4. 配置图形数据缓冲模式</h2><style>.iddkefcqsyhz{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/23.png" class="iddkefcqsyhz" alt="image-20250322132844255"><h2 id="5-设置屏幕尺寸"><a href="#5-设置屏幕尺寸" class="headerlink" title="5. 设置屏幕尺寸"></a>5. 设置屏幕尺寸</h2><style>.lvnhhpoxokrm{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/24.png" class="lvnhhpoxokrm" alt="image-20250322133003409"><h2 id="6-在disp-flush中使用自己的打点函数"><a href="#6-在disp-flush中使用自己的打点函数" class="headerlink" title="6. 在disp_flush中使用自己的打点函数"></a>6. 在disp_flush中使用自己的打点函数</h2><style>.deifdkgcqwsv{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/1.png" class="deifdkgcqwsv" alt="image-20250318133644412"><h1 id="四、配置输入"><a href="#四、配置输入" class="headerlink" title="四、配置输入"></a>四、配置输入</h1><h2 id="1-修改输入设备接口文件"><a href="#1-修改输入设备接口文件" class="headerlink" title="1. 修改输入设备接口文件"></a>1. 修改输入设备接口文件</h2><p><code>lvgl\examples\porting</code>路径下的<code>lv_port_indev_template.c/h</code>是官方提供的显示接口函数</p><p>使用前需要将<code>#if 0</code> 改为<code>#if 1</code></p><style>.huhqxeglhvcr{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/38.png" class="huhqxeglhvcr" alt="image-20250323144615574"><style>.svgwhbqipsbk{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/39.png" class="svgwhbqipsbk" alt="image-20250323144639488"><h2 id="2-按需裁剪输入设备"><a href="#2-按需裁剪输入设备" class="headerlink" title="2. 按需裁剪输入设备"></a>2. 按需裁剪输入设备</h2><p><strong>删除<code>lv_port_indev_template.c/h</code>中未使用的部分，只保留使用到的部分</strong></p><style>.eubjizlmymfr{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/4.png" class="eubjizlmymfr" alt="image-20250323145225160"><style>.fkkpqtotxqwf{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/40.png" class="fkkpqtotxqwf" alt="image-20250323145323205"><h2 id="3-在接口文件中包含触摸头文件"><a href="#3-在接口文件中包含触摸头文件" class="headerlink" title="3. 在接口文件中包含触摸头文件"></a>3. 在接口文件中包含触摸头文件</h2><style>.tfhipcrpqyqi{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/41.png" class="tfhipcrpqyqi" alt="QQ_1742714448348"><h2 id="4-在touchpad-init-中调用触摸初始化代码"><a href="#4-在touchpad-init-中调用触摸初始化代码" class="headerlink" title="4. 在touchpad_init()中调用触摸初始化代码"></a>4. 在touchpad_init()中调用触摸初始化代码</h2><style>.qiwlxtwpzhtp{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/3.png" class="qiwlxtwpzhtp" alt="image-20250323151034944"><h2 id="5-触摸检测函数配置"><a href="#5-触摸检测函数配置" class="headerlink" title="5. 触摸检测函数配置"></a>5. 触摸检测函数配置</h2><style>.zfrbywowbmpo{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/5.png" class="zfrbywowbmpo" alt="image-20250318135936403"><h2 id="6-配置坐标获取函数"><a href="#6-配置坐标获取函数" class="headerlink" title="6. 配置坐标获取函数"></a>6. 配置坐标获取函数</h2><style>.jfpvwcfaycjo{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/6.png" class="jfpvwcfaycjo" alt="image-20250318140033233"><h1 id="五、为LVGL提供时基"><a href="#五、为LVGL提供时基" class="headerlink" title="五、为LVGL提供时基"></a>五、为LVGL提供时基</h1><h2 id="1-stm32f4xx-it-c文件中添加头文件"><a href="#1-stm32f4xx-it-c文件中添加头文件" class="headerlink" title="1. stm32f4xx_it.c文件中添加头文件"></a>1. <code>stm32f4xx_it.c</code>文件中添加头文件</h2><style>.lmhcnqwhegul{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/25.png" class="lmhcnqwhegul" alt="image-20250322142414771"><h2 id="2-调用lv-tick-inc-函数"><a href="#2-调用lv-tick-inc-函数" class="headerlink" title="2. 调用lv_tick_inc()函数"></a>2. 调用<code>lv_tick_inc()</code>函数</h2><p><code>x参数</code>为进入函数的时间，<strong>例如1ms发生一次中断，则x改为1</strong></p><style>.xvrafmbaxcwr{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/26.png" class="xvrafmbaxcwr" alt="QQ_1742624811806"><h1 id="六、main-函数部分移植"><a href="#六、main-函数部分移植" class="headerlink" title="六、main()函数部分移植"></a>六、main()函数部分移植</h1><h2 id="1-包含头文件"><a href="#1-包含头文件" class="headerlink" title="1. 包含头文件"></a>1. 包含头文件</h2><style>.ljjixqyvobhw{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/28.png" class="ljjixqyvobhw" alt="QQ_1742625782915"><h2 id="2-初始化LVGL库、输入输出设备"><a href="#2-初始化LVGL库、输入输出设备" class="headerlink" title="2. 初始化LVGL库、输入输出设备"></a>2. 初始化LVGL库、输入输出设备</h2><style>.cvxbuzyovvnz{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/27.png" class="cvxbuzyovvnz" alt="image-20250322144233357"><h2 id="3-每5ms调用一次lv-timer-hander"><a href="#3-每5ms调用一次lv-timer-hander" class="headerlink" title="3. 每5ms调用一次lv_timer_hander()"></a>3. 每5ms调用一次<code>lv_timer_hander()</code></h2><style>.rxbvrytfguki{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/35.png" class="rxbvrytfguki" alt="image-20250322165012000"><h2 id="4-调用测试代码"><a href="#4-调用测试代码" class="headerlink" title="4. 调用测试代码"></a>4. 调用测试代码</h2><style>.riscabiebcsn{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/37.png" class="riscabiebcsn" alt="image-20250322165048497"><h1 id="七、测试官方历程"><a href="#七、测试官方历程" class="headerlink" title="七、测试官方历程"></a>七、测试官方历程</h1><h2 id="1-将demos文件夹放入GUI-APP中"><a href="#1-将demos文件夹放入GUI-APP中" class="headerlink" title="1. 将demos文件夹放入GUI_APP中"></a>1. 将<code>demos</code>文件夹放入<code>GUI_AP</code>P中</h2><style>.jbbqxirinsgk{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/34.png" class="jbbqxirinsgk" alt="image-20250322164939645"><h2 id="2-添加头文件路径"><a href="#2-添加头文件路径" class="headerlink" title="2. 添加头文件路径"></a>2. 添加头文件路径</h2><style>.dbphlpwbxuws{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/29.png" class="dbphlpwbxuws" alt="QQ_1742632798292"><h2 id="3-将lv-conf-h文件，更改宏定义"><a href="#3-将lv-conf-h文件，更改宏定义" class="headerlink" title="3. 将lv_conf_h文件，更改宏定义"></a>3. 将lv_conf_h文件，更改宏定义</h2><style>.npbjygsvdjrw{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/31.png" class="npbjygsvdjrw" alt="image-20250322164639124"><h2 id="4-新建工程组"><a href="#4-新建工程组" class="headerlink" title="4. 新建工程组"></a>4. 新建工程组</h2><style>.vifhkqsfugpm{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/30.png" class="vifhkqsfugpm" alt="QQ_1742632928236"><h2 id="5-在main中添加头文件"><a href="#5-在main中添加头文件" class="headerlink" title="5. 在main中添加头文件"></a>5. 在main中添加头文件</h2><style>.iukmhjikontn{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/32.png" class="iukmhjikontn" alt="image-20250322164705613"><h2 id="6-调用测试函数"><a href="#6-调用测试函数" class="headerlink" title="6. 调用测试函数"></a>6. 调用测试函数</h2><style>.fylsnizzkomk{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/33.png" class="fylsnizzkomk" alt="image-20250322164737470"><h2 id="7-现象"><a href="#7-现象" class="headerlink" title="7. 现象"></a>7. 现象</h2><style>.kwaxspmozrqi{}</style><img src="/2025/03/24/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/36.JPG" class="kwaxspmozrqi" alt="IMG_5519">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、LVGL文件裁剪&quot;&gt;&lt;a href=&quot;#一、LVGL文件裁剪&quot; class=&quot;headerlink&quot; title=&quot;一、LVGL文件裁剪&quot;&gt;&lt;/a&gt;一、LVGL文件裁剪&lt;/h1&gt;&lt;h2 id=&quot;1-删除根目录下选中的文件&quot;&gt;&lt;a href=&quot;#1-删除根目录下</summary>
      
    
    
    
    <category term="LVGL" scheme="https://ydw-item.github.io.git/categories/LVGL/"/>
    
    
    <category term="LVGL" scheme="https://ydw-item.github.io.git/tags/LVGL/"/>
    
  </entry>
  
  <entry>
    <title>GIT</title>
    <link href="https://ydw-item.github.io.git/2025/03/21/GIT/"/>
    <id>https://ydw-item.github.io.git/2025/03/21/GIT/</id>
    <published>2025-03-20T16:18:30.000Z</published>
    <updated>2025-03-20T16:18:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://download.100ask.net/tools/Software/git/how_to_use_git.html">🛠Git简明教程 — 百问网资料下载中心 3.0 文档</a></p><h1 id="GIT下载代码"><a href="#GIT下载代码" class="headerlink" title="GIT下载代码"></a>GIT下载代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/No-Chicken/FryPi.git</span></span><br></pre></td></tr></table></figure><h1 id="一、下载GIT"><a href="#一、下载GIT" class="headerlink" title="一、下载GIT"></a>一、下载GIT</h1><h2 id="1-设置用户名和邮箱"><a href="#1-设置用户名和邮箱" class="headerlink" title="1. 设置用户名和邮箱"></a>1. 设置用户名和邮箱</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的名字&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>用户名和邮箱地址的作用 ？</p><p>用户名和邮箱地址是本地git客户端的一个变量，不随git库而改变。</p><p>每次<a href="https://so.csdn.net/so/search?q=commit&spm=1001.2101.3001.7020">commit</a>都会用用户名和邮箱纪录。</p><p><a href="https://so.csdn.net/so/search?q=github&spm=1001.2101.3001.7020">github</a>的contributions统计就是按邮箱来统计的。</p><h2 id="2-查看个人信息"><a href="#2-查看个人信息" class="headerlink" title="2. 查看个人信息"></a>2. 查看个人信息</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure><h2 id="3-生成公钥和私钥"><a href="#3-生成公钥和私钥" class="headerlink" title="3. 生成公钥和私钥"></a>3. 生成公钥和私钥</h2><p><img src="/1.png" alt="QQ_1742805478515"></p><h1 id="二、Sourcetree本地仓库设置"><a href="#二、Sourcetree本地仓库设置" class="headerlink" title="二、Sourcetree本地仓库设置"></a>二、Sourcetree本地仓库设置</h1><p><img src="/2.png" alt="QQ_1742896224882"></p><h2 id="2-1-初始化仓库-第一次需要"><a href="#2-1-初始化仓库-第一次需要" class="headerlink" title="2.1 初始化仓库(第一次需要)"></a>2.1 初始化仓库(第一次需要)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init #把当前目录变成git可以管理的仓库</span><br></pre></td></tr></table></figure><p><img src="/4.png" alt="image-20250325183008060"></p><h2 id="2-2-添加文件到暂存区-每次都要"><a href="#2-2-添加文件到暂存区-每次都要" class="headerlink" title="2.2 添加文件到暂存区(每次都要)"></a>2.2 添加文件到暂存区(每次都要)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add readme.txt #添加一个文件，也可以添加文件夹</span><br><span class="line">git add . #添加全部文件</span><br></pre></td></tr></table></figure><h2 id="2-3-提交到本地仓库-每次都要"><a href="#2-3-提交到本地仓库-每次都要" class="headerlink" title="2.3 提交到本地仓库(每次都要)"></a>2.3 提交到本地仓库(每次都要)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交说明&quot;</span>    #提交修改</span><br></pre></td></tr></table></figure><h2 id="2-4-创建远程仓库-第一次需要"><a href="#2-4-创建远程仓库-第一次需要" class="headerlink" title="2.4 创建远程仓库(第一次需要)"></a>2.4 创建远程仓库(第一次需要)</h2><p><img src="/3.png" alt="QQ_1742896961943"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@gitee.com:yaodaowen/sss.git</span><br></pre></td></tr></table></figure><h2 id="2-5-绑定远程仓库-第一次需要"><a href="#2-5-绑定远程仓库-第一次需要" class="headerlink" title="2.5 绑定远程仓库(第一次需要)"></a>2.5 绑定远程仓库(第一次需要)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitee.com:yaodaowen/sss.git(地址)</span><br><span class="line">#远程仓库的提交（第一次链接）</span><br></pre></td></tr></table></figure><h2 id="2-6-推送代码到远程仓库-每次都要"><a href="#2-6-推送代码到远程仓库-每次都要" class="headerlink" title="2.6 推送代码到远程仓库(每次都要)"></a>2.6 推送代码到远程仓库(每次都要)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin <span class="string">&quot;master&quot;</span>#第一次</span><br><span class="line">git push#第一次之后</span><br></pre></td></tr></table></figure><p><img src="/6.png" alt="image-20250325185422461"></p><h2 id="2-7-推送失败解决方案"><a href="#2-7-推送失败解决方案" class="headerlink" title="2.7 推送失败解决方案"></a>2.7 推送失败解决方案</h2><p><img src="/5.png" alt="image-20250325184408593"></p><p>远程仓库的 <code>master</code> 分支上有一些你本地没有的更新，需要先拉取远程仓库的更新</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><h1 id="三、其它"><a href="#三、其它" class="headerlink" title="三、其它"></a>三、其它</h1><h2 id="3-1-查看GIT个人信息"><a href="#3-1-查看GIT个人信息" class="headerlink" title="3.1 查看GIT个人信息"></a>3.1 查看GIT个人信息</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure><h2 id="3-2-查看仓库状态"><a href="#3-2-查看仓库状态" class="headerlink" title="3.2 查看仓库状态"></a>3.2 查看仓库状态</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status </span><br></pre></td></tr></table></figure><h2 id="3-3-查看仓库日记"><a href="#3-3-查看仓库日记" class="headerlink" title="3.3 查看仓库日记"></a>3.3 查看仓库日记</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> </span><br></pre></td></tr></table></figure><h2 id="3-4-查看当前配置有哪些远程仓库"><a href="#3-4-查看当前配置有哪些远程仓库" class="headerlink" title="3.4 查看当前配置有哪些远程仓库"></a>3.4 查看当前配置有哪些远程仓库</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">git init #把当前目录变成git可以管理的仓库</span><br><span class="line">git clone git地址 #克隆项目</span><br><span class="line">git add readme.txt #添加一个文件，也可以添加文件夹</span><br><span class="line">git add -A #添加全部文件</span><br><span class="line">git rm test.txt #删除一个文件，也可以删除文件夹</span><br><span class="line">git commit –m ‘提交说明’      #提交修改</span><br><span class="line">git status #查看是否还有未提交</span><br><span class="line">git <span class="built_in">log</span> #查看最近日志</span><br><span class="line">git reset --hard HEAD^ #版本回退一个版本</span><br><span class="line">git reset --hard HEAD^^ #版本回退两个版本</span><br><span class="line">git reset --hard HEAD~<span class="number">100</span> #版本回退多个版本</span><br><span class="line">git remote add origin +地址 #远程仓库的提交（第一次链接）</span><br><span class="line">git push -u origin master#仓库关联</span><br><span class="line">git push #远程仓库的提交（第二次及之后）</span><br><span class="line">git fetch #从远程获取代码库</span><br><span class="line">git tag xxx #打tag</span><br><span class="line">git tag #显示所有tag</span><br><span class="line">git push --tag #提交tag</span><br><span class="line">git branch -a #显示所有分支</span><br><span class="line">git checkout 分支名 #切换分支</span><br><span class="line">git merge git分支 #合并分支</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://download.100ask.net/tools/Software/git/how_to_use_git.html&quot;&gt;🛠Git简明教程 — 百问网资料下载中心 3.0 文档&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;GIT下载代码&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>OV-Watch-12-LCD</title>
    <link href="https://ydw-item.github.io.git/2025/03/12/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/12.OV-Watch_LCD/"/>
    <id>https://ydw-item.github.io.git/2025/03/12/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/12.OV-Watch_LCD/</id>
    <published>2025-03-12T08:28:30.000Z</published>
    <updated>2025-03-12T08:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、SPI"><a href="#一、SPI" class="headerlink" title="一、SPI"></a>一、SPI</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p><strong>SPI</strong>英文全称Serial Peripheral Interface，即串行外围设备接口，是一种高速、<strong>全双工</strong>、<strong>同步</strong>的<strong>串行</strong>通信总线。</p><h2 id="1-2-信号线"><a href="#1-2-信号线" class="headerlink" title="1.2 信号线"></a>1.2 信号线</h2><ul><li><strong>SCK</strong>（Serial Clock）：串行<strong>时钟线</strong>，由主设备产生，用于同步数据传输。</li><li><strong>MOSI</strong>（Master Output Slave Input）：<strong>主机输出</strong>从机输入线，主设备通过这条线发送数据给从设备。</li><li><strong>MISO</strong>（Master Input Slave Output）：<strong>主机输入</strong>从机输出线，主设备通过这条线接收从设备发送的数据。</li><li><strong>SS</strong>（Slave Select）：<strong>从机选择线</strong>（每个从机一根选择线），用于选择与主设备进行通信的从设备。通常情况下，SS线为低电平有效，即当SS线为低电平时，选中对应的从设备进行通信。</li></ul><p><img src="/5.png" alt="image-20250305140335105"></p><h2 id="1-3-开始与结束"><a href="#1-3-开始与结束" class="headerlink" title="1.3 开始与结束"></a>1.3 开始与结束</h2><p>当SS从高电平拉低到<strong>低电平</strong>，这个算是<strong>起始</strong>的一个时序。而SS从低电平拉高到<strong>高电平</strong>，就算是结束的时序。</p><p><img src="/1.png" alt="img"></p><h2 id="1-4-发送和接收字节"><a href="#1-4-发送和接收字节" class="headerlink" title="1.4 发送和接收字节"></a>1.4 发送和接收字节</h2><p>发送接收字节看似是两个时序，但是在SPI中却是<strong>同一个时序</strong>，因为SPI的机制是&#x3D;&#x3D;我们发送一个字节，并且接收一个字节&#x3D;&#x3D;（<strong>哪怕我们并不需要接收数据</strong>）。反过来看也可以是我们接收一个字节，并且发送一个字节（<strong>哪怕这个字节是无用的数据</strong>）。</p><p><img src="/6.png" alt="image-20250305140438435"></p><p><img src="/2.png" alt="img"></p><h2 id="交换bit"><a href="#交换bit" class="headerlink" title="交换bit"></a>交换bit</h2><p><img src="/3.png" alt="img"></p><p><strong>在SCK上升沿的时候，移出MOSI的数据，在SCK下降沿的时候读取MISO的数据。</strong></p><p><strong>需要在SCK上升沿之前把需要发送的数据位放置在MOSI线上</strong></p><p><strong>SCK下降沿的时候马上读取MISO线上的数据位</strong></p><p><strong>（实际上下降沿和读取应该是同时的，但是我们软件模拟没法同时，但是效果是一样的）</strong></p><h2 id="1-6-不同模式下的通信"><a href="#1-6-不同模式下的通信" class="headerlink" title="1.6 不同模式下的通信"></a>1.6 不同模式下的通信</h2><p><img src="/9.png" alt="image-20250305141745720"></p><p><img src="/10.png" alt="image-20250305141814533"></p><p><img src="/8.png" alt="image-20250305141718015"></p><p><img src="/7.png" alt="image-20250305141639698"></p><p><img src="/11.png" alt="image-20250305141859718"></p><p><img src="/12.png" alt="image-20250305142011451"></p><p><img src="/13.png" alt="image-20250305142031698"></p><h1 id="二、TFT-LCD"><a href="#二、TFT-LCD" class="headerlink" title="二、TFT-LCD"></a>二、TFT-LCD</h1><p><img src="/image-20250305142759302.png" alt="image-20250305142759302"></p><table><thead><tr><th>引脚</th><th>功能</th></tr></thead><tbody><tr><td>GND</td><td>接地</td></tr><tr><td>VCC</td><td>供电（3.3V-5V）</td></tr><tr><td>TP_INT</td><td>接3v3上拉，</td></tr><tr><td>TP_SDA</td><td>TP触摸芯片数据引脚</td></tr><tr><td>TP_SCL</td><td>TP触摸芯片时钟引脚</td></tr><tr><td>LCD_RST</td><td>低电平TFT复位</td></tr><tr><td>LCD_MOSI</td><td>数据输入引脚</td></tr><tr><td>LCD_CLK</td><td>LCD时钟引脚</td></tr><tr><td>LCD_CS</td><td>片选信号，低电平使能</td></tr><tr><td>LCD_DC</td><td>区分接受的是数据还是命令（低电平命令，高电平数据）</td></tr><tr><td>LCD_BLK</td><td>背光（可常接3.3V）</td></tr></tbody></table><h2 id="HAL-SPI-Transmit"><a href="#HAL-SPI-Transmit" class="headerlink" title="HAL_SPI_Transmit()"></a>HAL_SPI_Transmit()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_SPI_Transmit</span><span class="params">(SPI_HandleTypeDef *hspi, <span class="type">uint8_t</span> *pData, <span class="type">uint16_t</span> Size, <span class="type">uint32_t</span> Timeout)</span></span><br></pre></td></tr></table></figure><p>**<code>SPI_HandleTypeDef \*hspi</code>**：</p><ul><li>指向 <strong>SPI 句柄</strong> 的指针。这个句柄包含了关于 SPI 外设的配置信息，必须在使用之前通过 <code>HAL_SPI_Init()</code> 初始化。</li></ul><p>**<code>uint8_t \*pData</code>**：</p><ul><li>指向要发送的数据的指针。<code>pData</code> 是一个数据缓冲区，包含要通过 SPI 发送的数据。数据以字节的形式存储。</li></ul><p>**<code>uint16_t Size</code>**：</p><ul><li>发送数据的大小，以字节为单位。<code>Size</code> 表示要发送的字节数。</li></ul><p>**<code>uint32_t Timeout</code>**：</p><ul><li>传输操作的超时时间，以毫秒为单位。如果在指定的时间内传输未完成，函数将返回超时错误。</li></ul><h2 id="LCD-GPIO-Init"><a href="#LCD-GPIO-Init" class="headerlink" title="LCD_GPIO_Init()"></a>LCD_GPIO_Init()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef  GPIO_InitStructure = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">__HAL_RCC_GPIOC_CLK_ENABLE();</span><br><span class="line"> __HAL_RCC_GPIOB_CLK_ENABLE();</span><br><span class="line">__HAL_RCC_GPIOD_CLK_ENABLE();</span><br><span class="line">__HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.Pin = BLK_PIN; </span><br><span class="line"> GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;  <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;<span class="comment">//速度50MHz</span></span><br><span class="line"> HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStructure);  <span class="comment">//初始化GPIOA</span></span><br><span class="line"> HAL_GPIO_WritePin(GPIOA, BLK_PIN, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.Pin = RES_PIN; </span><br><span class="line"> GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;  <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;<span class="comment">//速度50MHz</span></span><br><span class="line"> HAL_GPIO_Init(GPIOB, &amp;GPIO_InitStructure);  <span class="comment">//初始化GPIOB</span></span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, RES_PIN, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.Pin = DC_PIN; </span><br><span class="line"> GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;  <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;<span class="comment">//速度50MHz</span></span><br><span class="line"> HAL_GPIO_Init(GPIOC, &amp;GPIO_InitStructure);  <span class="comment">//初始化GPIOC</span></span><br><span class="line"> HAL_GPIO_WritePin(GPIOC, DC_PIN, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.Pin = CS_PIN; </span><br><span class="line"> GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;  <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;<span class="comment">//速度50MHz</span></span><br><span class="line"> HAL_GPIO_Init(GPIOD, &amp;GPIO_InitStructure);  <span class="comment">//初始化GPIOD</span></span><br><span class="line"> HAL_GPIO_WritePin(GPIOD, CS_PIN, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写一个字节数据-LCD-Writ-Bus"><a href="#写一个字节数据-LCD-Writ-Bus" class="headerlink" title="写一个字节数据 LCD_Writ_Bus()"></a>写一个字节数据 LCD_Writ_Bus()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_Writ_Bus</span><span class="params">(u8 dat)</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//hard SPI</span></span><br><span class="line">HAL_SPI_Transmit(&amp;hspi1,&amp;dat,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//soft SPI</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">u8 i;</span></span><br><span class="line"><span class="comment">for(i=0;i&lt;8;i++)</span></span><br><span class="line"><span class="comment">&#123;  </span></span><br><span class="line"><span class="comment">LCD_SCLK_Clr();</span></span><br><span class="line"><span class="comment">if(dat&amp;0x80)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">   LCD_MOSI_Set();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">   LCD_MOSI_Clr();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">LCD_SCLK_Set();</span></span><br><span class="line"><span class="comment">dat&lt;&lt;=1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写两个字节数据-LCD-WR-DATA"><a href="#写两个字节数据-LCD-WR-DATA" class="headerlink" title="写两个字节数据 LCD_WR_DATA()"></a>写两个字节数据 LCD_WR_DATA()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_WR_DATA</span><span class="params">(u16 dat)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//LCD_Writ_Bus(dat&gt;&gt;8);</span></span><br><span class="line"><span class="comment">//LCD_Writ_Bus(dat);</span></span><br><span class="line"><span class="type">uint8_t</span> temp[<span class="number">2</span>];</span><br><span class="line">temp[<span class="number">0</span>]=(dat&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>;</span><br><span class="line">temp[<span class="number">1</span>]=dat&amp;<span class="number">0xff</span>;</span><br><span class="line">HAL_SPI_Transmit(&amp;hspi1,temp,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写命令-LCD-WR-REG"><a href="#写命令-LCD-WR-REG" class="headerlink" title="写命令 LCD_WR_REG()"></a>写命令 LCD_WR_REG()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_WR_REG</span><span class="params">(u8 dat)</span></span><br><span class="line">&#123;</span><br><span class="line">LCD_DC_Clr();<span class="comment">//写命令</span></span><br><span class="line">LCD_Writ_Bus(dat);</span><br><span class="line">LCD_DC_Set();<span class="comment">//写数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置起始和初始地址-LCD-Address-Set"><a href="#设置起始和初始地址-LCD-Address-Set" class="headerlink" title="设置起始和初始地址 LCD_Address_Set()"></a>设置起始和初始地址 LCD_Address_Set()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_Address_Set</span><span class="params">(u16 x1,u16 y1,u16 x2,u16 y2)</span></span><br><span class="line">&#123;</span><br><span class="line">LCD_WR_REG(<span class="number">0x2a</span>);<span class="comment">//列地址设置</span></span><br><span class="line">LCD_WR_DATA(x1);</span><br><span class="line">LCD_WR_DATA(x2);</span><br><span class="line">LCD_WR_REG(<span class="number">0x2b</span>);<span class="comment">//行地址设置</span></span><br><span class="line">LCD_WR_DATA(y1);</span><br><span class="line">LCD_WR_DATA(y2);</span><br><span class="line">LCD_WR_REG(<span class="number">0x2c</span>);<span class="comment">//储存器写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>设置显示区域</strong>：该函数通过设置列地址和行地址，定义了一个矩形区域 <code>(x1, y1)</code> 到 <code>(x2, y2)</code>，然后准备向该区域写入图像数据或颜色。</p><p><strong>显示区域绘制</strong>：在调用 <code>LCD_Address_Set()</code> 后，LCD 屏幕的指定区域就被设置好了，之后可以通过其他函数（例如 <code>LCD_WriteColor()</code> 或类似的函数）向该区域写入具体的颜色或图像数据，从而实现绘制操作。</p><h1 id="LCD常用函数"><a href="#LCD常用函数" class="headerlink" title="LCD常用函数"></a>LCD常用函数</h1><h2 id="1-LCD-Fill-区域颜色填充"><a href="#1-LCD-Fill-区域颜色填充" class="headerlink" title="1.LCD_Fill()区域颜色填充"></a>1.LCD_Fill()区域颜色填充</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_Fill</span><span class="params">(u16 xsta,u16 ysta,u16 xend,u16 yend,u16 color)</span></span><br><span class="line">&#123;          </span><br><span class="line">u16 i,j; </span><br><span class="line">LCD_Address_Set(xsta+OFFSET_X,ysta+OFFSET_Y,xend+OFFSET_X<span class="number">-1</span>,yend<span class="number">-1</span>+OFFSET_Y);<span class="comment">//设置显示范围</span></span><br><span class="line"><span class="keyword">for</span>(i=ysta;i&lt;yend;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=xsta;j&lt;xend;j++)</span><br><span class="line">&#123;</span><br><span class="line">LCD_WR_DATA(color);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-指定位置画点LCD-DrawPoint"><a href="#2-指定位置画点LCD-DrawPoint" class="headerlink" title="2.指定位置画点LCD_DrawPoint()"></a>2.指定位置画点LCD_DrawPoint()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_DrawPoint</span><span class="params">(u16 x,u16 y,u16 color)</span></span><br><span class="line">&#123;</span><br><span class="line">LCD_Address_Set(x,y,x,y);<span class="comment">//设置光标位置 </span></span><br><span class="line">LCD_WR_DATA(color);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="3-画线LCD-DrawLine"><a href="#3-画线LCD-DrawLine" class="headerlink" title="3.画线LCD_DrawLine()"></a>3.画线LCD_DrawLine()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_DrawLine</span><span class="params">(u16 x1,u16 y1,u16 x2,u16 y2,u16 color)</span></span><br><span class="line">&#123;</span><br><span class="line">u16 t; </span><br><span class="line"><span class="type">int</span> xerr=<span class="number">0</span>,yerr=<span class="number">0</span>,delta_x,delta_y,distance;</span><br><span class="line"><span class="type">int</span> incx,incy,uRow,uCol;</span><br><span class="line">delta_x=x2-x1; <span class="comment">//计算坐标增量 </span></span><br><span class="line">delta_y=y2-y1;</span><br><span class="line">uRow=x1;<span class="comment">//画线起点坐标</span></span><br><span class="line">uCol=y1;</span><br><span class="line"><span class="keyword">if</span>(delta_x&gt;<span class="number">0</span>)incx=<span class="number">1</span>; <span class="comment">//设置单步方向 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (delta_x==<span class="number">0</span>)incx=<span class="number">0</span>;<span class="comment">//垂直线 </span></span><br><span class="line"><span class="keyword">else</span> &#123;incx=<span class="number">-1</span>;delta_x=-delta_x;&#125;</span><br><span class="line"><span class="keyword">if</span>(delta_y&gt;<span class="number">0</span>)incy=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (delta_y==<span class="number">0</span>)incy=<span class="number">0</span>;<span class="comment">//水平线 </span></span><br><span class="line"><span class="keyword">else</span> &#123;incy=<span class="number">-1</span>;delta_y=-delta_y;&#125;</span><br><span class="line"><span class="keyword">if</span>(delta_x&gt;delta_y)distance=delta_x; <span class="comment">//选取基本增量坐标轴 </span></span><br><span class="line"><span class="keyword">else</span> distance=delta_y;</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;distance+<span class="number">1</span>;t++)</span><br><span class="line">&#123;</span><br><span class="line">LCD_DrawPoint(uRow,uCol,color);<span class="comment">//画点</span></span><br><span class="line">xerr+=delta_x;</span><br><span class="line">yerr+=delta_y;</span><br><span class="line"><span class="keyword">if</span>(xerr&gt;distance)</span><br><span class="line">&#123;</span><br><span class="line">xerr-=distance;</span><br><span class="line">uRow+=incx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(yerr&gt;distance)</span><br><span class="line">&#123;</span><br><span class="line">yerr-=distance;</span><br><span class="line">uCol+=incy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-画矩形LCD-DrawRectangle"><a href="#4-画矩形LCD-DrawRectangle" class="headerlink" title="4.画矩形LCD_DrawRectangle()"></a>4.画矩形LCD_DrawRectangle()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_DrawRectangle</span><span class="params">(u16 x1, u16 y1, u16 x2, u16 y2,u16 color)</span></span><br><span class="line">&#123;</span><br><span class="line">LCD_DrawLine(x1,y1,x2,y1,color);</span><br><span class="line">LCD_DrawLine(x1,y1,x1,y2,color);</span><br><span class="line">LCD_DrawLine(x1,y2,x2,y2,color);</span><br><span class="line">LCD_DrawLine(x2,y1,x2,y2,color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-画圆Draw-Circle"><a href="#5-画圆Draw-Circle" class="headerlink" title="5.画圆Draw_Circle()"></a>5.画圆Draw_Circle()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Draw_Circle</span><span class="params">(u16 x0,u16 y0,u8 r,u16 color)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">a=<span class="number">0</span>;b=r;  </span><br><span class="line"><span class="keyword">while</span>(a&lt;=b)</span><br><span class="line">&#123;</span><br><span class="line">LCD_DrawPoint(x0-b,y0-a,color);             <span class="comment">//3           </span></span><br><span class="line">LCD_DrawPoint(x0+b,y0-a,color);             <span class="comment">//0           </span></span><br><span class="line">LCD_DrawPoint(x0-a,y0+b,color);             <span class="comment">//1                </span></span><br><span class="line">LCD_DrawPoint(x0-a,y0-b,color);             <span class="comment">//2             </span></span><br><span class="line">LCD_DrawPoint(x0+b,y0+a,color);             <span class="comment">//4               </span></span><br><span class="line">LCD_DrawPoint(x0+a,y0-b,color);             <span class="comment">//5</span></span><br><span class="line">LCD_DrawPoint(x0+a,y0+b,color);             <span class="comment">//6 </span></span><br><span class="line">LCD_DrawPoint(x0-b,y0+a,color);             <span class="comment">//7</span></span><br><span class="line">a++;</span><br><span class="line"><span class="keyword">if</span>((a*a+b*b)&gt;(r*r))<span class="comment">//判断要画的点是否过远</span></span><br><span class="line">&#123;</span><br><span class="line">b--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-写汉字LCD-ShowChinese"><a href="#6-写汉字LCD-ShowChinese" class="headerlink" title="6.写汉字LCD_ShowChinese()"></a>6.写汉字LCD_ShowChinese()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_ShowChinese</span><span class="params">(u16 x,u16 y,u8 *s,u16 fc,u16 bc,u8 sizey,u8 mode)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(*s!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sizey==<span class="number">12</span>) LCD_ShowChinese12x12(x,y,s,fc,bc,sizey,mode);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sizey==<span class="number">16</span>) LCD_ShowChinese16x16(x,y,s,fc,bc,sizey,mode);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sizey==<span class="number">24</span>) LCD_ShowChinese24x24(x,y,s,fc,bc,sizey,mode);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sizey==<span class="number">32</span>) LCD_ShowChinese32x32(x,y,s,fc,bc,sizey,mode);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">s+=<span class="number">2</span>;</span><br><span class="line">x+=sizey;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   入口数据：x,y显示坐标</p><p>​        *s 要显示的汉字串</p><p>​        fc 字的颜色</p><p>​        bc 字的背景色</p><p>​        sizey 字号 可选 16 24 32</p><p>​        mode:  0非叠加模式  1叠加模式</p><h2 id="7-显示单个字符LCD-ShowChar"><a href="#7-显示单个字符LCD-ShowChar" class="headerlink" title="7.显示单个字符LCD_ShowChar()"></a>7.显示单个字符LCD_ShowChar()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_ShowChar</span><span class="params">(u16 x,u16 y,u8 num,u16 fc,u16 bc,u8 sizey,u8 mode)</span></span><br><span class="line">&#123;</span><br><span class="line">u8 temp,sizex,t,m=<span class="number">0</span>;</span><br><span class="line">u16 i,TypefaceNum;<span class="comment">//一个字符所占字节大小</span></span><br><span class="line">u16 x0=x;</span><br><span class="line">sizex=sizey/<span class="number">2</span>;</span><br><span class="line">TypefaceNum=(sizex/<span class="number">8</span>+((sizex%<span class="number">8</span>)?<span class="number">1</span>:<span class="number">0</span>))*sizey;</span><br><span class="line">num=num-<span class="string">&#x27; &#x27;</span>;    <span class="comment">//得到偏移后的值</span></span><br><span class="line">LCD_Address_Set(x,y,x+sizex<span class="number">-1</span>,y+sizey<span class="number">-1</span>);  <span class="comment">//设置光标位置 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;TypefaceNum;i++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span>(sizey==<span class="number">12</span>)temp=ascii_1206[num][i];       <span class="comment">//调用6x12字体</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sizey==<span class="number">16</span>)temp=ascii_1608[num][i]; <span class="comment">//调用8x16字体</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sizey==<span class="number">24</span>)temp=ascii_2412[num][i]; <span class="comment">//调用12x24字体</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sizey==<span class="number">32</span>)temp=ascii_3216[num][i]; <span class="comment">//调用16x32字体</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;<span class="number">8</span>;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!mode)<span class="comment">//非叠加模式</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp&amp;(<span class="number">0x01</span>&lt;&lt;t))LCD_WR_DATA(fc);</span><br><span class="line"><span class="keyword">else</span> LCD_WR_DATA(bc);</span><br><span class="line">m++;</span><br><span class="line"><span class="keyword">if</span>(m%sizex==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">m=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//叠加模式</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp&amp;(<span class="number">0x01</span>&lt;&lt;t))LCD_DrawPoint(x,y,fc);<span class="comment">//画一个点</span></span><br><span class="line">x++;</span><br><span class="line"><span class="keyword">if</span>((x-x0)==sizex)</span><br><span class="line">&#123;</span><br><span class="line">x=x0;</span><br><span class="line">y++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-显示字符串LCD-ShowString"><a href="#8-显示字符串LCD-ShowString" class="headerlink" title="8.显示字符串LCD_ShowString()"></a>8.显示字符串LCD_ShowString()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_ShowString</span><span class="params">(u16 x,u16 y,<span class="type">const</span> u8 *p,u16 fc,u16 bc,u8 sizey,u8 mode)</span></span><br><span class="line">&#123;         </span><br><span class="line"><span class="keyword">while</span>(*p!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;       </span><br><span class="line">LCD_ShowChar(x,y,*p,fc,bc,sizey,mode);</span><br><span class="line">x+=sizey/<span class="number">2</span>;</span><br><span class="line">p++;</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-显示数字mypow"><a href="#9-显示数字mypow" class="headerlink" title="9.显示数字mypow()"></a>9.显示数字mypow()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">u32 <span class="title function_">mypow</span><span class="params">(u8 m,u8 n)</span></span><br><span class="line">&#123;</span><br><span class="line">u32 result=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">while</span>(n--)result*=m;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-显示整数变量LCD-ShowIntNum"><a href="#10-显示整数变量LCD-ShowIntNum" class="headerlink" title="10.显示整数变量LCD_ShowIntNum()"></a>10.显示整数变量LCD_ShowIntNum()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_ShowIntNum</span><span class="params">(u16 x,u16 y,u16 num,u8 len,u16 fc,u16 bc,u8 sizey)</span></span><br><span class="line">&#123;         </span><br><span class="line">u8 t,temp;</span><br><span class="line">u8 enshow=<span class="number">0</span>;</span><br><span class="line">u8 sizex=sizey/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)</span><br><span class="line">&#123;</span><br><span class="line">temp=(num/mypow(<span class="number">10</span>,len-t<span class="number">-1</span>))%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(enshow==<span class="number">0</span>&amp;&amp;t&lt;(len<span class="number">-1</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LCD_ShowChar(x+t*sizex,y,<span class="string">&#x27; &#x27;</span>,fc,bc,sizey,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> enshow=<span class="number">1</span>; </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"> LCD_ShowChar(x+t*sizex,y,temp+<span class="number">48</span>,fc,bc,sizey,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="11-显示两位小数变量LCD-ShowFloatNum1"><a href="#11-显示两位小数变量LCD-ShowFloatNum1" class="headerlink" title="11.显示两位小数变量LCD_ShowFloatNum1()"></a>11.显示两位小数变量LCD_ShowFloatNum1()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_ShowFloatNum1</span><span class="params">(u16 x,u16 y,<span class="type">float</span> num,u8 len,u16 fc,u16 bc,u8 sizey)</span></span><br><span class="line">&#123;         </span><br><span class="line">u8 t,temp,sizex;</span><br><span class="line">u16 num1;</span><br><span class="line">sizex=sizey/<span class="number">2</span>;</span><br><span class="line">num1=num*<span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)</span><br><span class="line">&#123;</span><br><span class="line">temp=(num1/mypow(<span class="number">10</span>,len-t<span class="number">-1</span>))%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(t==(len<span class="number">-2</span>))</span><br><span class="line">&#123;</span><br><span class="line">LCD_ShowChar(x+(len<span class="number">-2</span>)*sizex,y,<span class="string">&#x27;.&#x27;</span>,fc,bc,sizey,<span class="number">0</span>);</span><br><span class="line">t++;</span><br><span class="line">len+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> LCD_ShowChar(x+t*sizex,y,temp+<span class="number">48</span>,fc,bc,sizey,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-显示图片LCD-ShowPicture"><a href="#12-显示图片LCD-ShowPicture" class="headerlink" title="12.显示图片LCD_ShowPicture()"></a>12.显示图片LCD_ShowPicture()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_ShowPicture</span><span class="params">(u16 x,u16 y,u16 length,u16 width,<span class="type">const</span> u8 pic[])</span></span><br><span class="line">&#123;</span><br><span class="line">u16 i,j;</span><br><span class="line">u32 k=<span class="number">0</span>;</span><br><span class="line">LCD_Address_Set(x,y,x+length<span class="number">-1</span>,y+width<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;width;j++)</span><br><span class="line">&#123;</span><br><span class="line">LCD_WR_DATA8(pic[k*<span class="number">2</span>]);</span><br><span class="line">LCD_WR_DATA8(pic[k*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、SPI&quot;&gt;&lt;a href=&quot;#一、SPI&quot; class=&quot;headerlink&quot; title=&quot;一、SPI&quot;&gt;&lt;/a&gt;一、SPI&lt;/h1&gt;&lt;h2 id=&quot;1-1-简介&quot;&gt;&lt;a href=&quot;#1-1-简介&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/"/>
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/tags/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/tags/OV-Watch/"/>
    
  </entry>
  
  <entry>
    <title>OV-Watch-11-CST816</title>
    <link href="https://ydw-item.github.io.git/2025/03/11/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/11.OV-Watch_CST816/"/>
    <id>https://ydw-item.github.io.git/2025/03/11/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/11.OV-Watch_CST816/</id>
    <published>2025-03-11T08:28:30.000Z</published>
    <updated>2025-03-11T08:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、硬件选型和原理图"><a href="#一、硬件选型和原理图" class="headerlink" title="一、硬件选型和原理图"></a>一、硬件选型和原理图</h1><p><a href="https://blog.csdn.net/m0_60313295/article/details/144648171?ops_request_misc=&request_id=&biz_id=102&utm_term=CST816&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-144648171.142%5Ev101%5Epc_search_result_base5&spm=1018.2226.3001.4187">【模块系列】STM32&amp;1.69TFT屏幕_cst816t-CSDN博客</a></p><p><img src="/1.png" alt="image-20250302143612984"></p><p><img src="/1.png" alt="image-20250302143612984"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、硬件选型和原理图&quot;&gt;&lt;a href=&quot;#一、硬件选型和原理图&quot; class=&quot;headerlink&quot; title=&quot;一、硬件选型和原理图&quot;&gt;&lt;/a&gt;一、硬件选型和原理图&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/m0_6031</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/"/>
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/tags/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/tags/OV-Watch/"/>
    
  </entry>
  
</feed>
