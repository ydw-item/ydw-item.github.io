<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The personal blog of 洒水水</title>
  
  <subtitle>姚道文</subtitle>
  <link href="https://ydw-item.github.io.git/atom.xml" rel="self"/>
  
  <link href="https://ydw-item.github.io.git/"/>
  <updated>2025-03-20T16:18:30.000Z</updated>
  <id>https://ydw-item.github.io.git/</id>
  
  <author>
    <name>洒水水</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GIT</title>
    <link href="https://ydw-item.github.io.git/2025/03/21/git/"/>
    <id>https://ydw-item.github.io.git/2025/03/21/git/</id>
    <published>2025-03-20T16:18:30.000Z</published>
    <updated>2025-03-20T16:18:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://download.100ask.net/tools/Software/git/how_to_use_git.html">🛠Git简明教程 — 百问网资料下载中心 3.0 文档</a></p><h1 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://download.100ask.net/tools/Software/git/how_to_use_git.html&quot;&gt;🛠Git简明教程 — 百问网资料下载中心 3.0 文档&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;一、&quot;&gt;&lt;a href=&quot;#一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LVGL移植</title>
    <link href="https://ydw-item.github.io.git/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/"/>
    <id>https://ydw-item.github.io.git/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/</id>
    <published>2025-03-18T08:24:19.000Z</published>
    <updated>2025-03-18T08:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、LVGL文件裁剪"><a href="#一、LVGL文件裁剪" class="headerlink" title="一、LVGL文件裁剪"></a>一、LVGL文件裁剪</h1><h2 id="1-删除根目录下选中的文件"><a href="#1-删除根目录下选中的文件" class="headerlink" title="1. 删除根目录下选中的文件"></a>1. <strong>删除根目录下选中的文件</strong></h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/9.png" alt="image-20250322102550494"></p><p><strong>删除后</strong></p><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/10.png" alt="image-20250322102710756"></p><h2 id="2-裁剪examples文件夹"><a href="#2-裁剪examples文件夹" class="headerlink" title="2. 裁剪examples文件夹"></a>2. 裁剪examples文件夹</h2><ul><li>删除<code>porting</code>中输入输出相关的接口文件，其它全部删除</li></ul><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/11.png" alt="QQ_1742610639413"></p><h2 id="3-修改lvgl配置文件文件名"><a href="#3-修改lvgl配置文件文件名" class="headerlink" title="3. 修改lvgl配置文件文件名"></a>3. 修改lvgl配置文件文件名</h2><p>将根目录下的<code>lv_conf_template.h</code>文件名修改为<code>lv_conf.h</code></p><h2 id="4-最终文件"><a href="#4-最终文件" class="headerlink" title="4. 最终文件"></a>4. 最终文件</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/12.png" alt="image-20250322104307792"></p><ul><li><code>demos</code>文件夹中保存的是官方历程，可以删除</li></ul><h2 id="5-修改lv-conf-h"><a href="#5-修改lv-conf-h" class="headerlink" title="5. 修改lv_conf.h"></a>5. 修改lv_conf.h</h2><ul><li>将<code>#if 0</code>修改为<code>#if 1</code></li></ul><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/14.png" alt="image-20250322110212708"></p><h1 id="二、工程目录"><a href="#二、工程目录" class="headerlink" title="二、工程目录"></a>二、工程目录</h1><h2 id="1-移植裁剪后的lvgl"><a href="#1-移植裁剪后的lvgl" class="headerlink" title="1. 移植裁剪后的lvgl"></a>1. 移植裁剪后的lvgl</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/13.png" alt="image-20250322110141115"></p><p><strong>不按次结构，有些头文件的引用可能会报错</strong></p><h2 id="2-添加文件进工程"><a href="#2-添加文件进工程" class="headerlink" title="2.添加文件进工程"></a>2.添加文件进工程</h2><h3 id="1-添加分组"><a href="#1-添加分组" class="headerlink" title="(1) 添加分组"></a>(1) 添加分组</h3><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/15.png" alt="image-20250322114144151"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Middlewares/lvgl/example/porting</span><br><span class="line">Middlewares/lvgl/src/core</span><br><span class="line">Middlewares/lvgl/src/core    </span><br><span class="line">Middlewares/lvgl/src/extra</span><br><span class="line">Middlewares/lvgl/src/font</span><br><span class="line">Middlewares/lvgl/src/gpu</span><br><span class="line">Middlewares/lvgl/src/hal</span><br><span class="line">Middlewares/lvgl/src/widgets</span><br></pre></td></tr></table></figure><h3 id="2-为什么要这样分组"><a href="#2-为什么要这样分组" class="headerlink" title="(2) 为什么要这样分组"></a>(2) 为什么要这样分组</h3><p>因为这样分组和LVGL的结构是相同的</p><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/16.png" alt="image-20250322114311900"></p><h3 id="3-为分组添加文件"><a href="#3-为分组添加文件" class="headerlink" title="(3) 为分组添加文件"></a>(3) 为分组添加文件</h3><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/17.png" alt="image-20250322111729503"></p><h3 id="4-添加头文件路径"><a href="#4-添加头文件路径" class="headerlink" title="(4) 添加头文件路径"></a>(4) 添加头文件路径</h3><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/19.png" alt="QQ_1742618216223"></p><h3 id="5-开启C99模式"><a href="#5-开启C99模式" class="headerlink" title="(5) 开启C99模式"></a>(5) 开启C99模式</h3><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/18.png" alt="QQ_1742615627487"></p><h1 id="三、配置输出"><a href="#三、配置输出" class="headerlink" title="三、配置输出"></a>三、配置输出</h1><h2 id="1-修改头文件"><a href="#1-修改头文件" class="headerlink" title="1. 修改头文件"></a>1. 修改头文件</h2><p><code>lvgl\examples\porting</code>路径下的<code>lv_port_disp_template.c/h</code>是官方提供的显示接口函数</p><p>使用前需要将<code>#if 0</code> 改为<code>#if 1</code></p><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/20.png" alt="image-20250322125754825"></p><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/21.png" alt="image-20250322125858697"></p><h2 id="2-包含输出设备驱动头文件"><a href="#2-包含输出设备驱动头文件" class="headerlink" title="2. 包含输出设备驱动头文件"></a>2. 包含输出设备驱动头文件</h2><h2 id="3-在disp-init-中调用LCD初始化代码"><a href="#3-在disp-init-中调用LCD初始化代码" class="headerlink" title="3. 在disp_init()中调用LCD初始化代码"></a>3. 在disp_init()中调用LCD初始化代码</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/2.png" alt="image-20250322131803479"></p><h2 id="4-配置图形数据缓冲模式"><a href="#4-配置图形数据缓冲模式" class="headerlink" title="4. 配置图形数据缓冲模式"></a>4. 配置图形数据缓冲模式</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/23.png" alt="image-20250322132844255"></p><h2 id="5-设置屏幕尺寸"><a href="#5-设置屏幕尺寸" class="headerlink" title="5. 设置屏幕尺寸"></a>5. 设置屏幕尺寸</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/24.png" alt="image-20250322133003409"></p><h2 id="6-在disp-flush中使用自己的打点函数"><a href="#6-在disp-flush中使用自己的打点函数" class="headerlink" title="6. 在disp_flush中使用自己的打点函数"></a>6. 在disp_flush中使用自己的打点函数</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/1.png" alt="image-20250318133644412"></p><h1 id="四、配置输入"><a href="#四、配置输入" class="headerlink" title="四、配置输入"></a>四、配置输入</h1><p><code>lvgl\examples\porting</code>路径下的<code>lv_port_indev_template.c/h</code>是官方提供的显示接口函数</p><p>使用前需要将<code>#if 0</code> 改为<code>#if 1</code></p><h2 id="1-在touchpad-init-中调用LCD初始化代码"><a href="#1-在touchpad-init-中调用LCD初始化代码" class="headerlink" title="1. 在touchpad_init()中调用LCD初始化代码"></a>1. 在touchpad_init()中调用LCD初始化代码</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/3.png" alt="image-20250318134537406"></p><h2 id="2-按需裁剪输入设备"><a href="#2-按需裁剪输入设备" class="headerlink" title="2. 按需裁剪输入设备"></a>2. 按需裁剪输入设备</h2><p><strong>删除<code>lv_port_indev_template.c/h</code>中未使用的部分，只保留使用到的部分</strong></p><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/4.png" alt="QQ_1742277146705"></p><h2 id="2-触摸检测函数配置"><a href="#2-触摸检测函数配置" class="headerlink" title="2. 触摸检测函数配置"></a>2. 触摸检测函数配置</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/5.png" alt="image-20250318135936403"></p><h2 id="3-配置坐标获取函数"><a href="#3-配置坐标获取函数" class="headerlink" title="3. 配置坐标获取函数"></a>3. 配置坐标获取函数</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/6.png" alt="image-20250318140033233"></p><h1 id="五、为LVGL提供时基"><a href="#五、为LVGL提供时基" class="headerlink" title="五、为LVGL提供时基"></a>五、为LVGL提供时基</h1><h2 id="1-stm32f4xx-it-c文件中添加头文件"><a href="#1-stm32f4xx-it-c文件中添加头文件" class="headerlink" title="1. stm32f4xx_it.c文件中添加头文件"></a>1. <code>stm32f4xx_it.c</code>文件中添加头文件</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/25.png" alt="image-20250322142414771"></p><h2 id="2-调用lv-tick-inc-函数"><a href="#2-调用lv-tick-inc-函数" class="headerlink" title="2. 调用lv_tick_inc()函数"></a>2. 调用<code>lv_tick_inc()</code>函数</h2><p><code>x参数</code>为进入函数的时间，<strong>例如1ms发生一次中断，则x改为1</strong></p><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/26.png" alt="QQ_1742624811806"></p><h1 id="六、main-函数部分移植"><a href="#六、main-函数部分移植" class="headerlink" title="六、main()函数部分移植"></a>六、main()函数部分移植</h1><h2 id="1-包含头文件"><a href="#1-包含头文件" class="headerlink" title="1. 包含头文件"></a>1. 包含头文件</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/28.png" alt="QQ_1742625782915"></p><h2 id="2-初始化LVGL库、输入输出设备"><a href="#2-初始化LVGL库、输入输出设备" class="headerlink" title="2. 初始化LVGL库、输入输出设备"></a>2. 初始化LVGL库、输入输出设备</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/27.png" alt="image-20250322144233357"></p><h2 id="3-每5ms调用一次lv-timer-hander"><a href="#3-每5ms调用一次lv-timer-hander" class="headerlink" title="3. 每5ms调用一次lv_timer_hander()"></a>3. 每5ms调用一次<code>lv_timer_hander()</code></h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/35.png" alt="image-20250322165012000"></p><h2 id="4-调用测试代码"><a href="#4-调用测试代码" class="headerlink" title="4. 调用测试代码"></a>4. 调用测试代码</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/37.png" alt="image-20250322165048497"></p><h1 id="七、测试官方历程"><a href="#七、测试官方历程" class="headerlink" title="七、测试官方历程"></a>七、测试官方历程</h1><h2 id="1-将demos文件夹放入GUI-APP中"><a href="#1-将demos文件夹放入GUI-APP中" class="headerlink" title="1. 将demos文件夹放入GUI_APP中"></a>1. 将<code>demos</code>文件夹放入<code>GUI_AP</code>P中</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/34.png" alt="image-20250322164939645"></p><h2 id="2-添加头文件路径"><a href="#2-添加头文件路径" class="headerlink" title="2. 添加头文件路径"></a>2. 添加头文件路径</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/29.png" alt="QQ_1742632798292"></p><h2 id="3-将lv-conf-h文件，更改宏定义"><a href="#3-将lv-conf-h文件，更改宏定义" class="headerlink" title="3. 将lv_conf_h文件，更改宏定义"></a>3. 将lv_conf_h文件，更改宏定义</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/31.png" alt="image-20250322164639124"></p><h2 id="4-新建工程组"><a href="#4-新建工程组" class="headerlink" title="4. 新建工程组"></a>4. 新建工程组</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/30.png" alt="QQ_1742632928236"></p><h2 id="5-在main中添加头文件"><a href="#5-在main中添加头文件" class="headerlink" title="5. 在main中添加头文件"></a>5. 在main中添加头文件</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/32.png" alt="image-20250322164705613"></p><h2 id="6-调用测试函数"><a href="#6-调用测试函数" class="headerlink" title="6. 调用测试函数"></a>6. 调用测试函数</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/33.png" alt="image-20250322164737470"></p><h2 id="7-现象"><a href="#7-现象" class="headerlink" title="7. 现象"></a>7. 现象</h2><p><img src="/2025/03/18/LVGL/LVGL-%E7%A7%BB%E6%A4%8D/36.JPG" alt="IMG_5519"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、LVGL文件裁剪&quot;&gt;&lt;a href=&quot;#一、LVGL文件裁剪&quot; class=&quot;headerlink&quot; title=&quot;一、LVGL文件裁剪&quot;&gt;&lt;/a&gt;一、LVGL文件裁剪&lt;/h1&gt;&lt;h2 id=&quot;1-删除根目录下选中的文件&quot;&gt;&lt;a href=&quot;#1-删除根目录下</summary>
      
    
    
    
    <category term="LVGL" scheme="https://ydw-item.github.io.git/categories/LVGL/"/>
    
    
    <category term="LVGL" scheme="https://ydw-item.github.io.git/tags/LVGL/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://ydw-item.github.io.git/2025/03/15/BootLoader/"/>
    <id>https://ydw-item.github.io.git/2025/03/15/BootLoader/</id>
    <published>2025-03-15T02:51:01.845Z</published>
    <updated>2025-03-15T02:51:01.845Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>OV-Watch-12-LCD</title>
    <link href="https://ydw-item.github.io.git/2025/03/12/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/12.OV-Watch_LCD/"/>
    <id>https://ydw-item.github.io.git/2025/03/12/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/12.OV-Watch_LCD/</id>
    <published>2025-03-12T08:28:30.000Z</published>
    <updated>2025-03-12T08:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、SPI"><a href="#一、SPI" class="headerlink" title="一、SPI"></a>一、SPI</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p><strong>SPI</strong>英文全称Serial Peripheral Interface，即串行外围设备接口，是一种高速、<strong>全双工</strong>、<strong>同步</strong>的<strong>串行</strong>通信总线。</p><h2 id="1-2-信号线"><a href="#1-2-信号线" class="headerlink" title="1.2 信号线"></a>1.2 信号线</h2><ul><li><strong>SCK</strong>（Serial Clock）：串行<strong>时钟线</strong>，由主设备产生，用于同步数据传输。</li><li><strong>MOSI</strong>（Master Output Slave Input）：<strong>主机输出</strong>从机输入线，主设备通过这条线发送数据给从设备。</li><li><strong>MISO</strong>（Master Input Slave Output）：<strong>主机输入</strong>从机输出线，主设备通过这条线接收从设备发送的数据。</li><li><strong>SS</strong>（Slave Select）：<strong>从机选择线</strong>（每个从机一根选择线），用于选择与主设备进行通信的从设备。通常情况下，SS线为低电平有效，即当SS线为低电平时，选中对应的从设备进行通信。</li></ul><p><img src="/2025/03/12/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/12.OV-Watch_LCD/5.png" alt="image-20250305140335105"></p><h2 id="1-3-开始与结束"><a href="#1-3-开始与结束" class="headerlink" title="1.3 开始与结束"></a>1.3 开始与结束</h2><p>当SS从高电平拉低到<strong>低电平</strong>，这个算是<strong>起始</strong>的一个时序。而SS从低电平拉高到<strong>高电平</strong>，就算是结束的时序。</p><p><img src="/2025/03/12/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/12.OV-Watch_LCD/1.png" alt="img"></p><h2 id="1-4-发送和接收字节"><a href="#1-4-发送和接收字节" class="headerlink" title="1.4 发送和接收字节"></a>1.4 发送和接收字节</h2><p>发送接收字节看似是两个时序，但是在SPI中却是<strong>同一个时序</strong>，因为SPI的机制是&#x3D;&#x3D;我们发送一个字节，并且接收一个字节&#x3D;&#x3D;（<strong>哪怕我们并不需要接收数据</strong>）。反过来看也可以是我们接收一个字节，并且发送一个字节（<strong>哪怕这个字节是无用的数据</strong>）。</p><p><img src="/2025/03/12/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/12.OV-Watch_LCD/6.png" alt="image-20250305140438435"></p><p><img src="/2025/03/12/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/12.OV-Watch_LCD/2.png" alt="img"></p><h2 id="交换bit"><a href="#交换bit" class="headerlink" title="交换bit"></a>交换bit</h2><p><img src="/2025/03/12/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/12.OV-Watch_LCD/3.png" alt="img"></p><p><strong>在SCK上升沿的时候，移出MOSI的数据，在SCK下降沿的时候读取MISO的数据。</strong></p><p><strong>需要在SCK上升沿之前把需要发送的数据位放置在MOSI线上</strong></p><p><strong>SCK下降沿的时候马上读取MISO线上的数据位</strong></p><p><strong>（实际上下降沿和读取应该是同时的，但是我们软件模拟没法同时，但是效果是一样的）</strong></p><h2 id="1-6-不同模式下的通信"><a href="#1-6-不同模式下的通信" class="headerlink" title="1.6 不同模式下的通信"></a>1.6 不同模式下的通信</h2><p><img src="/2025/03/12/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/12.OV-Watch_LCD/9.png" alt="image-20250305141745720"></p><p><img src="/2025/03/12/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/12.OV-Watch_LCD/10.png" alt="image-20250305141814533"></p><p><img src="/2025/03/12/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/12.OV-Watch_LCD/8.png" alt="image-20250305141718015"></p><p><img src="/2025/03/12/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/12.OV-Watch_LCD/7.png" alt="image-20250305141639698"></p><p><img src="/2025/03/12/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/12.OV-Watch_LCD/11.png" alt="image-20250305141859718"></p><p><img src="/2025/03/12/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/12.OV-Watch_LCD/12.png" alt="image-20250305142011451"></p><p><img src="/2025/03/12/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/12.OV-Watch_LCD/13.png" alt="image-20250305142031698"></p><h1 id="二、TFT-LCD"><a href="#二、TFT-LCD" class="headerlink" title="二、TFT-LCD"></a>二、TFT-LCD</h1><p><img src="/2025/03/12/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/12.OV-Watch_LCD/image-20250305142759302.png" alt="image-20250305142759302"></p><table><thead><tr><th>引脚</th><th>功能</th></tr></thead><tbody><tr><td>GND</td><td>接地</td></tr><tr><td>VCC</td><td>供电（3.3V-5V）</td></tr><tr><td>TP_INT</td><td>接3v3上拉，</td></tr><tr><td>TP_SDA</td><td>TP触摸芯片数据引脚</td></tr><tr><td>TP_SCL</td><td>TP触摸芯片时钟引脚</td></tr><tr><td>LCD_RST</td><td>低电平TFT复位</td></tr><tr><td>LCD_MOSI</td><td>数据输入引脚</td></tr><tr><td>LCD_CLK</td><td>LCD时钟引脚</td></tr><tr><td>LCD_CS</td><td>片选信号，低电平使能</td></tr><tr><td>LCD_DC</td><td>区分接受的是数据还是命令（低电平命令，高电平数据）</td></tr><tr><td>LCD_BLK</td><td>背光（可常接3.3V）</td></tr></tbody></table><h2 id="HAL-SPI-Transmit"><a href="#HAL-SPI-Transmit" class="headerlink" title="HAL_SPI_Transmit()"></a>HAL_SPI_Transmit()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_SPI_Transmit</span><span class="params">(SPI_HandleTypeDef *hspi, <span class="type">uint8_t</span> *pData, <span class="type">uint16_t</span> Size, <span class="type">uint32_t</span> Timeout)</span></span><br></pre></td></tr></table></figure><p>**<code>SPI_HandleTypeDef \*hspi</code>**：</p><ul><li>指向 <strong>SPI 句柄</strong> 的指针。这个句柄包含了关于 SPI 外设的配置信息，必须在使用之前通过 <code>HAL_SPI_Init()</code> 初始化。</li></ul><p>**<code>uint8_t \*pData</code>**：</p><ul><li>指向要发送的数据的指针。<code>pData</code> 是一个数据缓冲区，包含要通过 SPI 发送的数据。数据以字节的形式存储。</li></ul><p>**<code>uint16_t Size</code>**：</p><ul><li>发送数据的大小，以字节为单位。<code>Size</code> 表示要发送的字节数。</li></ul><p>**<code>uint32_t Timeout</code>**：</p><ul><li>传输操作的超时时间，以毫秒为单位。如果在指定的时间内传输未完成，函数将返回超时错误。</li></ul><h2 id="LCD-GPIO-Init"><a href="#LCD-GPIO-Init" class="headerlink" title="LCD_GPIO_Init()"></a>LCD_GPIO_Init()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef  GPIO_InitStructure = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">__HAL_RCC_GPIOC_CLK_ENABLE();</span><br><span class="line"> __HAL_RCC_GPIOB_CLK_ENABLE();</span><br><span class="line">__HAL_RCC_GPIOD_CLK_ENABLE();</span><br><span class="line">__HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.Pin = BLK_PIN; </span><br><span class="line"> GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;  <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;<span class="comment">//速度50MHz</span></span><br><span class="line"> HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStructure);  <span class="comment">//初始化GPIOA</span></span><br><span class="line"> HAL_GPIO_WritePin(GPIOA, BLK_PIN, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.Pin = RES_PIN; </span><br><span class="line"> GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;  <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;<span class="comment">//速度50MHz</span></span><br><span class="line"> HAL_GPIO_Init(GPIOB, &amp;GPIO_InitStructure);  <span class="comment">//初始化GPIOB</span></span><br><span class="line"> HAL_GPIO_WritePin(GPIOB, RES_PIN, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.Pin = DC_PIN; </span><br><span class="line"> GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;  <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;<span class="comment">//速度50MHz</span></span><br><span class="line"> HAL_GPIO_Init(GPIOC, &amp;GPIO_InitStructure);  <span class="comment">//初始化GPIOC</span></span><br><span class="line"> HAL_GPIO_WritePin(GPIOC, DC_PIN, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.Pin = CS_PIN; </span><br><span class="line"> GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;  <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;<span class="comment">//速度50MHz</span></span><br><span class="line"> HAL_GPIO_Init(GPIOD, &amp;GPIO_InitStructure);  <span class="comment">//初始化GPIOD</span></span><br><span class="line"> HAL_GPIO_WritePin(GPIOD, CS_PIN, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写一个字节数据-LCD-Writ-Bus"><a href="#写一个字节数据-LCD-Writ-Bus" class="headerlink" title="写一个字节数据 LCD_Writ_Bus()"></a>写一个字节数据 LCD_Writ_Bus()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_Writ_Bus</span><span class="params">(u8 dat)</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//hard SPI</span></span><br><span class="line">HAL_SPI_Transmit(&amp;hspi1,&amp;dat,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//soft SPI</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">u8 i;</span></span><br><span class="line"><span class="comment">for(i=0;i&lt;8;i++)</span></span><br><span class="line"><span class="comment">&#123;  </span></span><br><span class="line"><span class="comment">LCD_SCLK_Clr();</span></span><br><span class="line"><span class="comment">if(dat&amp;0x80)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">   LCD_MOSI_Set();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">   LCD_MOSI_Clr();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">LCD_SCLK_Set();</span></span><br><span class="line"><span class="comment">dat&lt;&lt;=1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写两个字节数据-LCD-WR-DATA"><a href="#写两个字节数据-LCD-WR-DATA" class="headerlink" title="写两个字节数据 LCD_WR_DATA()"></a>写两个字节数据 LCD_WR_DATA()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_WR_DATA</span><span class="params">(u16 dat)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//LCD_Writ_Bus(dat&gt;&gt;8);</span></span><br><span class="line"><span class="comment">//LCD_Writ_Bus(dat);</span></span><br><span class="line"><span class="type">uint8_t</span> temp[<span class="number">2</span>];</span><br><span class="line">temp[<span class="number">0</span>]=(dat&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>;</span><br><span class="line">temp[<span class="number">1</span>]=dat&amp;<span class="number">0xff</span>;</span><br><span class="line">HAL_SPI_Transmit(&amp;hspi1,temp,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写命令-LCD-WR-REG"><a href="#写命令-LCD-WR-REG" class="headerlink" title="写命令 LCD_WR_REG()"></a>写命令 LCD_WR_REG()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_WR_REG</span><span class="params">(u8 dat)</span></span><br><span class="line">&#123;</span><br><span class="line">LCD_DC_Clr();<span class="comment">//写命令</span></span><br><span class="line">LCD_Writ_Bus(dat);</span><br><span class="line">LCD_DC_Set();<span class="comment">//写数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置起始和初始地址-LCD-Address-Set"><a href="#设置起始和初始地址-LCD-Address-Set" class="headerlink" title="设置起始和初始地址 LCD_Address_Set()"></a>设置起始和初始地址 LCD_Address_Set()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_Address_Set</span><span class="params">(u16 x1,u16 y1,u16 x2,u16 y2)</span></span><br><span class="line">&#123;</span><br><span class="line">LCD_WR_REG(<span class="number">0x2a</span>);<span class="comment">//列地址设置</span></span><br><span class="line">LCD_WR_DATA(x1);</span><br><span class="line">LCD_WR_DATA(x2);</span><br><span class="line">LCD_WR_REG(<span class="number">0x2b</span>);<span class="comment">//行地址设置</span></span><br><span class="line">LCD_WR_DATA(y1);</span><br><span class="line">LCD_WR_DATA(y2);</span><br><span class="line">LCD_WR_REG(<span class="number">0x2c</span>);<span class="comment">//储存器写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>设置显示区域</strong>：该函数通过设置列地址和行地址，定义了一个矩形区域 <code>(x1, y1)</code> 到 <code>(x2, y2)</code>，然后准备向该区域写入图像数据或颜色。</p><p><strong>显示区域绘制</strong>：在调用 <code>LCD_Address_Set()</code> 后，LCD 屏幕的指定区域就被设置好了，之后可以通过其他函数（例如 <code>LCD_WriteColor()</code> 或类似的函数）向该区域写入具体的颜色或图像数据，从而实现绘制操作。</p><h1 id="LCD常用函数"><a href="#LCD常用函数" class="headerlink" title="LCD常用函数"></a>LCD常用函数</h1><h2 id="1-LCD-Fill-区域颜色填充"><a href="#1-LCD-Fill-区域颜色填充" class="headerlink" title="1.LCD_Fill()区域颜色填充"></a>1.LCD_Fill()区域颜色填充</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_Fill</span><span class="params">(u16 xsta,u16 ysta,u16 xend,u16 yend,u16 color)</span></span><br><span class="line">&#123;          </span><br><span class="line">u16 i,j; </span><br><span class="line">LCD_Address_Set(xsta+OFFSET_X,ysta+OFFSET_Y,xend+OFFSET_X<span class="number">-1</span>,yend<span class="number">-1</span>+OFFSET_Y);<span class="comment">//设置显示范围</span></span><br><span class="line"><span class="keyword">for</span>(i=ysta;i&lt;yend;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=xsta;j&lt;xend;j++)</span><br><span class="line">&#123;</span><br><span class="line">LCD_WR_DATA(color);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-指定位置画点LCD-DrawPoint"><a href="#2-指定位置画点LCD-DrawPoint" class="headerlink" title="2.指定位置画点LCD_DrawPoint()"></a>2.指定位置画点LCD_DrawPoint()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_DrawPoint</span><span class="params">(u16 x,u16 y,u16 color)</span></span><br><span class="line">&#123;</span><br><span class="line">LCD_Address_Set(x,y,x,y);<span class="comment">//设置光标位置 </span></span><br><span class="line">LCD_WR_DATA(color);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="3-画线LCD-DrawLine"><a href="#3-画线LCD-DrawLine" class="headerlink" title="3.画线LCD_DrawLine()"></a>3.画线LCD_DrawLine()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_DrawLine</span><span class="params">(u16 x1,u16 y1,u16 x2,u16 y2,u16 color)</span></span><br><span class="line">&#123;</span><br><span class="line">u16 t; </span><br><span class="line"><span class="type">int</span> xerr=<span class="number">0</span>,yerr=<span class="number">0</span>,delta_x,delta_y,distance;</span><br><span class="line"><span class="type">int</span> incx,incy,uRow,uCol;</span><br><span class="line">delta_x=x2-x1; <span class="comment">//计算坐标增量 </span></span><br><span class="line">delta_y=y2-y1;</span><br><span class="line">uRow=x1;<span class="comment">//画线起点坐标</span></span><br><span class="line">uCol=y1;</span><br><span class="line"><span class="keyword">if</span>(delta_x&gt;<span class="number">0</span>)incx=<span class="number">1</span>; <span class="comment">//设置单步方向 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (delta_x==<span class="number">0</span>)incx=<span class="number">0</span>;<span class="comment">//垂直线 </span></span><br><span class="line"><span class="keyword">else</span> &#123;incx=<span class="number">-1</span>;delta_x=-delta_x;&#125;</span><br><span class="line"><span class="keyword">if</span>(delta_y&gt;<span class="number">0</span>)incy=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (delta_y==<span class="number">0</span>)incy=<span class="number">0</span>;<span class="comment">//水平线 </span></span><br><span class="line"><span class="keyword">else</span> &#123;incy=<span class="number">-1</span>;delta_y=-delta_y;&#125;</span><br><span class="line"><span class="keyword">if</span>(delta_x&gt;delta_y)distance=delta_x; <span class="comment">//选取基本增量坐标轴 </span></span><br><span class="line"><span class="keyword">else</span> distance=delta_y;</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;distance+<span class="number">1</span>;t++)</span><br><span class="line">&#123;</span><br><span class="line">LCD_DrawPoint(uRow,uCol,color);<span class="comment">//画点</span></span><br><span class="line">xerr+=delta_x;</span><br><span class="line">yerr+=delta_y;</span><br><span class="line"><span class="keyword">if</span>(xerr&gt;distance)</span><br><span class="line">&#123;</span><br><span class="line">xerr-=distance;</span><br><span class="line">uRow+=incx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(yerr&gt;distance)</span><br><span class="line">&#123;</span><br><span class="line">yerr-=distance;</span><br><span class="line">uCol+=incy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-画矩形LCD-DrawRectangle"><a href="#4-画矩形LCD-DrawRectangle" class="headerlink" title="4.画矩形LCD_DrawRectangle()"></a>4.画矩形LCD_DrawRectangle()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_DrawRectangle</span><span class="params">(u16 x1, u16 y1, u16 x2, u16 y2,u16 color)</span></span><br><span class="line">&#123;</span><br><span class="line">LCD_DrawLine(x1,y1,x2,y1,color);</span><br><span class="line">LCD_DrawLine(x1,y1,x1,y2,color);</span><br><span class="line">LCD_DrawLine(x1,y2,x2,y2,color);</span><br><span class="line">LCD_DrawLine(x2,y1,x2,y2,color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-画圆Draw-Circle"><a href="#5-画圆Draw-Circle" class="headerlink" title="5.画圆Draw_Circle()"></a>5.画圆Draw_Circle()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Draw_Circle</span><span class="params">(u16 x0,u16 y0,u8 r,u16 color)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">a=<span class="number">0</span>;b=r;  </span><br><span class="line"><span class="keyword">while</span>(a&lt;=b)</span><br><span class="line">&#123;</span><br><span class="line">LCD_DrawPoint(x0-b,y0-a,color);             <span class="comment">//3           </span></span><br><span class="line">LCD_DrawPoint(x0+b,y0-a,color);             <span class="comment">//0           </span></span><br><span class="line">LCD_DrawPoint(x0-a,y0+b,color);             <span class="comment">//1                </span></span><br><span class="line">LCD_DrawPoint(x0-a,y0-b,color);             <span class="comment">//2             </span></span><br><span class="line">LCD_DrawPoint(x0+b,y0+a,color);             <span class="comment">//4               </span></span><br><span class="line">LCD_DrawPoint(x0+a,y0-b,color);             <span class="comment">//5</span></span><br><span class="line">LCD_DrawPoint(x0+a,y0+b,color);             <span class="comment">//6 </span></span><br><span class="line">LCD_DrawPoint(x0-b,y0+a,color);             <span class="comment">//7</span></span><br><span class="line">a++;</span><br><span class="line"><span class="keyword">if</span>((a*a+b*b)&gt;(r*r))<span class="comment">//判断要画的点是否过远</span></span><br><span class="line">&#123;</span><br><span class="line">b--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-写汉字LCD-ShowChinese"><a href="#6-写汉字LCD-ShowChinese" class="headerlink" title="6.写汉字LCD_ShowChinese()"></a>6.写汉字LCD_ShowChinese()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_ShowChinese</span><span class="params">(u16 x,u16 y,u8 *s,u16 fc,u16 bc,u8 sizey,u8 mode)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(*s!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sizey==<span class="number">12</span>) LCD_ShowChinese12x12(x,y,s,fc,bc,sizey,mode);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sizey==<span class="number">16</span>) LCD_ShowChinese16x16(x,y,s,fc,bc,sizey,mode);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sizey==<span class="number">24</span>) LCD_ShowChinese24x24(x,y,s,fc,bc,sizey,mode);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sizey==<span class="number">32</span>) LCD_ShowChinese32x32(x,y,s,fc,bc,sizey,mode);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">s+=<span class="number">2</span>;</span><br><span class="line">x+=sizey;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   入口数据：x,y显示坐标</p><p>​        *s 要显示的汉字串</p><p>​        fc 字的颜色</p><p>​        bc 字的背景色</p><p>​        sizey 字号 可选 16 24 32</p><p>​        mode:  0非叠加模式  1叠加模式</p><h2 id="7-显示单个字符LCD-ShowChar"><a href="#7-显示单个字符LCD-ShowChar" class="headerlink" title="7.显示单个字符LCD_ShowChar()"></a>7.显示单个字符LCD_ShowChar()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_ShowChar</span><span class="params">(u16 x,u16 y,u8 num,u16 fc,u16 bc,u8 sizey,u8 mode)</span></span><br><span class="line">&#123;</span><br><span class="line">u8 temp,sizex,t,m=<span class="number">0</span>;</span><br><span class="line">u16 i,TypefaceNum;<span class="comment">//一个字符所占字节大小</span></span><br><span class="line">u16 x0=x;</span><br><span class="line">sizex=sizey/<span class="number">2</span>;</span><br><span class="line">TypefaceNum=(sizex/<span class="number">8</span>+((sizex%<span class="number">8</span>)?<span class="number">1</span>:<span class="number">0</span>))*sizey;</span><br><span class="line">num=num-<span class="string">&#x27; &#x27;</span>;    <span class="comment">//得到偏移后的值</span></span><br><span class="line">LCD_Address_Set(x,y,x+sizex<span class="number">-1</span>,y+sizey<span class="number">-1</span>);  <span class="comment">//设置光标位置 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;TypefaceNum;i++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span>(sizey==<span class="number">12</span>)temp=ascii_1206[num][i];       <span class="comment">//调用6x12字体</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sizey==<span class="number">16</span>)temp=ascii_1608[num][i]; <span class="comment">//调用8x16字体</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sizey==<span class="number">24</span>)temp=ascii_2412[num][i]; <span class="comment">//调用12x24字体</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sizey==<span class="number">32</span>)temp=ascii_3216[num][i]; <span class="comment">//调用16x32字体</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;<span class="number">8</span>;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!mode)<span class="comment">//非叠加模式</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp&amp;(<span class="number">0x01</span>&lt;&lt;t))LCD_WR_DATA(fc);</span><br><span class="line"><span class="keyword">else</span> LCD_WR_DATA(bc);</span><br><span class="line">m++;</span><br><span class="line"><span class="keyword">if</span>(m%sizex==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">m=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//叠加模式</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp&amp;(<span class="number">0x01</span>&lt;&lt;t))LCD_DrawPoint(x,y,fc);<span class="comment">//画一个点</span></span><br><span class="line">x++;</span><br><span class="line"><span class="keyword">if</span>((x-x0)==sizex)</span><br><span class="line">&#123;</span><br><span class="line">x=x0;</span><br><span class="line">y++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-显示字符串LCD-ShowString"><a href="#8-显示字符串LCD-ShowString" class="headerlink" title="8.显示字符串LCD_ShowString()"></a>8.显示字符串LCD_ShowString()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_ShowString</span><span class="params">(u16 x,u16 y,<span class="type">const</span> u8 *p,u16 fc,u16 bc,u8 sizey,u8 mode)</span></span><br><span class="line">&#123;         </span><br><span class="line"><span class="keyword">while</span>(*p!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;       </span><br><span class="line">LCD_ShowChar(x,y,*p,fc,bc,sizey,mode);</span><br><span class="line">x+=sizey/<span class="number">2</span>;</span><br><span class="line">p++;</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-显示数字mypow"><a href="#9-显示数字mypow" class="headerlink" title="9.显示数字mypow()"></a>9.显示数字mypow()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">u32 <span class="title function_">mypow</span><span class="params">(u8 m,u8 n)</span></span><br><span class="line">&#123;</span><br><span class="line">u32 result=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">while</span>(n--)result*=m;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-显示整数变量LCD-ShowIntNum"><a href="#10-显示整数变量LCD-ShowIntNum" class="headerlink" title="10.显示整数变量LCD_ShowIntNum()"></a>10.显示整数变量LCD_ShowIntNum()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_ShowIntNum</span><span class="params">(u16 x,u16 y,u16 num,u8 len,u16 fc,u16 bc,u8 sizey)</span></span><br><span class="line">&#123;         </span><br><span class="line">u8 t,temp;</span><br><span class="line">u8 enshow=<span class="number">0</span>;</span><br><span class="line">u8 sizex=sizey/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)</span><br><span class="line">&#123;</span><br><span class="line">temp=(num/mypow(<span class="number">10</span>,len-t<span class="number">-1</span>))%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(enshow==<span class="number">0</span>&amp;&amp;t&lt;(len<span class="number">-1</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LCD_ShowChar(x+t*sizex,y,<span class="string">&#x27; &#x27;</span>,fc,bc,sizey,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> enshow=<span class="number">1</span>; </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"> LCD_ShowChar(x+t*sizex,y,temp+<span class="number">48</span>,fc,bc,sizey,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="11-显示两位小数变量LCD-ShowFloatNum1"><a href="#11-显示两位小数变量LCD-ShowFloatNum1" class="headerlink" title="11.显示两位小数变量LCD_ShowFloatNum1()"></a>11.显示两位小数变量LCD_ShowFloatNum1()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_ShowFloatNum1</span><span class="params">(u16 x,u16 y,<span class="type">float</span> num,u8 len,u16 fc,u16 bc,u8 sizey)</span></span><br><span class="line">&#123;         </span><br><span class="line">u8 t,temp,sizex;</span><br><span class="line">u16 num1;</span><br><span class="line">sizex=sizey/<span class="number">2</span>;</span><br><span class="line">num1=num*<span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)</span><br><span class="line">&#123;</span><br><span class="line">temp=(num1/mypow(<span class="number">10</span>,len-t<span class="number">-1</span>))%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(t==(len<span class="number">-2</span>))</span><br><span class="line">&#123;</span><br><span class="line">LCD_ShowChar(x+(len<span class="number">-2</span>)*sizex,y,<span class="string">&#x27;.&#x27;</span>,fc,bc,sizey,<span class="number">0</span>);</span><br><span class="line">t++;</span><br><span class="line">len+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> LCD_ShowChar(x+t*sizex,y,temp+<span class="number">48</span>,fc,bc,sizey,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-显示图片LCD-ShowPicture"><a href="#12-显示图片LCD-ShowPicture" class="headerlink" title="12.显示图片LCD_ShowPicture()"></a>12.显示图片LCD_ShowPicture()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LCD_ShowPicture</span><span class="params">(u16 x,u16 y,u16 length,u16 width,<span class="type">const</span> u8 pic[])</span></span><br><span class="line">&#123;</span><br><span class="line">u16 i,j;</span><br><span class="line">u32 k=<span class="number">0</span>;</span><br><span class="line">LCD_Address_Set(x,y,x+length<span class="number">-1</span>,y+width<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;width;j++)</span><br><span class="line">&#123;</span><br><span class="line">LCD_WR_DATA8(pic[k*<span class="number">2</span>]);</span><br><span class="line">LCD_WR_DATA8(pic[k*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、SPI&quot;&gt;&lt;a href=&quot;#一、SPI&quot; class=&quot;headerlink&quot; title=&quot;一、SPI&quot;&gt;&lt;/a&gt;一、SPI&lt;/h1&gt;&lt;h2 id=&quot;1-1-简介&quot;&gt;&lt;a href=&quot;#1-1-简介&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/"/>
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/tags/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/tags/OV-Watch/"/>
    
  </entry>
  
  <entry>
    <title>OV-Watch-11-CST816</title>
    <link href="https://ydw-item.github.io.git/2025/03/11/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/11.OV-Watch_CST816/"/>
    <id>https://ydw-item.github.io.git/2025/03/11/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/11.OV-Watch_CST816/</id>
    <published>2025-03-11T08:28:30.000Z</published>
    <updated>2025-03-11T08:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、硬件选型和原理图"><a href="#一、硬件选型和原理图" class="headerlink" title="一、硬件选型和原理图"></a>一、硬件选型和原理图</h1><p><a href="https://blog.csdn.net/m0_60313295/article/details/144648171?ops_request_misc=&request_id=&biz_id=102&utm_term=CST816&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-144648171.142%5Ev101%5Epc_search_result_base5&spm=1018.2226.3001.4187">【模块系列】STM32&amp;1.69TFT屏幕_cst816t-CSDN博客</a></p><p><img src="/2025/03/11/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/11.OV-Watch_CST816/1.png" alt="image-20250302143612984"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、硬件选型和原理图&quot;&gt;&lt;a href=&quot;#一、硬件选型和原理图&quot; class=&quot;headerlink&quot; title=&quot;一、硬件选型和原理图&quot;&gt;&lt;/a&gt;一、硬件选型和原理图&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/m0_6031</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/"/>
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/tags/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/tags/OV-Watch/"/>
    
  </entry>
  
  <entry>
    <title>OV-Watch-10-SPL06</title>
    <link href="https://ydw-item.github.io.git/2025/03/10/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/10.OV-Watch_SPL06/"/>
    <id>https://ydw-item.github.io.git/2025/03/10/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/10.OV-Watch_SPL06/</id>
    <published>2025-03-10T08:28:30.000Z</published>
    <updated>2025-03-10T08:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、硬件选型和原理图"><a href="#一、硬件选型和原理图" class="headerlink" title="一、硬件选型和原理图"></a>一、硬件选型和原理图</h1><p><a href="https://blog.csdn.net/hdhfkfnbru/article/details/134553635?ops_request_misc=%7B%22request_id%22:%226840e66b8131dce8d44a0e2b5d8926ca%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=6840e66b8131dce8d44a0e2b5d8926ca&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-134553635-null-null.142%5Ev101%5Epc_search_result_base5&utm_term=spl06-001&spm=1018.2226.3001.4187">【传感器】SPL06-001（歌尔声学）-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_40598185/article/details/119347845?ops_request_misc=%7B%22request_id%22:%22b1b74e98a2848eda046f0182781c7856%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=b1b74e98a2848eda046f0182781c7856&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-119347845-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=spl06&spm=1018.2226.3001.4187">SPL06电容式压力传感器数据读取与处理(基于STM32)-CSDN博客</a></p><p><img src="/2025/03/10/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/10.OV-Watch_SPL06/1.png" alt="image-20250302142603950"></p><p><img src="/2025/03/10/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/10.OV-Watch_SPL06/2.png" alt="image-20250302142619225"></p><p><img src="/2025/03/10/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/10.OV-Watch_SPL06/3.png" alt="image-20250302142709827"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、硬件选型和原理图&quot;&gt;&lt;a href=&quot;#一、硬件选型和原理图&quot; class=&quot;headerlink&quot; title=&quot;一、硬件选型和原理图&quot;&gt;&lt;/a&gt;一、硬件选型和原理图&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/hdhfkfn</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/"/>
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/tags/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/tags/OV-Watch/"/>
    
  </entry>
  
  <entry>
    <title>OV-Watch-9-POWER</title>
    <link href="https://ydw-item.github.io.git/2025/03/09/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/9.OV-Watch_POWER/"/>
    <id>https://ydw-item.github.io.git/2025/03/09/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/9.OV-Watch_POWER/</id>
    <published>2025-03-09T08:28:30.000Z</published>
    <updated>2025-03-09T08:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、硬件选型和原理图"><a href="#一、硬件选型和原理图" class="headerlink" title="一、硬件选型和原理图"></a>一、硬件选型和原理图</h1><p><a href="https://blog.csdn.net/weixin_45829708/article/details/124892787">【电源芯片】TPS63020升降压芯片-电池放电-CSDN博客</a></p><p><img src="/2025/03/09/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/9.OV-Watch_POWER/1.png" alt="image-20250302141655183"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、硬件选型和原理图&quot;&gt;&lt;a href=&quot;#一、硬件选型和原理图&quot; class=&quot;headerlink&quot; title=&quot;一、硬件选型和原理图&quot;&gt;&lt;/a&gt;一、硬件选型和原理图&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/"/>
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/tags/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/tags/OV-Watch/"/>
    
  </entry>
  
  <entry>
    <title>OV-Watch-8-OWDG</title>
    <link href="https://ydw-item.github.io.git/2025/03/08/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/8.OV-Watch_OWDG/"/>
    <id>https://ydw-item.github.io.git/2025/03/08/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/8.OV-Watch_OWDG/</id>
    <published>2025-03-08T08:28:30.000Z</published>
    <updated>2025-03-08T08:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、硬件选型和原理图"><a href="#一、硬件选型和原理图" class="headerlink" title="一、硬件选型和原理图"></a>一、硬件选型和原理图</h1><p><a href="https://blog.csdn.net/zhuoqingjoking97298/article/details/121437976?ops_request_misc=%7B%22request_id%22:%229a230254f870292e2dfc70e4cb11001b%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=9a230254f870292e2dfc70e4cb11001b&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-121437976-null-null.142%5Ev101%5Epc_search_result_base5&utm_term=BL1551B&spm=1018.2226.3001.4187">BL1551模拟开关，封装SC70-6_bl1551中文资料-CSDN博客</a></p><p><a href="https://blog.csdn.net/gutie_bartholomew/article/details/88878248?ops_request_misc=%7B%22request_id%22:%22d68738496a6e2d51c751a092b86908fa%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=d68738496a6e2d51c751a092b86908fa&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-88878248-null-null.142%5Ev101%5Epc_search_result_base5&utm_term=TPS3823&spm=1018.2226.3001.4187">看门狗定时器实测-CSDN博客</a></p><p><img src="/2025/03/08/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/8.OV-Watch_OWDG/1.png" alt="image-20250302141027190"></p><h2 id="1-1-BL1551B"><a href="#1-1-BL1551B" class="headerlink" title="1.1 BL1551B"></a>1.1 BL1551B</h2><p>为<strong>NRES</strong>引脚输入<strong>低电平</strong>使单片机<strong>复位</strong></p><ul><li>当ENB为<strong>高</strong>电平时，<strong>B</strong>连接到<strong>A1</strong></li><li>当ENB为<strong>低</strong>电平时，<strong>B</strong>连接到<strong>A2</strong></li></ul><h2 id="1-2-TPS3823"><a href="#1-2-TPS3823" class="headerlink" title="1.2 TPS3823"></a>1.2 TPS3823</h2><p><a href="https://www.ti.com/cn/lit/ds/symlink/tps3823.pdf">带看门狗计时器的 TPS382x 电压监视器 datasheet (Rev. N)</a></p><ul><li><p><strong>引脚1（RESET#）</strong>：低电平复位输出</p></li><li><p><strong>引脚4（WDI）</strong>：看门狗计时器输入。如果 WDI 保持高电平或低电平的时间<strong>超过超时周期</strong>， 则会触发复位。当复位生效或 WDI 出现上升沿或下降沿时，计时器将清 零。如果未使用，WDI 连接必须为高阻抗，以防其引起复位事件</p><p>  <img src="/2025/03/08/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/8.OV-Watch_OWDG/2.png" alt="image-20250304200017544"></p></li></ul><h1 id="二、软件设计"><a href="#二、软件设计" class="headerlink" title="二、软件设计"></a>二、软件设计</h1><h2 id="2-1-初始化"><a href="#2-1-初始化" class="headerlink" title="2.1 初始化"></a>2.1 初始化</h2><p>通过控制单片机与<strong>BL1551B</strong>连接的引脚的<strong>高低电平</strong>来控制看门狗的启停</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">WDOG_Port_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStructure = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">  __HAL_RCC_GPIOB_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">  GPIO_InitStructure.Pin = WDOG_EN_PIN;</span><br><span class="line">  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">  GPIO_InitStructure.Pull = GPIO_PULLUP;</span><br><span class="line">  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">  HAL_GPIO_Init(WDOG_EN_PORT, &amp;GPIO_InitStructure);</span><br><span class="line">  GPIO_InitStructure.Pin = WDI_PIN;</span><br><span class="line">  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">  HAL_GPIO_Init(WDI_PORT, &amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">WDOG_Enable</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  HAL_GPIO_WritePin(WDOG_EN_PORT,WDOG_EN_PIN,GPIO_PIN_RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">WDOG_Disnable</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  HAL_GPIO_WritePin(WDOG_EN_PORT,WDOG_EN_PIN,GPIO_PIN_SET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">WDOG_Feed</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  HAL_GPIO_TogglePin(WDI_PORT,WDI_PIN);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-喂狗任务"><a href="#2-1-喂狗任务" class="headerlink" title="2.1 喂狗任务"></a>2.1 喂狗任务</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">WDOGFeedTask</span><span class="params">(<span class="type">void</span> *argument)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//owdg</span></span><br><span class="line">WDOG_Port_Init(); <span class="comment">//YDW 看门狗相关引脚初始化</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">WDOG_Feed();  <span class="comment">// 喂看门狗    翻转引脚电平</span></span><br><span class="line">WDOG_Enable();<span class="comment">// 启用看门狗  拉低引脚电平</span></span><br><span class="line">    osDelay(<span class="number">100</span>);<span class="comment">// 100ms喂一次</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、硬件选型和原理图&quot;&gt;&lt;a href=&quot;#一、硬件选型和原理图&quot; class=&quot;headerlink&quot; title=&quot;一、硬件选型和原理图&quot;&gt;&lt;/a&gt;一、硬件选型和原理图&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zhuoqin</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/"/>
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/tags/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/tags/OV-Watch/"/>
    
  </entry>
  
  <entry>
    <title>LVGL(一)基础对象</title>
    <link href="https://ydw-item.github.io.git/2025/03/07/LVGL/LVGL-0-%E6%9D%82%E8%B0%88/"/>
    <id>https://ydw-item.github.io.git/2025/03/07/LVGL/LVGL-0-%E6%9D%82%E8%B0%88/</id>
    <published>2025-03-07T08:24:19.000Z</published>
    <updated>2025-03-07T08:24:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV18H4y1g7CF?spm_id_from=333.788.videopod.sections&vd_source=daf1db3c953df56f74e76077dfa61ab4">2-3-1_LVGL入门教程之基础对象(lv_obj)_哔哩哔哩_bilibili</a></p><p><a href="https://lvgl.100ask.net/master/details/widgets/index.html">Widgets（控件） — LVGL 文档</a></p><h1 id="一、目录说明"><a href="#一、目录说明" class="headerlink" title="一、目录说明"></a>一、目录说明</h1><ul><li>demos：存放的是LVGL一些综合的内置示例，部分示例可以在官网体验</li><li>docs：存放LVGL的开发文档，阅读时一般不在这里直接阅读，而是在LVGL站点阅读</li><li>env_support:一些环境或者平台的支持，不如我们所使用的RT-Thread就在其中</li><li>scripts：存放一些处理脚本，我们在使用LVGL时基本不会用到</li><li>src：存放LVGL实际的源码，我们使用LVGL进行开发时，都是使用这里面的代码文件</li><li>tests：存放一些CI测试文件，我们在使用LVGL时不会用到</li></ul><h1 id="二、LVGL的启动流程初探"><a href="#二、LVGL的启动流程初探" class="headerlink" title="二、LVGL的启动流程初探"></a>二、LVGL的启动流程初探</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> APIENTRY <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR szCmdLine, <span class="type">int</span> nCmdShow)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 初始化LVGL库 */</span></span><br><span class="line">    lv_init();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化LVGL的硬件抽象层（显示、触摸）  */</span></span><br><span class="line">    <span class="type">lv_display_t</span> * display = lv_windows_create_display(title, <span class="number">1024</span>, <span class="number">600</span>, <span class="number">100</span>, FALSE, FALSE);</span><br><span class="line">    lv_windows_acquire_pointer_indev(display);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将提示信息输出到控制台，也可以使用printf函数 */</span></span><br><span class="line">    LV_LOG_USER(<span class="string">&quot;LVGL initialization completed!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 运行demo */</span></span><br><span class="line">    <span class="comment">// 下面这三行是运行一个demo，第一行和后面两行的效果是一样的，只能同时去掉第一行或者后面两行，两者之一的注释</span></span><br><span class="line">    <span class="comment">// 后续学习的时候要确保下面这三行都被注释掉</span></span><br><span class="line">    lv_demo_widgets();</span><br><span class="line">    <span class="comment">//char * demo_str[] = &#123;&quot;widgets&quot;&#125;;</span></span><br><span class="line">    <span class="comment">//lv_demos_create(demo_str, strlen((char * )demo_str));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 课程示例代码，一般同时只运行一个</span></span><br><span class="line"><span class="comment">       运行前，请将上面的三行代码都注释掉 */</span></span><br><span class="line">    <span class="comment">//lesson_2_3_1();         // 基础对象(lv_obj)，&quot;Hello, LVGL</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 定期调用lv_task处理（定时器）程序它也可以在定时器或操作系统任务中完成 */</span></span><br><span class="line">        lv_task_handler();</span><br><span class="line">        usleep(<span class="number">5000</span>);       <span class="comment">/* 不一直占用系统资源 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LVGL的定时器处理程序是一个内置的任务系统，允许开发者注册函数，使其可以定期被调用，它帮助管理时间敏感的操作（毫秒级别）和周期性的活动</p><h1 id="三、LVGL裁剪"><a href="#三、LVGL裁剪" class="headerlink" title="三、LVGL裁剪"></a>三、LVGL裁剪</h1><p>LVGL的裁剪在<code>lv_conf.h</code>文件中进行</p><p>我们可以尝试关闭<code>lv_conf.h</code>文件中的WIDGETS和THEMES的部分功能来验证</p><h1 id="四、SquareLine-Stdio使用"><a href="#四、SquareLine-Stdio使用" class="headerlink" title="四、SquareLine_Stdio使用"></a>四、SquareLine_Stdio使用</h1><ul><li><p>Project name (项目名称)：<code>lvgl_1</code>：这是该项目的名称。项目名通常用于标识和区分不同的应用或设计。</p></li><li><p>路径 (路径)：<code>G:\ydw_item\LVGL\my_lvgl_work\my_lvgl_1\</code>：显示了该项目的存储路径。此路径用于保存项目文件。</p></li><li><p>Resolution (分辨率)：<code>240 x 280</code>：设置显示屏的分辨率为 240 像素宽，280 像素高。这意味着你的显示设备具有240像素的宽度和280像素的高度。</p></li></ul><p><img src="/2025/03/07/LVGL/LVGL-0-%E6%9D%82%E8%B0%88/8.png" alt="image-20250316153602188"></p><ul><li>Rotation (旋转)<code>：0 degree</code>：显示方向设置为 0 度，也就是没有旋转，显示方向与硬件显示方向一致。</li></ul><p><img src="/2025/03/07/LVGL/LVGL-0-%E6%9D%82%E8%B0%88/1.png" alt="image-20250316151839395"></p><ul><li><p>Offset (偏移)：<code>0, 0</code>：设置显示区域的偏移量，通常用来对显示内容进行微调，确保图像和内容显示正确。在这里，偏移量设置为 <code>(0, 0)</code>，表示没有偏移。</p><p>  <img src="/2025/03/07/LVGL/LVGL-0-%E6%9D%82%E8%B0%88/5.png" alt="image-20250316152820450"></p></li><li><p>Shape (形状)：<code>Rectangle</code>：设置显示区域的形状为矩形，这适用于大多数显示屏，尤其是液晶或OLED显示器。</p></li></ul><p><img src="/2025/03/07/LVGL/LVGL-0-%E6%9D%82%E8%B0%88/4.png" alt="image-20250316152240395"></p><ul><li>Color depth (颜色深度)：设置颜色深度为 16 位，这意味着每个像素使用 16 位来表示颜色，通常为 RGB 565 格式（5 位红色，6 位绿色，5 位蓝色）。</li></ul><p><img src="/2025/03/07/LVGL/LVGL-0-%E6%9D%82%E8%B0%88/2.png" alt="image-20250316151915238"></p><ul><li>LVGL version (LVGL 版本)：该项目使用的 LVGL 版本是 8.3.6，这是 Lightweight Graphics Library 的版本。LVGL 是一个开源的图形库，通常用于嵌入式系统中的图形用户界面（GUI）。</li></ul><p><img src="/2025/03/07/LVGL/LVGL-0-%E6%9D%82%E8%B0%88/6.png" alt="image-20250316152850607"></p><ul><li>Theme (主题)：Light：主题设置为浅色主题，意味着界面背景会较亮，适用于在明亮环境中使用。</li></ul><p><img src="/2025/03/07/LVGL/LVGL-0-%E6%9D%82%E8%B0%88/7.png" alt="image-20250316152924653"></p><ul><li>Multilanguage (多语言)：Disable：多语言支持被禁用，意味着该界面不会有语言切换功能，可能只支持单一语言</li></ul><p><img src="/2025/03/07/LVGL/LVGL-0-%E6%9D%82%E8%B0%88/3.png" alt="image-20250316152119619"></p><h1 id="五、自定义字体"><a href="#五、自定义字体" class="headerlink" title="五、自定义字体"></a>五、自定义字体</h1><h2 id="5-1-生成自定义字库"><a href="#5-1-生成自定义字库" class="headerlink" title="5.1 生成自定义字库"></a>5.1 生成自定义字库</h2><p><a href="https://lvgl.io/tools/fontconverter">LVGL在线自定义字体转换器</a></p><p><img src="/2025/03/07/LVGL/LVGL-0-%E6%9D%82%E8%B0%88/9.png" alt="QQ_1742203731682"></p><h2 id="5-2-声明自定义字库"><a href="#5-2-声明自定义字库" class="headerlink" title="5.2 声明自定义字库"></a>5.2 声明自定义字库</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LV_FONT_DECLARE(alimamashuheiti_48);</span><br></pre></td></tr></table></figure><h2 id="5-3-使用字体"><a href="#5-3-使用字体" class="headerlink" title="5.3 使用字体"></a>5.3 使用字体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lv_obj_set_style_text_font(ui_TimeMinuteLabel, &amp;alimamashuheiti_48, LV_PART_MAIN | LV_STATE_DEFAULT);</span><br></pre></td></tr></table></figure><h2 id="5-4-设置字体颜色"><a href="#5-4-设置字体颜色" class="headerlink" title="5.4 设置字体颜色"></a>5.4 设置字体颜色</h2><p><a href="https://www.jyshare.com/front-end/55/">RGB 转 16 进制工具 | 菜鸟工具</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lv_obj_set_style_text_color(ui_TimeMinuteLabel, lv_color_hex(<span class="number">0xCDCDB4</span>), LV_PART_MAIN | LV_STATE_DEFAULT);</span><br></pre></td></tr></table></figure><h1 id="六、图像"><a href="#六、图像" class="headerlink" title="六、图像"></a>六、图像</h1><h2 id="6-1-生成代码"><a href="#6-1-生成代码" class="headerlink" title="6.1 生成代码"></a>6.1 生成代码</h2><p><a href="https://lvgl.io/tools/imageconverter">LVGL在线图像生成器</a></p><p><strong>在使用生成器前使用PS软件将图片修改致对应大小</strong> </p><p><img src="/2025/03/07/LVGL/LVGL-0-%E6%9D%82%E8%B0%88/10.png" alt="QQ_1742209430572"></p><h2 id="6-2-声明图像"><a href="#6-2-声明图像" class="headerlink" title="6.2 声明图像"></a>6.2 声明图像</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LV_IMG_DECLARE(image1);</span><br></pre></td></tr></table></figure><h2 id="6-3-设置图像"><a href="#6-3-设置图像" class="headerlink" title="6.3 设置图像"></a>6.3 设置图像</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">lv_obj_t</span> * bg_image = lv_img_create(screem);</span><br><span class="line">lv_img_set_src(bg_image,&amp;image1);</span><br></pre></td></tr></table></figure><h1 id="七、GIF图像"><a href="#七、GIF图像" class="headerlink" title="七、GIF图像"></a>七、GIF图像</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV18H4y1g7CF?spm_id_from=333.788.videopod.sections&amp;vd_source=daf1db3c953df56f74e76077dfa61ab4&quot;&gt;2-</summary>
      
    
    
    
    <category term="LVGL" scheme="https://ydw-item.github.io.git/categories/LVGL/"/>
    
    
    <category term="LVGL" scheme="https://ydw-item.github.io.git/tags/LVGL/"/>
    
  </entry>
  
  <entry>
    <title>OV-Watch-7-MPU6050</title>
    <link href="https://ydw-item.github.io.git/2025/03/06/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/7.OV-Watch_MPU6050/"/>
    <id>https://ydw-item.github.io.git/2025/03/06/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/7.OV-Watch_MPU6050/</id>
    <published>2025-03-06T08:28:30.000Z</published>
    <updated>2025-03-06T08:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、硬件选型和原理图"><a href="#一、硬件选型和原理图" class="headerlink" title="一、硬件选型和原理图"></a>一、硬件选型和原理图</h1><p><a href="https://blog.csdn.net/weixin_44788542/article/details/129328712?ops_request_misc=%7B%22request_id%22:%225dc026da3d39d8006490552a9c75352b%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=5dc026da3d39d8006490552a9c75352b&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-129328712-null-null.142%5Ev101%5Epc_search_result_base5&utm_term=MPU6050&spm=1018.2226.3001.4187">六轴传感器基础知识学习：MPU6050特性，四元数，姿态解算，卡尔曼滤波_mpu6050卡尔曼滤波姿态解算-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_45217381/article/details/134302880?ops_request_misc=%7B%22request_id%22:%225dc026da3d39d8006490552a9c75352b%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=5dc026da3d39d8006490552a9c75352b&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-134302880-null-null.142%5Ev101%5Epc_search_result_base5&utm_term=MPU6050&spm=1018.2226.3001.4187">STM32外设系列—MPU6050角度传感器-CSDN博客</a></p><p><img src="/2025/03/06/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/7.OV-Watch_MPU6050/1.png" alt="image-20250302140809926"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、硬件选型和原理图&quot;&gt;&lt;a href=&quot;#一、硬件选型和原理图&quot; class=&quot;headerlink&quot; title=&quot;一、硬件选型和原理图&quot;&gt;&lt;/a&gt;一、硬件选型和原理图&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/"/>
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/tags/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/tags/OV-Watch/"/>
    
  </entry>
  
  <entry>
    <title>OV-Watch-6-LSM303DLH</title>
    <link href="https://ydw-item.github.io.git/2025/03/05/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/6.OV-Watch_LSM303DLH/"/>
    <id>https://ydw-item.github.io.git/2025/03/05/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/6.OV-Watch_LSM303DLH/</id>
    <published>2025-03-05T08:28:30.000Z</published>
    <updated>2025-03-05T08:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、硬件选型和原理图"><a href="#一、硬件选型和原理图" class="headerlink" title="一、硬件选型和原理图"></a>一、硬件选型和原理图</h1><p><a href="https://blog.csdn.net/xiaolong1126626497/article/details/134456723">基于单片机设计的电子指南针(LSM303DLH模块(三轴磁场 + 三轴加速度)_lsm303dlh电子指南针-CSDN博客</a></p><p><img src="/2025/03/05/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/6.OV-Watch_LSM303DLH/1.png" alt="image-20250302134955498"></p><p><code>LSM_DRDY</code>,<code>LSM_INT2</code>,<code>LSM_INT1</code>没有连接引脚</p><p><img src="/2025/03/05/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/6.OV-Watch_LSM303DLH/2.png" alt="image-20250302135027564"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、硬件选型和原理图&quot;&gt;&lt;a href=&quot;#一、硬件选型和原理图&quot; class=&quot;headerlink&quot; title=&quot;一、硬件选型和原理图&quot;&gt;&lt;/a&gt;一、硬件选型和原理图&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/xiaolon</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/"/>
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/tags/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/tags/OV-Watch/"/>
    
  </entry>
  
  <entry>
    <title>OV-Watch-5-EM7028</title>
    <link href="https://ydw-item.github.io.git/2025/03/04/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/5.OV-Watch_EM7028/"/>
    <id>https://ydw-item.github.io.git/2025/03/04/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/5.OV-Watch_EM7028/</id>
    <published>2025-03-04T08:28:30.000Z</published>
    <updated>2025-03-04T08:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、硬件选型和原理图"><a href="#一、硬件选型和原理图" class="headerlink" title="一、硬件选型和原理图"></a>一、硬件选型和原理图</h1><p><a href="https://blog.csdn.net/Graceful_scenery/article/details/144164078">STM2F411智能手环设计-CSDN博客</a></p><p><a href="https://wenku.csdn.net/column/1qfak96893">【心率信号处理】：EM7028数据采集、采样与滤波技术 - CSDN文库</a></p><p><img src="/2025/03/04/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/5.OV-Watch_EM7028/1.png" alt="image-20250302125516606"></p><p><img src="/2025/03/04/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/5.OV-Watch_EM7028/2.png" alt="image-20250302125540196"></p><p><img src="/2025/03/04/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/5.OV-Watch_EM7028/3.png" alt="image-20250302125553257"></p><p><img src="/2025/03/04/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/5.OV-Watch_EM7028/image-20250302125623426.png" alt="image-20250302125623426"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、硬件选型和原理图&quot;&gt;&lt;a href=&quot;#一、硬件选型和原理图&quot; class=&quot;headerlink&quot; title=&quot;一、硬件选型和原理图&quot;&gt;&lt;/a&gt;一、硬件选型和原理图&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/Gracefu</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/"/>
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/tags/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/tags/OV-Watch/"/>
    
  </entry>
  
  <entry>
    <title>OV-Watch-4-BL24C02</title>
    <link href="https://ydw-item.github.io.git/2025/03/03/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/4.OV-Watch_BL24C02/"/>
    <id>https://ydw-item.github.io.git/2025/03/03/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/4.OV-Watch_BL24C02/</id>
    <published>2025-03-03T08:28:30.000Z</published>
    <updated>2025-03-03T08:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、硬件选型和原理图"><a href="#一、硬件选型和原理图" class="headerlink" title="一、硬件选型和原理图"></a>一、硬件选型和原理图</h1><p><a href="https://blog.csdn.net/kiss_youi/article/details/115468415">BL24Cxx系列EEPROM测试总结-CSDN博客</a></p><p><a href="https://blog.csdn.net/2401_85236922/article/details/141247699">BL24C02P芯片的使用说明&#x2F;i2c数据存储芯片-CSDN博客</a></p><p><img src="/2025/03/03/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/4.OV-Watch_BL24C02/1.png" alt="image-20250302124825002"></p><p><img src="/2025/03/03/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/4.OV-Watch_BL24C02/2.png" alt="image-20250302124752744"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、硬件选型和原理图&quot;&gt;&lt;a href=&quot;#一、硬件选型和原理图&quot; class=&quot;headerlink&quot; title=&quot;一、硬件选型和原理图&quot;&gt;&lt;/a&gt;一、硬件选型和原理图&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/kiss_yo</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/"/>
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/tags/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/tags/OV-Watch/"/>
    
  </entry>
  
  <entry>
    <title>OV-Watch-3-AHT21</title>
    <link href="https://ydw-item.github.io.git/2025/03/02/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/3.OV-Watch_AHT21/"/>
    <id>https://ydw-item.github.io.git/2025/03/02/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/3.OV-Watch_AHT21/</id>
    <published>2025-03-02T08:28:30.000Z</published>
    <updated>2025-03-02T08:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、硬件选型和原理图"><a href="#一、硬件选型和原理图" class="headerlink" title="一、硬件选型和原理图"></a>一、硬件选型和原理图</h1><p><a href="https://blog.csdn.net/weixin_45189628/article/details/111110465">关于基于I2C使用AHT21B模块及stm32核心板进行温湿度采集-CSDN博客</a></p><p><img src="/2025/03/02/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/3.OV-Watch_AHT21/1.png" alt="image-20250302123509556"></p><p><img src="/2025/03/02/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/3.OV-Watch_AHT21/2.png" alt="image-20250302123647037"></p><p><img src="/2025/03/02/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/3.OV-Watch_AHT21/3.png" alt="image-20250302123741051"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、硬件选型和原理图&quot;&gt;&lt;a href=&quot;#一、硬件选型和原理图&quot; class=&quot;headerlink&quot; title=&quot;一、硬件选型和原理图&quot;&gt;&lt;/a&gt;一、硬件选型和原理图&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/"/>
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/tags/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/tags/OV-Watch/"/>
    
  </entry>
  
  <entry>
    <title>OV-Watch-1-Blue</title>
    <link href="https://ydw-item.github.io.git/2025/02/28/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/1.OV-Watch_blue/"/>
    <id>https://ydw-item.github.io.git/2025/02/28/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/1.OV-Watch_blue/</id>
    <published>2025-02-28T08:28:30.000Z</published>
    <updated>2025-02-28T08:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、硬件选型和原理图"><a href="#一、硬件选型和原理图" class="headerlink" title="一、硬件选型和原理图"></a>一、硬件选型和原理图</h1><p><img src="/2025/02/28/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/1.OV-Watch_blue/1.png" alt="image-20250228163058430"></p><table><thead><tr><th align="center">原理图引脚</th><th align="center">MCU引脚</th></tr></thead><tbody><tr><td align="center">BLE_TX</td><td align="center">PA9</td></tr><tr><td align="center">BLE_RX</td><td align="center">PA10</td></tr><tr><td align="center">BLE_EN</td><td align="center">PA8</td></tr></tbody></table><h2 id="1-BL1551B"><a href="#1-BL1551B" class="headerlink" title="1.BL1551B"></a>1.BL1551B</h2><p><a href="https://blog.csdn.net/zhuoqingjoking97298/article/details/121437976">BL1551模拟开关，封装SC70-6_bl1551中文资料-CSDN博客</a></p><h2 id="2-KT6328A1"><a href="#2-KT6328A1" class="headerlink" title="2.KT6328A1"></a>2.KT6328A1</h2><p><a href="https://blog.csdn.net/qyvhome/article/details/121592868">KT6368A国产蓝牙BLE芯片驱动程序&amp;硬件注意事项-CSDN博客</a></p><h1 id="二、软件"><a href="#二、软件" class="headerlink" title="二、软件"></a>二、软件</h1><h2 id="2-1-KT6328-h"><a href="#2-1-KT6328-h" class="headerlink" title="2.1 KT6328.h"></a>2.1 KT6328.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BLE_EN_PORT GPIOA<span class="comment">//宏定义引脚</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLE_EN_GPIO GPIO_PIN_8</span></span><br><span class="line">    </span><br><span class="line"><span class="type">void</span> <span class="title function_">KT6328_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">KT6328_Enable</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">KT6328_Disable</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="2-2-KT6328-c"><a href="#2-2-KT6328-c" class="headerlink" title="2.2 KT6328.c"></a>2.2 KT6328.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">KT6328_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); <span class="comment">//确保引脚在初始化过程中保持已知且稳定的状态</span></span><br><span class="line"></span><br><span class="line">  GPIO_InitStruct.Pin = GPIO_PIN_8;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">  HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">KT6328_Enable</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_WritePin(BLE_EN_PORT, BLE_EN_GPIO, GPIO_PIN_SET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">KT6328_Disable</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_WritePin(BLE_EN_PORT, BLE_EN_GPIO, GPIO_PIN_RESET);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-usart-c"><a href="#2-3-usart-c" class="headerlink" title="2.3 usart.c"></a>2.3 usart.c</h2><p><a href="https://blog.csdn.net/weixin_44386927/article/details/112862801?sharetype=blogdetail&shareId=112862801&sharerefer=APP&sharesource=2303_77755415&sharefrom=link">一.在HAL库中使用串口（dma）模式接收发送测试_串口 dma 接收 hal库-CSDN博客</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MX_USART1_UART_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_Init 0 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END USART1_Init 0 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_Init 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END USART1_Init 1 */</span></span><br><span class="line">  huart1.Instance = USART1;</span><br><span class="line">  huart1.Init.BaudRate = <span class="number">115200</span>;</span><br><span class="line">  huart1.Init.WordLength = UART_WORDLENGTH_8B;</span><br><span class="line">  huart1.Init.StopBits = UART_STOPBITS_1;</span><br><span class="line">  huart1.Init.Parity = UART_PARITY_NONE;</span><br><span class="line">  huart1.Init.Mode = UART_MODE_TX_RX;</span><br><span class="line">  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;</span><br><span class="line">  huart1.Init.OverSampling = UART_OVERSAMPLING_16;</span><br><span class="line">  <span class="keyword">if</span> (HAL_UART_Init(&amp;huart1) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_Init 2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END USART1_Init 2 */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_MspInit</span><span class="params">(UART_HandleTypeDef* uartHandle)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">if</span>(uartHandle-&gt;Instance==USART1)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_MspInit 0 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END USART1_MspInit 0 */</span></span><br><span class="line">    <span class="comment">/* USART1 clock enable */</span></span><br><span class="line">    __HAL_RCC_USART1_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">    __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">    <span class="comment">/**USART1 GPIO Configuration</span></span><br><span class="line"><span class="comment">    PA9     ------&gt; USART1_TX</span></span><br><span class="line"><span class="comment">    PA10     ------&gt; USART1_RX</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;</span><br><span class="line">    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;</span><br><span class="line">    HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USART1 DMA Init */</span></span><br><span class="line">    <span class="comment">/* USART1_RX Init */</span></span><br><span class="line">    hdma_usart1_rx.Instance = DMA2_Stream5;</span><br><span class="line">    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;</span><br><span class="line">    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;</span><br><span class="line">    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;</span><br><span class="line">    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;</span><br><span class="line">    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;</span><br><span class="line">    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;</span><br><span class="line">    hdma_usart1_rx.Init.Mode = DMA_NORMAL;</span><br><span class="line">    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;</span><br><span class="line">    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;</span><br><span class="line">    <span class="keyword">if</span> (HAL_DMA_Init(&amp;hdma_usart1_rx) != HAL_OK)<span class="comment">//HAL_UART_Init()中调用了HAL_UART_MspInit()</span></span><br><span class="line">    &#123;</span><br><span class="line">      Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USART1_TX Init */</span></span><br><span class="line">    hdma_usart1_tx.Instance = DMA2_Stream7;</span><br><span class="line">    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;</span><br><span class="line">    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;</span><br><span class="line">    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;</span><br><span class="line">    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;</span><br><span class="line">    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;</span><br><span class="line">    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;</span><br><span class="line">    hdma_usart1_tx.Init.Mode = DMA_NORMAL;</span><br><span class="line">    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;</span><br><span class="line">    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;</span><br><span class="line">    <span class="keyword">if</span> (HAL_DMA_Init(&amp;hdma_usart1_tx) != HAL_OK)</span><br><span class="line">    &#123;</span><br><span class="line">      Error_Handler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USART1 interrupt Init */</span></span><br><span class="line">    HAL_NVIC_SetPriority(USART1_IRQn, <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">    HAL_NVIC_EnableIRQ(USART1_IRQn);</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USART1_MspInit 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END USART1_MspInit 1 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HAL_UART_Init()<strong>中调用了</strong>HAL_UART_MspInit()</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、硬件选型和原理图&quot;&gt;&lt;a href=&quot;#一、硬件选型和原理图&quot; class=&quot;headerlink&quot; title=&quot;一、硬件选型和原理图&quot;&gt;&lt;/a&gt;一、硬件选型和原理图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2025/02/28/%E4%B8%AA%E4%BA%</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/"/>
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/tags/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/tags/OV-Watch/"/>
    
  </entry>
  
  <entry>
    <title>OV-Watch-2-系统滴答定时器</title>
    <link href="https://ydw-item.github.io.git/2025/02/26/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/2.OV-Watch_%E7%B3%BB%E7%BB%9F%E6%BB%B4%E7%AD%94%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <id>https://ydw-item.github.io.git/2025/02/26/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/2.OV-Watch_%E7%B3%BB%E7%BB%9F%E6%BB%B4%E7%AD%94%E5%AE%9A%E6%97%B6%E5%99%A8/</id>
    <published>2025-02-26T05:48:30.000Z</published>
    <updated>2025-02-26T05:48:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、系统滴答定时器介绍"><a href="#一、系统滴答定时器介绍" class="headerlink" title="一、系统滴答定时器介绍"></a>一、系统滴答定时器介绍</h1><p><a href="https://www.bilibili.com/video/BV1YD4y1t7NN/?spm_id_from=333.337.search-card.all.click&vd_source=daf1db3c953df56f74e76077dfa61ab4">【信盈达】- 关于STM32如何使用系统滴答定时器实现精准延时_哔哩哔哩_bilibili</a></p><p><img src="/2025/02/26/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/2.OV-Watch_%E7%B3%BB%E7%BB%9F%E6%BB%B4%E7%AD%94%E5%AE%9A%E6%97%B6%E5%99%A8/6.png" alt="458b52f3-fa96-459d-a128-c80c1793eeb5"></p><p><strong>SysTick</strong> 是 <strong>ARM Cortex-M</strong> 处理器内建的一个定时器，通常用于生成定时中断，用于实现操作系统的时间片轮转调度、延时功能或定期的定时任务。SysTick 定时器是一个 <strong>24 位递减计数器</strong>，通常用来生成周期性的中断，以便进行周期性任务的调度。</p><h3 id="SysTick-定时器的工作原理："><a href="#SysTick-定时器的工作原理：" class="headerlink" title="SysTick 定时器的工作原理："></a><strong>SysTick 定时器的工作原理：</strong></h3><ol><li><strong>24 位计数器</strong>：<ul><li>SysTick 定时器的核心是一个 <strong>24</strong> (16,777,216)位的<strong>递减计数器</strong>。计数器从一个预定值递减到 0。当计数器到达 0 时，会触发一个中断。</li><li>计数器可以通过设置其初始值来指定时间间隔。</li></ul></li><li><strong>中断控制</strong>：<ul><li>SysTick 定时器生成的中断可以用来进行定时任务的执行，例如在 RTOS 中，SysTick 用来生成时间片，以进行任务调度。</li><li>也可以用于延时函数（如延时 1 毫秒、10 毫秒等），控制时间的流逝。</li></ul></li><li><strong>计时精度</strong>：<ul><li>SysTick 的精度通常取决于系统时钟频率。常见的情况下，系统时钟频率为 72 MHz 或 48 MHz，因此 SysTick 的中断周期可以非常精确。</li></ul></li></ol><p><img src="/2025/02/26/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/2.OV-Watch_%E7%B3%BB%E7%BB%9F%E6%BB%B4%E7%AD%94%E5%AE%9A%E6%97%B6%E5%99%A8/2.png" alt="image-20250302151454173"></p><h1 id="SysTick-Type结构体"><a href="#SysTick-Type结构体" class="headerlink" title="SysTick_Type结构体"></a>SysTick_Type结构体</h1><p><img src="/2025/02/26/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/2.OV-Watch_%E7%B3%BB%E7%BB%9F%E6%BB%B4%E7%AD%94%E5%AE%9A%E6%97%B6%E5%99%A8/1.png" alt="image-20250226144449751"></p><ol><li><p><strong><code>CTRL</code>（SysTick 控制与状态寄存器）：</strong></p><ul><li><strong>偏移量</strong>: <code>0x000</code></li><li><strong>类型</strong>: <code>__IOM uint32_t</code>（读写寄存器）</li><li><strong>描述</strong>: 该寄存器用于控制和查看 SysTick 定时器的状态。通过设置不同的控制位，能够启动、停止定时器，配置中断等。</li></ul><p> <strong>常见控制位：</strong></p><ul><li><strong>ENABLE (位 0)</strong>: 启动或停止 SysTick 定时器。</li><li><strong>TICKINT (位 1)</strong>: 启用或禁用 SysTick 溢出中断。</li><li><strong>CLKSOURCE (位 2)</strong>: 选择 SysTick 定时器的时钟源（HCLK 或外部时钟）。</li><li><strong>COUNTFLAG (位 16)</strong>: 当计数器溢出时，设置为 1。</li></ul><p> <img src="/2025/02/26/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/2.OV-Watch_%E7%B3%BB%E7%BB%9F%E6%BB%B4%E7%AD%94%E5%AE%9A%E6%97%B6%E5%99%A8/4.png" alt="image-20250302151934500"></p></li><li><p><strong><code>LOAD</code>（SysTick 重载值寄存器）：</strong></p><ul><li><strong>偏移量</strong>: <code>0x004</code></li><li><strong>类型</strong>: <code>__IOM uint32_t</code>（读写寄存器）</li><li><strong>描述</strong>: 该寄存器用于设置定时器的重载值。SysTick 定时器每当计数器减至零时，会根据 <code>LOAD</code> 寄存器的值重新加载并开始新的计数。</li></ul><p> <strong>用途</strong>: 通过设置该寄存器的值来控制定时器的溢出周期。例如，如果你想让定时器每 1 毫秒溢出一次，你可以设置该寄存器的值为 <code>SystemCoreClock / 1000</code>。</p></li></ol><p><img src="/2025/02/26/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/2.OV-Watch_%E7%B3%BB%E7%BB%9F%E6%BB%B4%E7%AD%94%E5%AE%9A%E6%97%B6%E5%99%A8/5.png" alt="image-20250302151952720"></p><ol><li><p><strong><code>VAL</code>（SysTick 当前值寄存器）：</strong></p><ul><li><strong>偏移量</strong>: <code>0x008</code></li><li><strong>类型</strong>: <code>__IOM uint32_t</code>（读写寄存器）</li><li><strong>描述</strong>: 该寄存器保存当前 SysTick 定时器的计数值。每当计数器从 <code>LOAD</code> 的值开始计数，直到它到达零时，<code>VAL</code> 会自动重载为 <code>LOAD</code> 的值，并且会触发中断（如果启用了中断）。</li></ul><p> <strong>用途</strong>: 读取此寄存器可以获取当前定时器的剩余计数值。它可用于计算经过的时间或检查定时器的状态。</p></li><li><p><strong><code>CALIB</code>（SysTick 校准寄存器）：</strong></p><ul><li><strong>偏移量</strong>: <code>0x00C</code></li><li><strong>类型</strong>: <code>__IM uint32_t</code>（只读寄存器）</li><li><strong>描述</strong>: 该寄存器提供关于系统时钟的校准信息，包括 SysTick 定时器的校准值。它通常用于获取定时器的精度和所使用的时钟的频率。</li></ul><p> <strong>用途</strong>: 这个寄存器通常用于调试和校准目的，帮助开发者了解系统时钟的频率和定时器的精度。</p></li></ol><h1 id="一、系统滴答定时器用于延时函数"><a href="#一、系统滴答定时器用于延时函数" class="headerlink" title="一、系统滴答定时器用于延时函数"></a>一、系统滴答定时器用于延时函数</h1><h2 id="1-1delay-init"><a href="#1-1delay-init" class="headerlink" title="1.1delay_init()"></a>1.1delay_init()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">delay_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);<span class="comment">//设置 SysTick 时钟源为 HCLK，即系统时钟。</span></span><br><span class="line">    HAL_SYSTICK_Config(SystemCoreClock / (<span class="number">1000U</span> / uwTickFreq));<span class="comment">//配置 SysTick 定时器的重载值，使其每 1 毫秒触发一次中断。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-delay-us"><a href="#1-2-delay-us" class="headerlink" title="1.2 delay_us()"></a>1.2 delay_us()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SysTick             ((SysTick_Type   *)     SysTick_BASE  )   <span class="comment">/*!&lt; SysTick configuration struct */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYS_CLK 100 <span class="comment">//1s计数1百万次</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1秒 = 1,000毫秒 = 1,000,000微秒 = 1,000,000,000纳秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 100MHZ = 100,000,000,000HZ = 1us计数100次</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OS_SUPPORT <span class="comment">// 是否可以使用操作系统相关的功能       </span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_us</span><span class="params">(u32 nus)</span></span><br><span class="line">&#123;</span><br><span class="line">    u32 ticks;</span><br><span class="line">    u32 told,tnow,tcnt=<span class="number">0</span>;</span><br><span class="line">    u32 reload=SysTick-&gt;LOAD;<span class="comment">// 记录当前定时器的ARR重载值寄存器的值    </span></span><br><span class="line">    ticks=nus*SYS_CLK; <span class="comment">// 计算设定的延时需要计数多少次 </span></span><br><span class="line">    delay_osschedlock();<span class="comment">// 锁定调度</span></span><br><span class="line">    told=SysTick-&gt;VAL;        <span class="comment">// 记录延时开始时定时器的计数值</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tnow=SysTick-&gt;VAL;<span class="comment">// 不断获取当前定时器的计数值</span></span><br><span class="line">        <span class="keyword">if</span>(tnow!=told)<span class="comment">// 判断当前的计数值是否等于开始时的计数值</span></span><br><span class="line">        &#123;    </span><br><span class="line">            <span class="keyword">if</span>(tnow&lt;told) tcnt+=told-tnow;  <span class="comment">// 递减计数器</span></span><br><span class="line">            <span class="keyword">else</span> tcnt+=reload-tnow+told;    <span class="comment">// 处理计数器溢出</span></span><br><span class="line">            told=tnow;</span><br><span class="line">            <span class="keyword">if</span>(tcnt&gt;=ticks) <span class="keyword">break</span>;  <span class="comment">// 达到预定的时钟周期数时退出</span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;</span><br><span class="line">    delay_osschedunlock();<span class="comment">// 释放调度锁    </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">#<span class="keyword">else</span>  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_us</span><span class="params">(u32 nus)</span></span><br><span class="line">&#123;</span><br><span class="line">    u32 ticks;</span><br><span class="line">    u32 told,tnow,tcnt=<span class="number">0</span>;</span><br><span class="line">    u32 reload=SysTick-&gt;LOAD; <span class="comment">// 记录当前定时器的重载值寄存器的值     </span></span><br><span class="line">    ticks=nus*SYS_CLK;  <span class="comment">// 计算所需的时钟周期数，nus 为延迟的微秒数 #define SYS_CLK 100</span></span><br><span class="line">    told=SysTick-&gt;VAL;     <span class="comment">// 记录当前定时器的计数值, SysTick-&gt;VAL 是递减计数器</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tnow=SysTick-&gt;VAL;</span><br><span class="line">        <span class="keyword">if</span>(tnow!=told)</span><br><span class="line">        &#123;    </span><br><span class="line">            <span class="keyword">if</span>(tnow&lt;told) tcnt+=told-tnow;   <span class="comment">// 递减计数器。如果当前值小于之前值，将两数之和累加进tcnt</span></span><br><span class="line">            <span class="keyword">else</span> tcnt+=reload-tnow+told;     <span class="comment">// 处理计数器溢出。如果当前值大于之前的值，将重载值</span></span><br><span class="line">            told=tnow; <span class="comment">// 将当前时间赋值给told</span></span><br><span class="line">                <span class="keyword">if</span>(tcnt&gt;=ticks) <span class="keyword">break</span>;   <span class="comment">// 达到预定的时钟周期数时退出</span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-3-delay-ms"><a href="#1-3-delay-ms" class="headerlink" title="1.3 delay_ms()"></a>1.3 delay_ms()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> OS_SUPPORT        </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_ms</span><span class="params">(u16 nms)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(delay_osrunning&amp;&amp;delay_osintnesting==<span class="number">0</span>)    </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span>(nms&gt;=fac_ms)</span><br><span class="line">&#123; </span><br><span class="line">   delay_ostimedly(nms/fac_ms);</span><br><span class="line">&#125;</span><br><span class="line">nms%=fac_ms; </span><br><span class="line">&#125;</span><br><span class="line">delay_us((u32)(nms*<span class="number">1000</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span>  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_ms</span><span class="params">(u16 nms)</span></span><br><span class="line">&#123;</span><br><span class="line">u32 i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nms;i++) delay_us(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、系统滴答定时器介绍&quot;&gt;&lt;a href=&quot;#一、系统滴答定时器介绍&quot; class=&quot;headerlink&quot; title=&quot;一、系统滴答定时器介绍&quot;&gt;&lt;/a&gt;一、系统滴答定时器介绍&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/OV-Watch/"/>
    
    
    <category term="个人项目" scheme="https://ydw-item.github.io.git/tags/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="OV-Watch" scheme="https://ydw-item.github.io.git/tags/OV-Watch/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-9-二叉树</title>
    <link href="https://ydw-item.github.io.git/2025/02/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/10.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://ydw-item.github.io.git/2025/02/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/10.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2025-02-25T06:39:49.000Z</published>
    <updated>2025-02-25T06:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉树的创建与遍历</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>             //定义二叉树结点的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>* <span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>* <span class="title">rchild</span>;</span></span><br><span class="line">&#125;TreeNode;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">createTree</span><span class="params">(TreeNode** T, <span class="type">char</span>* data, <span class="type">int</span>* index)</span>   <span class="comment">//初始化树</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    ch = data[*index];                                   </span><br><span class="line">    *index += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 此时为空节点</span></span><br><span class="line">        *T = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 此时不为空</span></span><br><span class="line">        *T = (TreeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TreeNode));</span><br><span class="line">        (*T) -&gt; data = ch;</span><br><span class="line">        <span class="comment">// 创建左子树，逻辑一致，进行递归</span></span><br><span class="line">        createTree(&amp;((*T)-&gt;lchild), data, index);</span><br><span class="line">        <span class="comment">// 创建右子树，逻辑一致，进行递归</span></span><br><span class="line">        createTree(&amp;((*T)-&gt;rchild), data, index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">preOrder</span><span class="params">(TreeNode* T)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 先办事</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, T-&gt;data);</span><br><span class="line">        <span class="comment">// 处理左孩子</span></span><br><span class="line">        preOrder(T-&gt;lchild);</span><br><span class="line">        <span class="comment">// 处理右孩子</span></span><br><span class="line">        preOrder(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">inOrder</span><span class="params">(TreeNode* T)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 处理左孩子</span></span><br><span class="line">        inOrder(T-&gt;lchild);</span><br><span class="line">        <span class="comment">// 中办事</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, T-&gt;data);</span><br><span class="line">        <span class="comment">// 处理右孩子</span></span><br><span class="line">        inOrder(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">postOrder</span><span class="params">(TreeNode* T)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 处理左孩子</span></span><br><span class="line">        postOrder(T-&gt;lchild);</span><br><span class="line">        <span class="comment">// 处理右孩子</span></span><br><span class="line">        postOrder(T-&gt;rchild);</span><br><span class="line">        <span class="comment">// 后办事</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, T-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span><br><span class="line">&#123;</span><br><span class="line">    TreeNode* T;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    createTree(&amp;T, argv[<span class="number">1</span>], &amp;index);</span><br><span class="line">    preOrder(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    inOrder(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    postOrder(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="数据结构" scheme="https://ydw-item.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://ydw-item.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-8-暴力匹配</title>
    <link href="https://ydw-item.github.io.git/2025/02/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/8.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%9A%B4%E5%8A%9B%E5%8C%B9%E9%85%8D/"/>
    <id>https://ydw-item.github.io.git/2025/02/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/8.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%9A%B4%E5%8A%9B%E5%8C%B9%E9%85%8D/</id>
    <published>2025-02-25T06:38:49.000Z</published>
    <updated>2025-02-25T06:38:49.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暴力匹配</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">String</span>       //定义字符串结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span>* data;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">&#125; String;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String* <span class="title function_">initString</span><span class="params">()</span>                                <span class="comment">//初始化字符串 </span></span><br><span class="line">&#123;</span><br><span class="line">    String* s = (String*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(String));    <span class="comment">//为字符串开辟动态内存空间</span></span><br><span class="line">    s-&gt;data = <span class="literal">NULL</span>;                                 <span class="comment">//为</span></span><br><span class="line">    s-&gt;len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stringAssign</span><span class="params">(String* s, <span class="type">char</span>* data)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (s-&gt;data) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(s-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* temp = data;</span><br><span class="line">    <span class="keyword">while</span> (*temp) </span><br><span class="line">    &#123;</span><br><span class="line">        len++;</span><br><span class="line">        temp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        s-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">        s-&gt;len = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        temp = data;</span><br><span class="line">        s-&gt;len = len;</span><br><span class="line">        s-&gt;data = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (len + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++, temp++) </span><br><span class="line">        &#123;</span><br><span class="line">            s-&gt;data[i] = *temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printString</span><span class="params">(String* s)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s-&gt;len; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(i == <span class="number">0</span> ? <span class="string">&quot;%c &quot;</span> : <span class="string">&quot;-&gt; %c &quot;</span>, s-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">forceMatch</span><span class="params">(String* master, String* sub)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; master-&gt;len &amp;&amp; j &lt; sub-&gt;len) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (master-&gt;data[i] == sub-&gt;data[j]) </span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            i = i - j + <span class="number">1</span>;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j == sub-&gt;len) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;force match success.\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;force match fail.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span><br><span class="line">&#123;</span><br><span class="line">    String* s = initString();</span><br><span class="line">    String* s1 = initString();</span><br><span class="line">    stringAssign(s, argv[<span class="number">1</span>]);</span><br><span class="line">    stringAssign(s1, argv[<span class="number">2</span>]);</span><br><span class="line">    printString(s);</span><br><span class="line">    printString(s1);</span><br><span class="line">    forceMatch(s, s1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="数据结构" scheme="https://ydw-item.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://ydw-item.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-7-循环队列</title>
    <link href="https://ydw-item.github.io.git/2025/02/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/7.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/"/>
    <id>https://ydw-item.github.io.git/2025/02/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/7.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/</id>
    <published>2025-02-25T06:37:49.000Z</published>
    <updated>2025-02-25T06:37:49.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循环队列</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> front;</span><br><span class="line">    <span class="type">int</span> rear;</span><br><span class="line">    <span class="type">int</span> data[MAXSIZE];</span><br><span class="line">&#125; Queue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Queue* <span class="title function_">initQueue</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    Queue* Q = (Queue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">    Q-&gt;front = Q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printQueue</span><span class="params">(Queue* Q)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 要知道队列当前有多少个元素</span></span><br><span class="line">    <span class="type">int</span> length = (Q-&gt;rear - Q-&gt;front + MAXSIZE) % MAXSIZE;</span><br><span class="line">    <span class="type">int</span> index = Q-&gt;front;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, Q-&gt;data[index]);</span><br><span class="line">        index = (index + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isFull</span><span class="params">(Queue* Q)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((Q-&gt;rear + <span class="number">1</span>) % MAXSIZE == Q-&gt;front) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">(Queue* Q)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q-&gt;front == Q-&gt;rear) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">enQueue</span><span class="params">(Queue* Q, <span class="type">int</span> data)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isFull(Q)) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        Q-&gt;data[Q-&gt;rear] = data;</span><br><span class="line">        Q-&gt;rear = (Q-&gt;rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">deQueue</span><span class="params">(Queue* Q)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty(Q)) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> data = Q-&gt;data[Q-&gt;front];</span><br><span class="line">        Q-&gt;front = (Q-&gt;front + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Queue* Q = initQueue();</span><br><span class="line">    enQueue(Q, <span class="number">1</span>);</span><br><span class="line">    enQueue(Q, <span class="number">2</span>);</span><br><span class="line">    enQueue(Q, <span class="number">3</span>);</span><br><span class="line">    enQueue(Q, <span class="number">4</span>);</span><br><span class="line">    printQueue(Q);</span><br><span class="line">    deQueue(Q);</span><br><span class="line">    printQueue(Q);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="数据结构" scheme="https://ydw-item.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://ydw-item.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-6-栈</title>
    <link href="https://ydw-item.github.io.git/2025/02/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/6.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/"/>
    <id>https://ydw-item.github.io.git/2025/02/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/6.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/</id>
    <published>2025-02-25T06:36:49.000Z</published>
    <updated>2025-02-25T06:36:49.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//栈</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>         //定义栈结点的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Node *<span class="title function_">initStack</span><span class="params">()</span>                               <span class="comment">//初始化栈</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *L = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));     <span class="comment">//为头结点分配动态内存空间</span></span><br><span class="line">    L-&gt;data = <span class="number">0</span>;                                <span class="comment">//data初始化</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;                             <span class="comment">//头结点next指向NULL</span></span><br><span class="line">    <span class="keyword">return</span> L;                                   <span class="comment">//返回头结点的地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(Node *L, <span class="type">int</span> data)</span>                    <span class="comment">//入栈</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *node = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));  <span class="comment">//为新结点分配动态内存空间</span></span><br><span class="line">    node-&gt;data = data;                          <span class="comment">//为data赋值</span></span><br><span class="line">    node-&gt;next = L-&gt;next;                       <span class="comment">//将头结点的next的值 赋值给 新结点的next</span></span><br><span class="line">    L-&gt;next = node;                             <span class="comment">//将新结点的地址 赋值给 头结点的next</span></span><br><span class="line">    L-&gt;data++;                                  <span class="comment">//头结点data++</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">pop</span><span class="params">(Node *L)</span>                            <span class="comment">//出栈</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;data == <span class="number">0</span>)                       <span class="comment">//判断栈是否为空栈 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;                           <span class="comment">//是空栈则返回 1</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        Node *node = L-&gt;next;               <span class="comment">//将头结点的next的值 赋值给 node</span></span><br><span class="line">        <span class="type">int</span> data = node-&gt;data;              <span class="comment">//将头结点的下一结点的data 赋值给 data</span></span><br><span class="line">        L-&gt;next = node-&gt;next;               <span class="comment">//将头结点的下一结点的next 赋值给头结点的next</span></span><br><span class="line">        <span class="built_in">free</span>(node);                         <span class="comment">//释放头结点的下一结点的动态内存空间</span></span><br><span class="line">        L-&gt;data--;                          <span class="comment">//将头结点的data--</span></span><br><span class="line">        <span class="keyword">return</span> data;                        <span class="comment">//返回取出的值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">(Node *L)</span>                        <span class="comment">//判断是否为空栈</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;data == <span class="number">0</span> || L-&gt;next == <span class="literal">NULL</span>)    <span class="comment">//判断头结点的data == 0 或者 头结点的next的值为NULL</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;                           <span class="comment">//返回 1，代表此栈为空栈</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;                           <span class="comment">//返回 0，代表此栈不是空栈</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printStack</span><span class="params">(Node *<span class="built_in">stack</span>)</span>            <span class="comment">//打印栈</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *node = <span class="built_in">stack</span>-&gt;next;           <span class="comment">//将头结点的next的值 赋值给node</span></span><br><span class="line">    <span class="keyword">while</span> (node)                        <span class="comment">//判断node是否为NULL</span></span><br><span class="line">    &#123;      </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, node-&gt;data);   <span class="comment">//打印node的data</span></span><br><span class="line">        node = node-&gt;next;              <span class="comment">//更新node</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);                   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Node *<span class="built_in">stack</span> = initStack();          <span class="comment">//创建栈</span></span><br><span class="line">    push(<span class="built_in">stack</span>, <span class="number">1</span>);                     <span class="comment">//1 入栈</span></span><br><span class="line">    push(<span class="built_in">stack</span>, <span class="number">2</span>);                     <span class="comment">//2 入栈</span></span><br><span class="line">    push(<span class="built_in">stack</span>, <span class="number">3</span>);                     <span class="comment">//3 入栈</span></span><br><span class="line">    push(<span class="built_in">stack</span>, <span class="number">4</span>);                     <span class="comment">//4 入栈</span></span><br><span class="line">    printStack(<span class="built_in">stack</span>);                  <span class="comment">//打印栈</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pop = %d\n&quot;</span>, pop(<span class="built_in">stack</span>));   <span class="comment">//出战</span></span><br><span class="line">    printStack(<span class="built_in">stack</span>);                  <span class="comment">//打印栈</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="数据结构" scheme="https://ydw-item.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://ydw-item.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
